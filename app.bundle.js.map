{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/game/build.intermediate/client/client/app.js","dist/game/build.intermediate/client/client/biome_test.js","dist/game/build.intermediate/client/client/continent_gen.js","dist/game/build.intermediate/client/client/continent_serialize.js","dist/game/build.intermediate/client/client/continent_serialize_test.js","dist/game/build.intermediate/client/glov/client/glov/bootstrap.js","dist/game/build.intermediate/client/glov/client/glov/camera2d.js","dist/game/build.intermediate/client/glov/client/glov/cmds.js","dist/game/build.intermediate/client/glov/client/glov/edit_box.js","dist/game/build.intermediate/client/glov/client/glov/effects.js","dist/game/build.intermediate/client/glov/client/glov/engine.js","dist/game/build.intermediate/client/glov/client/glov/filewatch.js","dist/game/build.intermediate/client/glov/client/glov/font.js","dist/game/build.intermediate/client/glov/client/glov/geom.js","dist/game/build.intermediate/client/glov/glb/client/glov/glb/decode-utf8.js","dist/game/build.intermediate/client/glov/glb/client/glov/glb/gltf-type-utils.js","dist/game/build.intermediate/client/glov/glb/client/glov/glb/parser.js","dist/game/build.intermediate/client/glov/glb/client/glov/glb/unpack-binary-json.js","dist/game/build.intermediate/client/glov/glb/client/glov/glb/unpack-glb-buffers.js","dist/game/build.intermediate/client/glov/client/glov/in_event.js","dist/game/build.intermediate/client/glov/client/glov/input.js","dist/game/build.intermediate/client/glov/client/glov/link.js","dist/game/build.intermediate/client/glov/client/glov/local_storage.js","dist/game/build.intermediate/client/glov/client/glov/mat43.js","dist/game/build.intermediate/client/glov/client/glov/models.js","dist/game/build.intermediate/client/glov/client/glov/net.js","dist/game/build.intermediate/client/glov/client/glov/particles.js","dist/game/build.intermediate/client/glov/client/glov/perf.js","dist/game/build.intermediate/client/glov/client/glov/pointer_lock.js","dist/game/build.intermediate/client/glov/client/glov/polyfill.js","dist/game/build.intermediate/client/glov/client/glov/rand_alea.js","dist/game/build.intermediate/client/glov/client/glov/settings.js","dist/game/build.intermediate/client/glov/client/glov/shaders.js","dist/game/build.intermediate/client/glov/client/glov/sound.js","dist/game/build.intermediate/client/glov/client/glov/sprites.js","dist/game/build.intermediate/client/glov/client/glov/subscription_manager.js","dist/game/build.intermediate/client/glov/client/glov/textures.js","dist/game/build.intermediate/client/glov/client/glov/transition.js","dist/game/build.intermediate/client/glov/client/glov/ui.js","dist/game/build.intermediate/client/glov/client/glov/urlhash.js","dist/game/build.intermediate/client/glov/client/glov/vmath.js","dist/game/build.intermediate/client/glov/client/glov/walltime.js","dist/game/build.intermediate/client/glov/client/glov/webfs.js","dist/game/build.intermediate/client/glov/client/glov/wsclient.js","dist/game/build.intermediate/client/img/font/04b03_8x1.json","dist/game/build.intermediate/client/img/font/04b03_8x2.json","dist/game/build.intermediate/client/img/font/palanquin32.json","dist/game/build.intermediate/client/client/main.js","dist/game/build.intermediate/client/client/proc_gen_constants.js","dist/game/build.intermediate/common/common/ack.js","dist/game/build.intermediate/common/dist/game/build.intermediate/common/common/base64.js","dist/game/build.intermediate/common/common/cmd_parse.js","dist/game/build.intermediate/common/common/md5.js","dist/game/build.intermediate/common/dist/game/build.intermediate/common/common/packet.js","dist/game/build.intermediate/common/common/tiny-events.js","dist/game/build.intermediate/common/common/util.js","dist/game/build.intermediate/common/common/wscommon.js"],"names":[],"mappings":"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G,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,WACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACvB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,UACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,WACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,WACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACvB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,UACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,WACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACvB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,YACzB,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAI,IAAI,YACzB,EAAE,GAAG,EAAE,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","file":"app.bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* eslint global-require:off */\n\n// Startup code.\n\nlet called_once = false;\nwindow.onload = function () {\n  if (called_once) {\n    return;\n  }\n  called_once = true;\n  // require('./glov/worker_comm.js').startup(); // First, so it gets loading quickly (if workers required)\n  require('./glov/bootstrap.js');\n  require('./main.js').main();\n};\n","//////////////////////////////////////////////////////////////////////////////////\n// Code provided for example purposes only with no license for use or distribution\nconst assert = require('assert');\nconst { abs } = Math;\nconst { randCreate } = require('./glov/rand_alea.js');\n\nconst C_WATER = 0;\nconst C_PLAINS = 1;\nconst C_HILLS = 2;\nconst C_MOUNTAINS = 3;\n\nfunction rgb(r,g,b) {\n  return new Uint8Array([r, g, b, 255]);\n}\nconst OCEAN = rgb(0, 0, 255);\nconst TUNDRA = rgb(224,244,255);\nconst MOUNTAINS = rgb(170,170,170);\nconst CLIFFS = rgb(90,90,90);\nconst HILLS_FOREST = rgb(32,128,32);\nconst DENSE_FOREST = rgb(16,64,16);\nconst PLAINS_FOREST = rgb(96,128,32);\nconst HILLS = rgb(64,255,64);\nconst PLAINS = rgb(255,255,64);\nconst DESERT = rgb(255,255,191);\nconst PLAINS_RED = rgb(255,96,64);\nconst PLAINS_BLUE = rgb(64,96,255);\n\nconst COMMON = 1;\nconst UNCOMMON = 0.25;\nconst RARE = 0.03;\nfunction weightedChoiceBuild(list) {\n  let total = 0;\n  for (let ii = 0; ii < list.length; ++ii) {\n    total += list[ii][0];\n  }\n  return { total, list };\n}\n\nfunction weightedChoiceGet(precalc, choice) {\n  let { total, list } = precalc;\n  let w = total * choice;\n  for (let ii = 0; ii < list.length; ++ii) {\n    w -= list[ii][0];\n    if (w <= 0) {\n      return list[ii][1];\n    }\n  }\n  // Should never get here, baring floating point rounding errors\n  return list[0][1];\n}\n\nconst choice_elev0_hum75 = weightedChoiceBuild([\n  [COMMON, DENSE_FOREST],\n  [UNCOMMON, PLAINS_FOREST],\n]);\n\nconst choice_elev0_hum50 = weightedChoiceBuild([\n  [COMMON, PLAINS_FOREST],\n  [UNCOMMON, PLAINS],\n]);\n\nconst choice_elev0_hum25 = weightedChoiceBuild([\n  [COMMON, PLAINS],\n  [RARE, PLAINS_BLUE],\n  [RARE, PLAINS_RED],\n  [RARE, HILLS],\n]);\n\nfunction getBiomeV2(classif, tot_slope, elev, humidity, choice, cdist) {\n  if (classif === C_WATER) {\n    return OCEAN;\n  }\n  tot_slope *= 4;\n  let is_cliff = tot_slope > 0.6;\n  if (is_cliff) {\n    return CLIFFS;\n  }\n  if (classif === C_MOUNTAINS) {\n    if (tot_slope > 0.1) {\n      return MOUNTAINS;\n    } else {\n      return TUNDRA;\n    }\n  }\n  if (classif === C_HILLS) {\n    if (humidity > 0.66) {\n      return HILLS_FOREST;\n    } else {\n      return HILLS;\n    }\n  } else if (classif === C_PLAINS) {\n    if (humidity > 0.75) {\n      return weightedChoiceGet(choice_elev0_hum75, choice);\n    } else if (humidity > 0.5) {\n      return weightedChoiceGet(choice_elev0_hum50, choice);\n    } else if (humidity > 0.25) {\n      return weightedChoiceGet(choice_elev0_hum25, choice);\n    } else {\n      return DESERT;\n    }\n  } else {\n    return assert(0);\n  }\n}\n\nexport function calculateBiomesTest(hex_tex_size, cdata, tex_data_color) {\n  let {\n    elev, humidity, classif, ocean_distance, sea_level, max_elevation,\n  } = cdata;\n  // This is not in output, just simulating what the game will do with this data when it gets it\n  let width = hex_tex_size;\n  let height = width;\n  let stride = width;\n  let neighbors_even = [\n    stride, // above\n    1, // upper right\n    1 - stride, // lower right\n    -stride, // below\n    -1 - stride, // lower left\n    -1, // upper left\n  ];\n  let neighbors_odd = [\n    stride, // above\n    1 + stride, // upper right,\n    1, // lower right\n    -stride, // below\n    -1, // lower left\n    -1 + stride, // upper left,\n  ];\n  let neighbors_bit = [neighbors_even, neighbors_odd];\n\n  let rand = randCreate(0x12345);\n\n  let land_range = max_elevation - sea_level;\n  for (let y = 0; y < height; ++y) {\n    for (let x = 0; x < width; ++x) {\n      let pos = y * width + x;\n      //let is_land = land[pos];\n      let celev = (elev[pos] - sea_level) / land_range;\n      // let has_river = is_land && river[pos];\n      let humid = humidity[pos] / 255;\n      // let slope = tslope[pos]; // Use actual calculated abs(max?) of slope from elev?\n      let cdist = ocean_distance[pos] / (hex_tex_size * 2);\n      let cat = classif[pos];\n      let choice = rand.random();\n\n      // calc actual slope\n      let tot_slope = 0;\n      //let max_slope = 0;\n      let neighbors = neighbors_bit[x & 1];\n      for (let ii = 0; ii < 6; ++ii) {\n        let npos = pos + neighbors[ii];\n        let nelev = (elev[npos] - sea_level) / land_range;\n        let slope = abs(celev - nelev);\n        tot_slope += slope;\n        //max_slope = max(max_slope, slope);\n      }\n\n      let color = getBiomeV2(cat, tot_slope, celev, humid, choice, cdist);\n\n      //let color = getBiomeV1(is_land, celev, humid, choice);\n      for (let jj = 0; jj < 4; ++jj) {\n        tex_data_color[pos * 4 + jj] = color[jj];\n      }\n    }\n  }\n}\n","//////////////////////////////////////////////////////////////////////////////////\n// Code provided for example purposes only with no license for use or distribution\n/*eslint no-labels:off */\nconst assert = require('assert');\nconst { abs, atan2, ceil, cos, max, min, floor, round, pow, sin, sqrt, PI } = Math;\nconst { C_WATER, C_PLAINS, C_HILLS, C_MOUNTAINS, SKEW_X } = require('./proc_gen_constants.js');\nconst { randCreate } = require('./glov/rand_alea.js');\nconst SimplexNoise = require('simplex-noise');\nconst { clamp, lerp, ridx } = require('../common/util.js');\nconst {\n  vec2, v2copy, v2lengthSq,\n} = require('./glov/vmath.js');\n\nconst default_tex_size = 256;\n\nconst TWOPI = PI * 2;\n\n// For `fill` buffer\nexport const D_OPEN = 0;\nexport const D_BORDER = 1;\nexport const D_SEA = 2;\nexport const D_SEA2 = 3;\nexport const D_INLAND_SEA = 4;\nexport const D_COASTLINE = 5;\nexport const D_LAKE = 6;\n\nexport const default_opts = {\n  hex_tex_size: default_tex_size,\n  seed: 1,\n  coast: {\n    key: '',\n    frequency: 2,\n    amplitude: 1,\n    persistence: 0.5,\n    lacunarity: { min: 1.6, max: 2.8, freq: 0.3 },\n    octaves: 6,\n    cutoff: 0.5,\n    domain_warp: 0,\n    warp_freq: 1,\n    warp_amp: 0.1,\n    fill_seas: true,\n    channels: true,\n  },\n  tslope: {\n    key: 'ts',\n    frequency: 3.5,\n    amplitude: 1,\n    min: 0,\n    range: 8,\n    persistence: 0.5,\n    lacunarity: 1.33,\n    octaves: 1,\n    domain_warp: 1,\n    warp_freq: 1,\n    warp_amp: 0.1,\n  },\n  rslope: {\n    key: 'rs',\n    frequency: 1.2,\n    amplitude: 1,\n    persistence: 0.5,\n    lacunarity: 1.33,\n    octaves: 1,\n    domain_warp: 1,\n    warp_freq: 1,\n    warp_amp: 0.1,\n    steps: 4,\n  },\n  river: {\n    weight_bend: 2,\n    weight_afork: 2,\n    weight_sfork: 1,\n    max_tslope: 48,\n    tuning_h: 32,\n    show_elev: true, // debug display option, not used by generator\n    prune: true,\n    mtify_prune_grace: 100,\n    mtify_prune: true,\n  },\n  ocean: {\n    frequency: 3,\n    amplitude: 1,\n    persistence: 0.5,\n    lacunarity: 2.4,\n    octaves: 3,\n    domain_warp: 1,\n    warp_freq: 1,\n    warp_amp: 1,\n  },\n  lakes: {\n    lake_search_radius: round(10 * default_tex_size/256),\n    lake_percent: 0.10,\n    lake_k: 5,\n    min_sep: round(40 * default_tex_size/256),\n  },\n  blur: {\n    threshold: 500,\n    weight: 1,\n  },\n  mountainify: {\n    peak_radius: round(10 * default_tex_size/256),\n    peak_percent: 0.80,\n    peak_k: 5,\n    height_scale: 3,\n    blend_radius: round(10 * default_tex_size/256),\n    weight_local: 0.25,\n    power_min: 1,\n    power_max: 4,\n    power_blend: 0.25,\n    cdist_ramp: 2,\n  },\n  humidity: {\n    frequency: 2.2,\n    amplitude: 1,\n    persistence: 0.5,\n    lacunarity: 4,\n    octaves: 3,\n    domain_warp: 0,\n    warp_freq: 1,\n    warp_amp: 1,\n    rainshadow: 0.75,\n    show_relief: false, // debug display option, makes extreme rainshadow\n  },\n  classif: {\n    cut1: 0.033,\n    cut2: 0.666,\n    blur_scale: 680,\n    blur_w: 10,\n    show_rivers: true, // debug display option, not used by generator\n    show_relief: true, // debug display option, not used by generator\n  },\n  output: {\n    sea_range_exp: 13,\n    land_range_exp: 14,\n    sea_range: 1 << 13,\n    land_range: 1 << 14,\n    debug: false,\n  },\n  early_out: null, // 'river'\n};\n\nlet land;\nlet fill;\nlet util;\nlet mountain_delta;\nlet tslope;\nlet rslope;\nlet river;\nlet relev;\nlet rstrahler;\nlet water_level;\nlet coast_distance;\nlet ocean_distance;\nlet humidity;\nlet classif;\nlet blur_temp1;\nlet blur_temp2;\nlet debug_priority;\n\nlet total_size;\nlet width;\nlet height;\nexport let neighbors_bit;\nlet state;\n\nfunction setupWorkBuffers(hex_tex_size) {\n  total_size = hex_tex_size * hex_tex_size;\n  width = height = hex_tex_size;\n\n  land = new Uint8Array(total_size);\n  fill = new Uint8Array(total_size);\n  util = new Uint8Array(total_size);\n  mountain_delta = new Uint32Array(total_size);\n  tslope = new Uint8Array(total_size);\n  rslope = new Uint8Array(total_size);\n  river = new Uint8Array(total_size);\n  relev = new Uint16Array(total_size);\n  rstrahler = new Uint8Array(total_size);\n  water_level = new Uint16Array(total_size);\n  coast_distance = new Uint8Array(total_size);\n  ocean_distance = new Uint8Array(total_size);\n  humidity = new Uint8Array(total_size);\n  classif = new Uint8Array(total_size);\n  blur_temp1 = new Uint32Array(total_size);\n  blur_temp2 = new Uint32Array(total_size);\n\n  let neighbors_even = [\n    width, // above\n    1, // upper right\n    1 - width, // lower right\n    -width, // below\n    -1 - width, // lower left\n    -1, // upper left\n  ];\n  let neighbors_odd = [\n    width, // above\n    1 + width, // upper right,\n    1, // lower right\n    -width, // below\n    -1, // lower left\n    -1 + width, // upper left,\n  ];\n  neighbors_bit = [neighbors_even, neighbors_odd];\n}\n\nlet last_tex_size = -1;\nlet unif_pos = vec2();\nlet world_pos = vec2();\nlet opts;\nlet subopts;\n\nlet rand;\nfunction shuffleArray(arr) {\n  for (let ii = arr.length - 1; ii >= 1; --ii) {\n    let swap = rand.range(ii + 1);\n    let t = arr[ii];\n    arr[ii] = arr[swap];\n    arr[swap] = t;\n  }\n}\n\nlet noise;\nlet noise_warp;\nlet total_amplitude;\nlet noise_field;\nfunction initNoise(subopts_in) {\n  subopts = subopts_in;\n  noise = new Array(subopts.octaves);\n  for (let ii = 0; ii < noise.length; ++ii) {\n    noise[ii] = new SimplexNoise(`${opts.seed}n${subopts.key}${ii}`);\n  }\n  noise_warp = new Array(subopts.domain_warp);\n  for (let ii = 0; ii < noise_warp.length; ++ii) {\n    noise_warp[ii] = new SimplexNoise(`${opts.seed}w${subopts.key}${ii}`);\n  }\n  total_amplitude = 0;  // Used for normalizing result to 0.0 - 1.0\n  let amp = subopts.amplitude;\n  let p = subopts.persistence && subopts.persistence.max || subopts.persistence;\n  for (let ii=0; ii<subopts.octaves; ii++) {\n    total_amplitude += amp;\n    amp *= p;\n  }\n  noise_field = {};\n  for (let f in subopts) {\n    let v = subopts[f];\n    if (typeof v === 'object') {\n      noise_field[f] = new SimplexNoise(`${opts.seed}f${subopts.key}${f}`);\n      v.mul = (v.max - v.min) * 0.5;\n      v.add = v.min + v.mul;\n    }\n  }\n}\n\nlet sample_pos = vec2();\nfunction get(field) {\n  let v = subopts[field];\n  if (typeof v !== 'object') {\n    return v;\n  }\n  return v.add + v.mul * noise_field[field].noise2D(sample_pos[0] * v.freq, sample_pos[1] * v.freq);\n}\nfunction sample() {\n  v2copy(sample_pos, unif_pos);\n  let warp_freq = subopts.warp_freq;\n  let warp_amp = subopts.warp_amp;\n  for (let ii = 0; ii < subopts.domain_warp; ++ii) {\n    let dx = noise_warp[ii].noise2D(sample_pos[0] * warp_freq, sample_pos[1] * warp_freq);\n    let dy = noise_warp[ii].noise2D((sample_pos[0] + 7) * warp_freq, sample_pos[1] * warp_freq);\n    sample_pos[0] += dx * warp_amp;\n    sample_pos[1] += dy * warp_amp;\n  }\n  let total = 0;\n  let amp = subopts.amplitude;\n  let freq = get('frequency');\n  let p = get('persistence');\n  let lac = get('lacunarity');\n  for (let i=0; i<subopts.octaves; i++) {\n    total += (0.5 + 0.5 * noise[i].noise2D(sample_pos[0] * freq, sample_pos[1] * freq)) * amp;\n    amp *= p;\n    freq *= lac;\n  }\n  return total/total_amplitude;\n}\n\nconst HEX_HEIGHT = 1.0; // distance between any two hexes = 1.0\nconst HEX_EDGE = HEX_HEIGHT / sqrt(3);\nconst HEX_WIDTH = 1.5 * HEX_EDGE;\nfunction hexPosToUnifPos(ii, jj) {\n  world_pos[0] = ii * HEX_WIDTH;\n  world_pos[1] = jj * HEX_HEIGHT - HEX_HEIGHT * 0.5;\n  if (ii & 1) {\n    world_pos[1] += HEX_HEIGHT * 0.5;\n  }\n  unif_pos[0] = world_pos[0] / ((width - 1) * HEX_WIDTH) * 2.0 - 1.0;\n  unif_pos[1] = world_pos[1] / ((height - 1.5) * HEX_HEIGHT) * 2.0 - 1.0;\n}\n\nlet count_by_h;\nfunction generateCoastlines() {\n  initNoise(opts.coast);\n\n  if (!count_by_h) {\n    count_by_h = new Array(256);\n  }\n  for (let ii = 0; ii < 256; ++ii) {\n    count_by_h[ii] = 0;\n  }\n  for (let idx=0, jj = 0; jj < height; ++jj) {\n    for (let ii = 0; ii < width; ++ii, ++idx) {\n      hexPosToUnifPos(ii, jj);\n\n      let h = sample();\n      //let cutoff_scale = cutoff / 255; // scale cutoff to extend nearer to edge of maps\n      //h *= cutoff_scale + (1 - cutoff_scale) * (1 - v2lengthSq(unif_pos));\n      h *= 1 - v2lengthSq(unif_pos);\n\n      h = clamp(floor(h * 255), 0.0, 255);\n      count_by_h[h]++;\n      land[idx] = h;\n    }\n  }\n  // Determine cutoff as a percentile\n  //   Probably not generally necessary, but allows for playing with domain-warped\n  //   persistence sliders without changing the overall density, etc.\n  let cutoff_percent = get('cutoff');\n  cutoff_percent = 1 - (1 - cutoff_percent) * (1 - cutoff_percent);\n  let cutoff_count = total_size * cutoff_percent;\n  let cutoff = 0;\n  for (cutoff = 0; cutoff_count > 0 && cutoff < 256; ++cutoff) {\n    cutoff_count -= count_by_h[cutoff];\n  }\n  for (let ii = 0; ii < total_size; ++ii) {\n    let h = land[ii];\n    land[ii] = h > cutoff ? 255 : 0;\n    fill[ii] = D_OPEN;\n  }\n}\n\nfunction fillSeas() {\n  let unfilled_seas = state.unfilled_seas = [];\n  let todo = [];\n  let done = [];\n  function fillBorders() {\n    for (let ii = 0; ii < width; ++ii) {\n      fill[ii] = D_BORDER;\n      fill[(height - 1) * width + ii] = D_BORDER;\n    }\n    for (let ii = 0; ii < height; ++ii) {\n      fill[width * ii] = D_BORDER;\n      fill[width * ii + width - 1] = D_BORDER;\n    }\n  }\n  fillBorders();\n  function tryMark(pos, v) {\n    if (land[pos] || fill[pos]) {\n      return;\n    }\n    fill[pos] = v;\n    todo.push(pos);\n    done.push(pos);\n  }\n  function spreadSeas(v) {\n    while (todo.length) {\n      let pos = todo.pop();\n      let neighbors = neighbors_bit[pos & 1];\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        tryMark(pos + neighbors[ii], v);\n      }\n    }\n  }\n  tryMark(width + 1, D_SEA);\n  spreadSeas(D_SEA);\n  // Find all inland seas, mark them, then grow them N steps to either find a channel or fill them\n  let inland_seas = [];\n  for (let pos = 0; pos < width * height; ++pos) {\n    if (!land[pos] && !fill[pos]) {\n      // open, and not an ocean or previously marked\n      done = [];\n      tryMark(pos, D_INLAND_SEA);\n      spreadSeas(D_INLAND_SEA);\n      inland_seas.push(done);\n    }\n  }\n  shuffleArray(inland_seas);\n  inland_seas.forEach(function (sea) {\n    // Channel to ocean if possible\n    let is_ocean = false;\n    if (subopts.channels) {\n      let checked = [];\n      for (let ii = 0; ii < sea.length; ++ii) {\n        checked[sea[ii]] = 1;\n      }\n      let adjacent = [];\n      for (let ii = 0; ii < sea.length; ++ii) {\n        let pos = sea[ii];\n        let neighbors = neighbors_bit[pos & 1];\n        for (let nidx = 0; nidx < neighbors.length; ++nidx) {\n          let npos = pos + neighbors[nidx];\n          if (!checked[npos]) {\n            adjacent.push(npos);\n            // if (!data[npos * BPP]) {\n            //   // a neighboring sea already channeled this, it must connect to the ocean!\n            // }\n            checked[npos] = 1;\n          }\n        }\n      }\n      shuffleArray(adjacent);\n      outer:\n      for (let ii = 0; ii < adjacent.length; ++ii) {\n        let pos = adjacent[ii];\n        let neighbors = neighbors_bit[pos & 1];\n        for (let nidx = 0; nidx < neighbors.length; ++nidx) {\n          let npos = pos + neighbors[nidx];\n          if (!checked[npos] && !land[npos] && fill[npos] === D_SEA) {\n            // open route to the ocean!\n            land[pos] = 0;\n            sea.push(pos);\n            land[npos] = 0;\n            sea.push(npos);\n            for (let jj = 0; jj < sea.length; ++jj) {\n              fill[sea[jj]] = D_SEA;\n            }\n            is_ocean = true;\n            break outer;\n          }\n        }\n      }\n    }\n    if (!is_ocean) {\n      if (subopts.fill_seas) {\n        for (let ii = 0; ii < sea.length; ++ii) {\n          land[sea[ii]] = 255;\n          fill[sea[ii]] = D_OPEN;\n        }\n      } else {\n        unfilled_seas.push(sea);\n      }\n    }\n  });\n}\n\n// Generates poisson sampled points with between radius and 2 * radius between each\nfunction poissonSample(radius, k) {\n  let ret = [];\n  let peak_rsquared = radius * radius;\n  let cell_bound = radius / sqrt(2);\n  let cell_w = ceil(width / cell_bound);\n  let cell_h = ceil(height / cell_bound);\n  let cells = new Int16Array(cell_w * cell_h);\n  let active = [];\n  function emitSample(pos) {\n    let posx = pos % width;\n    let posy = (pos - posx) / width;\n    let cellidx = ((posx / cell_bound)|0) + ((posy / cell_bound)|0) * cell_w;\n    ret.push(pos);\n    cells[cellidx] = ret.length;\n    active.push(pos);\n  }\n  emitSample(rand.range(total_size));\n\n  // From https://www.jasondavies.com/poisson-disc/\n  // Generate point chosen uniformly from spherical annulus between radius r and 2r from p.\n  let nx;\n  let ny;\n  function generateAround(px, py) {\n    let θ = rand.random() * 2 * PI;\n    let r = sqrt(rand.random() * 3 * peak_rsquared + peak_rsquared); // http://stackoverflow.com/a/9048443/64009\n    nx = (px + r * cos(θ)) | 0;\n    ny = (py + r * sin(θ)) | 0;\n  }\n\n  function near() {\n    let n = 2;\n    let x = nx / cell_bound | 0;\n    let y = ny / cell_bound | 0;\n    let x0 = max(x - n, 0);\n    let y0 = max(y - n, 0);\n    let x1 = min(x + n + 1, cell_w);\n    let y1 = min(y + n + 1, cell_h);\n    for (let yy = y0; yy < y1; ++yy) {\n      let o = yy * cell_w;\n      for (let xx = x0; xx < x1; ++xx) {\n        let g = cells[o + xx];\n        if (!g) {\n          continue;\n        }\n        g = ret[g - 1];\n        let gx = g % width;\n        let gy = (g - gx) / width;\n        let dsq = (nx - gx) * (nx - gx) + (ny - gy) * (ny - gy);\n        if (dsq < peak_rsquared) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  while (active.length) {\n    let active_idx = rand.range(active.length);\n    let pos = active[active_idx];\n    ridx(active, active_idx);\n    let posx = pos % width;\n    let posy = (pos - posx) / width;\n    for (let jj = 0; jj < k; ++jj) {\n      generateAround(posx, posy);\n      if (nx < 0 || nx >= width || ny < 0 || ny >= height || near()) {\n        continue;\n      }\n      emitSample(nx + ny * width);\n    }\n  }\n  return ret;\n}\n\nfunction findMaxPerRegion(candidates, map, radius) {\n  let ret = [];\n  for (let ii = 0; ii < candidates.length; ++ii) {\n    let pos = candidates[ii];\n    let posx = pos % width;\n    let posy = (pos - posx) / width;\n    let x0 = max(0, posx - radius);\n    let x1 = min(width - 1, posx + radius);\n    let y0 = max(0, posy - radius);\n    let y1 = min(height - 1, posy + radius);\n    let max_elev = map[pos];\n    let max_pos = pos;\n    for (let yy = y0; yy <= y1; ++yy) {\n      for (let xx = x0; xx <= x1; ++xx) {\n        let p = xx + yy * width;\n        let e = map[p];\n        if (e > max_elev) {\n          max_elev = e;\n          max_pos = p;\n        }\n      }\n    }\n    ret.push([max_elev, max_pos]);\n  }\n  ret.sort((a,b) => b[0] - a[0]);\n  return ret;\n}\n\nfunction generateLakes() {\n  subopts = opts.lakes;\n  let lakes = state.lakes = [];\n  let lake_seeds = state.lake_seeds = [];\n  function generateInlandDF() {\n    util.fill(0);\n    let todo = [];\n    let d = 0;\n    for (let pos = 0; pos < total_size; ++pos) {\n      if (!land[pos]) {\n        util[pos] = 1;\n        coast_distance[pos] = 0;\n        continue;\n      }\n      let neighbors = neighbors_bit[pos & 1];\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        let nidx = pos + neighbors[ii];\n        if (!land[nidx]) {\n          todo.push(pos);\n          coast_distance[pos] = d;\n          util[pos] = 1;\n          break;\n        }\n      }\n    }\n    while (todo.length) {\n      d = min(d + 1, 255);\n      let next = [];\n      for (let ii = 0; ii < todo.length; ++ii) {\n        let pos = todo[ii];\n        let neighbors = neighbors_bit[pos & 1];\n        for (let jj = 0; jj < neighbors.length; ++jj) {\n          let npos = pos + neighbors[jj];\n          if (!util[npos]) {\n            util[npos] = 1;\n            coast_distance[npos] = d;\n            if (fill[npos] !== D_BORDER) {\n              next.push(npos);\n            }\n          }\n        }\n      }\n      todo = next;\n    }\n  }\n  generateInlandDF();\n\n  let { lake_search_radius, lake_k, lake_percent, min_sep } = subopts;\n  let check_points = poissonSample(lake_search_radius, lake_k);\n  let lake_elev = findMaxPerRegion(check_points, coast_distance, floor(lake_search_radius / 2));\n  lake_elev = lake_elev.filter((a) => a[0] > 2);\n  let want = floor(lake_elev.length * lake_percent);\n  let use = [];\n  let min_sep_sq = min_sep * min_sep;\n  for (let ii = 0; ii < lake_elev.length && use.length < want; ++ii) {\n    let pt = lake_elev[ii][1];\n    let px = pt % width;\n    let py = (pt - px) / width;\n    let too_close = false;\n    for (let jj = 0; jj < use.length; ++jj) {\n      let other = use[jj];\n      let dx = px - other[0];\n      let dy = py - other[1];\n      let dsq = dx*dx + dy*dy;\n      if (dsq < min_sep_sq) {\n        too_close = true;\n        break;\n      }\n    }\n    if (too_close) {\n      continue;\n    }\n    use.push([px, py]);\n  }\n\n  function placeLake(x, y) {\n    let pos = x + y * width;\n    fill[pos] = D_INLAND_SEA;\n    land[pos] = 0;\n    lake_seeds.push(pos);\n    lakes.push(pos);\n  }\n  for (let ii = 0; ii < use.length; ++ii) {\n    placeLake(use[ii][0], use[ii][1]);\n  }\n}\n\nfunction generateTerrainSlope() {\n  initNoise(opts.tslope);\n  for (let jj = 0; jj < height; ++jj) {\n    for (let ii = 0; ii < width; ++ii) {\n      hexPosToUnifPos(ii, jj);\n\n      let h = sample();\n      let min_v = get('min');\n      let range = get('range');\n      h = clamp(min_v + floor(h * range), 0.0, 255);\n      tslope[jj * width + ii] = h;\n    }\n  }\n}\n\nfunction generateRiverSlope() {\n  initNoise(opts.rslope);\n  for (let jj = 0; jj < height; ++jj) {\n    for (let ii = 0; ii < width; ++ii) {\n      hexPosToUnifPos(ii, jj);\n\n      let h = sample();\n      h = clamp(floor(h * opts.rslope.steps), 0, opts.rslope.steps - 1);\n      rslope[jj * width + ii] = h + 1;\n    }\n  }\n}\n\nfunction growRivers() {\n  subopts = opts.river;\n  river.fill(0);\n  relev.fill(0);\n  let coastlines = [];\n  let coastlines_incdir = [];\n  function findCandidates() {\n    // PERF: this could be an output from the above steps - oceans and inland seas combined,\n    //   would just need better random choice for initial incoming direction\n    let { unfilled_seas, lake_seeds } = state;\n    let todo = [];\n    function tryMark(pos, v, incoming_dir) {\n      let d = fill[pos];\n      if (d !== D_SEA && d !== D_INLAND_SEA) {\n        if (d === D_OPEN) { // land\n          fill[pos] = D_COASTLINE;\n          let invdir = (incoming_dir + 3) % 6;\n          river[pos] = 1 << invdir;\n          relev[pos] = rslope[pos];\n          coastlines.push(pos);\n          coastlines_incdir.push(invdir);\n        }\n        return;\n      }\n      fill[pos] = v;\n      todo.push(pos);\n    }\n    function spreadSeas(v) {\n      while (todo.length) {\n        let idx = rand.range(todo.length);\n        let pos = todo[idx];\n        ridx(todo, idx);\n        let neighbors = neighbors_bit[pos & 1];\n        for (let ii = 0; ii < neighbors.length; ++ii) {\n          tryMark(pos + neighbors[ii], v, ii);\n        }\n      }\n    }\n    function tryMarkXY(x, y, v) {\n      tryMark(y * width + x, v || D_SEA2);\n    }\n    tryMarkXY(1, 1);\n    tryMarkXY(width - 2, 1);\n    tryMarkXY(width - 2, height - 2);\n    tryMarkXY(1, height - 2);\n    for (let ii = 0; ii < unfilled_seas.length; ++ii) {\n      let sea = unfilled_seas[ii];\n      let pos = sea[rand.range(sea.length)];\n      tryMarkXY(pos % width, floor(pos / width));\n    }\n    spreadSeas(D_SEA2);\n    state.ocean_coastlines = coastlines.slice(0); // oceans and unfilled seas, not lakes\n    for (let ii = 0; ii < lake_seeds.length; ++ii) {\n      let pos = lake_seeds[ii];\n      tryMarkXY(pos % width, floor(pos / width), D_LAKE);\n    }\n    spreadSeas(D_LAKE);\n  }\n  findCandidates();\n\n  function findBorderMinDist() {\n    util.fill(0);\n    let todo = coastlines;\n    let d = 0;\n    for (let ii = 0; ii < todo.length; ++ii) {\n      let pos = todo[ii];\n      util[pos] = 1;\n    }\n    while (todo.length) {\n      d = min(d + 1, 255);\n      let next = [];\n      for (let ii = 0; ii < todo.length; ++ii) {\n        let pos = todo[ii];\n        let neighbors = neighbors_bit[pos & 1];\n        for (let jj = 0; jj < neighbors.length; ++jj) {\n          let npos = pos + neighbors[jj];\n          if (!util[npos] && !land[npos]) {\n            util[npos] = 1;\n            if (fill[npos] === D_BORDER) {\n              state.border_min_dist = d;\n              return;\n            } else {\n              next.push(npos);\n            }\n          }\n        }\n      }\n      todo = next;\n    }\n    assert(false);\n    state.border_min_dist = 0;\n  }\n  findBorderMinDist();\n\n  if (opts.early_out === 'river') {\n    return;\n  }\n\n  let orig_coastlines = coastlines;\n  function filterCoastalRivers() {\n    let rank = [[],[],[]];\n    coastlines.forEach(function (pos) {\n      let neighbors = neighbors_bit[pos & 1];\n      let open_count = 0;\n      let open_bits = 0;\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        let npos = pos + neighbors[ii];\n        if (!land[npos]) {\n          open_bits |= 1 << ii;\n          ++open_count;\n        }\n      }\n      if (open_count >= 4) {\n        return;\n      }\n      assert(open_count);\n      if (open_count === 1) {\n        // perfect\n        rank[0].push(pos);\n        return;\n      }\n      // are all open tiles adjacent?\n      open_bits |= open_bits << 6;\n      let bpos = 0;\n      // Find something solid\n      while (open_bits & (1 << bpos)) {\n        bpos++;\n      }\n      // Find first open\n      while (!(open_bits & (1 << bpos))) {\n        bpos++;\n      }\n      let count = 0;\n      // count num contiguous open\n      while (open_bits & (1 << bpos)) {\n        bpos++;\n        ++count;\n      }\n      if (count !== open_count) {\n        return;\n      }\n      let r = !rand.range(open_count === 2 ? 4 : 2);\n      if (r) {\n        rank[open_count - 1].push(pos);\n      }\n    });\n    let blocked = [];\n    coastlines = [];\n    for (let ii = 0; ii < rank.length; ++ii) {\n      let list = rank[ii];\n      for (let jj = 0; jj < list.length; ++jj) {\n        let pos = list[jj];\n        if (blocked[pos]) {\n          continue;\n        }\n        coastlines.push(pos);\n        let neighbors = neighbors_bit[pos & 1];\n        for (let kk = 0; kk < neighbors.length; ++kk) {\n          let npos = pos + neighbors[kk];\n          blocked[npos] = true;\n        }\n      }\n    }\n  }\n  filterCoastalRivers();\n  function grow() {\n    const MAX_PRIORITY = 10;\n    let weight_total = subopts.weight_bend + subopts.weight_sfork + subopts.weight_afork;\n    let active_by_prior = [];\n    let min_elev_by_prior = [];\n    let tuning_h = opts.river.tuning_h;\n    for (let ii = 0; ii <= MAX_PRIORITY; ++ii) {\n      active_by_prior[ii] = [[]];\n      min_elev_by_prior[ii] = 0;\n    }\n    for (let ii = 0; ii < coastlines.length; ++ii) {\n      let pos = coastlines[ii];\n      let p = rand.random();\n      p = 1 + floor(p*p*p * MAX_PRIORITY);\n      debug_priority[pos] = p;\n      let active_by_elev = active_by_prior[p];\n      active_by_elev[0].push(pos);\n    }\n    let chosen_priority;\n    function chooseNode() {\n      // find min elevation\n      let min_elev = Infinity;\n      for (let p = MAX_PRIORITY; p >= 0; --p) {\n        min_elev = min(min_elev, min_elev_by_prior[p]);\n      }\n      for (let p = MAX_PRIORITY; p >= 0; --p) {\n        let active_by_elev = active_by_prior[p];\n        for (let ii = 0; ii < tuning_h; ++ii) {\n          let elev = min_elev + ii;\n          let active = active_by_elev[elev];\n          if (active) {\n            let idx = rand.range(active.length);\n            let ret = active[idx];\n            ridx(active, idx);\n            if (!active.length) {\n              // Nothing more at this (min) elevation at this priority\n              delete active_by_elev[elev];\n              let mep = min_elev_by_prior[p];\n              assert.equal(mep, elev);\n              while (!active_by_elev[mep] && mep < active_by_elev.length) {\n                ++mep;\n              }\n              if (mep === active_by_elev.length) {\n                mep = Infinity;\n              }\n              min_elev_by_prior[p] = mep;\n            }\n            chosen_priority = p;\n            return ret;\n          }\n        }\n      }\n      return -1;\n    }\n    function validGrowth(frompos, topos) {\n      // Not too high relative to neighbors?\n      let new_elev = relev[frompos] + rslope[topos];\n      let neighbors = neighbors_bit[topos & 1];\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        let npos = topos + neighbors[ii];\n        if (river[npos]) {\n          let d = new_elev - relev[npos];\n          if (abs(d) > opts.river.max_tslope) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    while (true) {\n      let pos = chooseNode();\n      if (pos === -1) {\n        break;\n      }\n      // Check all 6 neighbors, find any that are expandable\n      let neighbors = neighbors_bit[pos & 1];\n      let options = [];\n      let cur_bits = river[pos];\n      let bad_bits = cur_bits | cur_bits << 1 | cur_bits >> 1 | cur_bits >> 5 | cur_bits << 5;\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        if ((1 << ii) & bad_bits) {\n          continue;\n        }\n        let npos = pos + neighbors[ii];\n        if (!land[npos] || river[npos]) {\n          continue;\n        }\n        // Technically valid\n        if (validGrowth(pos, npos)) {\n          options.push([npos, ii]);\n        }\n      }\n      if (!options.length) {\n        // river is done, cannot expand\n        continue;\n      }\n      let asym = false;\n      if (options.length > 1) {\n        let nopt = 1;\n        let split = rand.range(weight_total);\n        if (split >= subopts.weight_bend) {\n          nopt = 2;\n          if (split - subopts.weight_bend >= subopts.weight_sfork) {\n            asym = true;\n          }\n        }\n        for (let ii = 0; ii < nopt; ++ii) {\n          let t = options[ii];\n          let cidx = ii + rand.range(options.length - ii);\n          options[ii] = options[cidx];\n          options[cidx] = t;\n        }\n        options.length = nopt;\n      }\n      for (let ii = 0; ii < options.length; ++ii) {\n        let npos = options[ii][0];\n        let ndir = options[ii][1];\n        let nelev = relev[pos] + rslope[npos];\n        let p = asym ?\n          ii === 1 ? chosen_priority - 1 : chosen_priority :\n          options.length > 1 ? chosen_priority - 1 : chosen_priority;\n        p = max(0, p);\n        debug_priority[npos] = p;\n        relev[npos] = nelev;\n        river[npos] = 1 << ((ndir + 3) % 6);\n        river[pos] |= 1 << ndir;\n        min_elev_by_prior[p] = min(min_elev_by_prior[p], nelev);\n        let active_by_elev = active_by_prior[p];\n        let active = active_by_elev[nelev];\n        if (!active) {\n          active = active_by_elev[nelev] = [];\n        }\n        active.push(npos);\n      }\n    }\n  }\n  grow();\n  function computeStrahler() {\n    function fillStrahler(pos, from_dir) {\n      let bits = river[pos];\n      let out = [];\n      for (let ii = 0; ii < 6; ++ii) {\n        if (ii !== from_dir && (bits & (1 << ii))) {\n          out.push(ii);\n        }\n      }\n      let s;\n      if (!out.length) {\n        s = 1;\n      } else {\n        let neighbors = neighbors_bit[pos & 1];\n        if (out.length === 1) {\n          s = fillStrahler(pos + neighbors[out[0]], (out[0] + 3) % 6);\n        } else {\n          assert.equal(out.length, 2);\n          let s1 = fillStrahler(pos + neighbors[out[0]], (out[0] + 3) % 6);\n          let s2 = fillStrahler(pos + neighbors[out[1]], (out[1] + 3) % 6);\n          if (s1 === s2) {\n            s = s1 + 1;\n          } else {\n            s = max(s1, s2);\n          }\n        }\n      }\n      rstrahler[pos] = s;\n      return s;\n    }\n    for (let ii = 0; ii < orig_coastlines.length; ++ii) {\n      fillStrahler(orig_coastlines[ii], coastlines_incdir[ii]);\n    }\n  }\n  computeStrahler();\n  function pruneRivers() {\n    for (let pos = 0; pos < total_size; ++pos) {\n      if (rstrahler[pos] === 1) {\n        let bits = river[pos];\n        river[pos] = 0;\n        rstrahler[pos] = 0;\n        relev[pos] = 0;\n        let neighbors = neighbors_bit[pos & 1];\n        for (let ii = 0; ii < 6; ++ii) {\n          if (bits & (1 << ii)) {\n            let npos = pos + neighbors[ii];\n            river[npos] &= ~(1 << ((ii + 3) % 6));\n          }\n        }\n      }\n    }\n  }\n  if (subopts.prune) {\n    pruneRivers();\n    computeStrahler();\n  }\n  function buildUpHeight() {\n    util.fill(0);\n    // Accumulate river nodes\n    // Maybe also start with coastlines?\n    let work_nodes = [];\n    for (let pos = 0; pos < total_size; ++pos) {\n      if (river[pos]) {\n        work_nodes.push(pos);\n      }\n    }\n    // Contribute from work nodes to all land neighbors\n    while (work_nodes.length) {\n      let next_nodes = [];\n      for (let ii = 0; ii < work_nodes.length; ++ii) {\n        let pos = work_nodes[ii];\n        let neighbors = neighbors_bit[pos & 1];\n        let nheight = relev[pos] + tslope[pos];\n        for (let jj = 0; jj < neighbors.length; ++jj) {\n          let npos = pos + neighbors[jj];\n          if (!river[npos] && land[npos] && util[npos] !== 255) {\n            if (!util[npos]) {\n              relev[npos] = 0;\n              next_nodes.push(npos);\n            }\n            relev[npos]+=nheight;\n            util[npos]++;\n          }\n        }\n      }\n      // average\n      for (let ii = 0; ii < next_nodes.length; ++ii) {\n        let pos = next_nodes[ii];\n        relev[pos] /= util[pos];\n        util[pos] = 255;\n      }\n      work_nodes = next_nodes;\n    }\n  }\n  buildUpHeight();\n}\n\nfunction generateOceanDistanceField() {\n  util.fill(0);\n  let todo = state.ocean_coastlines;\n  let d = 0;\n  for (let ii = 0; ii < todo.length; ++ii) {\n    let pos = todo[ii];\n    ocean_distance[pos] = d;\n    util[pos] = 1;\n  }\n  while (todo.length) {\n    d = min(d + 1, 255);\n    let next = [];\n    for (let ii = 0; ii < todo.length; ++ii) {\n      let pos = todo[ii];\n      let neighbors = neighbors_bit[pos & 1];\n      for (let jj = 0; jj < neighbors.length; ++jj) {\n        let npos = pos + neighbors[jj];\n        if (!util[npos]) {\n          util[npos] = 1;\n          ocean_distance[npos] = d;\n          if (fill[npos] !== D_BORDER) {\n            next.push(npos);\n          }\n        }\n      }\n    }\n    todo = next;\n  }\n  ocean_distance[0] = min(ocean_distance[1] + 1, 255);\n  ocean_distance[total_size - 1] = min(ocean_distance[total_size - 2] + 1, 255);\n}\n\nfunction generateOcean() {\n  let { border_min_dist } = state;\n  initNoise(opts.ocean);\n  for (let jj = 0; jj < height; ++jj) {\n    for (let ii = 0; ii < width; ++ii) {\n      let pos = jj * width + ii;\n      if (fill[pos] === D_SEA2 || fill[pos] === D_BORDER) {\n        hexPosToUnifPos(ii, jj);\n\n        let noise_v = sample();\n        let distance = clamp(ocean_distance[pos] / border_min_dist, 0, 1);\n        let noise_weight = (0.5 - abs(distance - 0.5));\n        distance -= noise_v * noise_weight;\n        relev[pos] = clamp(distance * 255, 0, 255);\n      }\n    }\n  }\n}\n\nfunction generateOutputElevation() {\n  // let max_depth = 0; // always 255\n  // let max_height = 0;\n  // Empirical estimate on 256x256 texture, before mountainifying\n  let est_max_output = opts.rslope.steps * 50 + 80;\n  // covert to a height in quarter-voxels for output\n  let voxel_scale = state.voxel_scale = 1 / est_max_output * opts.output.land_range / 2;\n  // for (let pos = 0; pos < total_size; ++pos) {\n  //   let e = relev[pos];\n  //   if (land[pos]) {\n  //     max_height = max(max_height, e);\n  //   } else {\n  //     max_depth = max(max_depth, e);\n  //   }\n  // }\n  let above_sea_level = opts.output.sea_range;\n  for (let pos = 0; pos < total_size; ++pos) {\n    let e = relev[pos];\n    if (land[pos]) {\n      e = above_sea_level + e * voxel_scale; // (e / max_height) * opts.output.land_range;\n    } else {\n      e = above_sea_level - 1 - e / 255 * above_sea_level;\n    }\n    relev[pos] = max(0, round(e));\n  }\n  water_level.fill(0);\n}\n\nfunction fixupCoastalWaters() {\n  // Hack: use average slope to calc depth of hexomes bordering coast, instead of noise\n  let above_sea_level = opts.output.sea_range;\n  for (let pos = 0; pos < total_size; ++pos) {\n    if (fill[pos] === D_SEA2) {\n      let land_count = 0;\n      //let elev_sum = 0;\n      let elev_min = Infinity;\n      let neighbors = neighbors_bit[pos & 1];\n      for (let kk = 0; kk < neighbors.length; ++kk) {\n        let nidx = pos + neighbors[kk];\n        if (land[nidx]) {\n          ++land_count;\n          let delev = relev[nidx] - above_sea_level;\n          //elev_sum += delev;\n          elev_min = min(elev_min, delev);\n        }\n      }\n      if (land_count) {\n        //relev[pos] = max(relev[pos], above_sea_level - max(elev_sum / land_count, 1));\n        relev[pos] = max(relev[pos], above_sea_level - max(elev_min, 1));\n      }\n    }\n  }\n  // Hack: any land that is level with the water, raise up a bit so it blends well\n  let { voxel_scale } = state;\n  for (let pos = 0; pos < total_size; ++pos) {\n    if (relev[pos] === above_sea_level && !river[pos]) {\n      relev[pos] = above_sea_level + min(rslope[pos], tslope[pos]) * voxel_scale * 0.5;\n    }\n  }\n}\n\nfunction blurExtremeSlopes() {\n  subopts = opts.blur;\n  let { threshold, weight } = subopts;\n  let blurs = [];\n  for (let pos = 0; pos < total_size; ++pos) {\n    if (!land[pos] || river[pos]) {\n      continue;\n    }\n    let elev = relev[pos];\n    let neighbors = neighbors_bit[pos & 1];\n    let blur = false;\n    for (let ii = 0; ii < neighbors.length; ++ii) {\n      let nidx = pos + neighbors[ii];\n      let nelev = relev[nidx];\n      if (nelev - elev > threshold) {\n        blur = true;\n      }\n    }\n    if (blur) {\n      let total = elev;\n      for (let ii = 0; ii < neighbors.length; ++ii) {\n        let nidx = pos + neighbors[ii];\n        let nelev = relev[nidx];\n        total += max(opts.output.sea_range, nelev);\n      }\n      blurs.push([pos, lerp(weight, elev, round(total / 7))]);\n    }\n  }\n  for (let ii = 0; ii < blurs.length; ++ii) {\n    let b = blurs[ii];\n    relev[b[0]] = b[1];\n  }\n}\n\nfunction fillLakes() { // Happens much later than generateLakes - after river growing!\n  let { lakes } = state;\n  util.fill(0);\n  function fillLake(source_pos) {\n    let cur_elev = relev[source_pos];\n    util[source_pos] = 1;\n    let neighbors_by_elev = []; // neighbors of distance 1, sorted by elevation\n    let n2 = {}; // neighbors of a distance 2\n    let filled = [];\n    let try_elev = cur_elev;\n    let good_elevations = [];\n    function addPos(pos) {\n      filled.push(pos);\n      let neighbors = neighbors_bit[pos & 1];\n      for (let jj = 0; jj < neighbors.length; ++jj) {\n        let nidx = pos + neighbors[jj];\n        if (!util[nidx]) {\n          let nelev = relev[nidx];\n          if (nelev < try_elev) {\n            return false;\n          }\n          let ne = neighbors_by_elev[nelev];\n          if (!ne) {\n            ne = neighbors_by_elev[nelev] = [];\n          }\n          ne.push(nidx);\n          util[nidx] = 1;\n\n          // Also remove from N2\n          delete n2[nidx];\n          // Also add our neighbors to N2\n          let neighbors2 = neighbors_bit[nidx & 1];\n          for (let kk = 0; kk < neighbors2.length; ++kk) {\n            let nidx2 = nidx + neighbors2[kk];\n            if (!util[nidx2] && !n2[nidx2]) {\n              n2[nidx2] = relev[nidx2];\n            }\n          }\n        }\n      }\n      return true;\n    }\n    if (!addPos(source_pos)) {\n      return;\n    }\n    // try increasing water elevation\n    outer:\n    do {\n      ++try_elev;\n      let ne = neighbors_by_elev[try_elev];\n      let filled_len = filled.length;\n      if (ne) {\n        for (let ii = 0; ii < ne.length; ++ii) { // grows while iterating\n          if (!addPos(ne[ii])) {\n            filled.length = filled_len;\n            break outer;\n          }\n        }\n        // This elevation is lower than all immediate neighbors\n        // This is a good elevation if it is lower than everyone in N2\n        let is_good = true;\n        for (let key in n2) {\n          if (n2[key] <= try_elev) {\n            is_good = false;\n            break;\n          }\n        }\n        if (is_good) {\n          cur_elev = try_elev;\n          good_elevations.push([cur_elev, filled.length]);\n        }\n      }\n    } while (true);\n    if (!good_elevations.length) {\n      return;\n    }\n    // Aribitrary grab the elevation found halfway though the flooding process\n    let pick = floor(good_elevations.length * 0.5);\n    pick = good_elevations[pick];\n    filled.length = pick[1];\n    cur_elev = pick[0] + 1;\n    for (let ii = 0; ii < filled.length; ++ii) {\n      let pos = filled[ii];\n      water_level[pos] = cur_elev;\n      land[pos] = 0;\n    }\n    // lake_fills.push(filled);\n    // Also spread sea level to neighboring hexomes\n    for (let ii in neighbors_by_elev) {\n      let elev = Number(ii);\n      if (elev > cur_elev) {\n        let ne = neighbors_by_elev[elev];\n        for (let jj = 0; jj < ne.length; ++jj) {\n          water_level[ne[jj]] = cur_elev;\n        }\n      }\n    }\n  }\n  for (let ii = 0; ii < lakes.length; ++ii) {\n    fillLake(lakes[ii]);\n  }\n}\n\nfunction pruneFloodedRivers() {\n  for (let ii = 0; ii < total_size; ++ii) {\n    if (!river[ii]) {\n      continue;\n    }\n    let wl = water_level[ii];\n    if (wl && relev[ii] < wl) {\n      river[ii] = 0;\n    }\n  }\n}\n\nfunction generateCoastDistanceField() {\n  util.fill(0);\n  function findCoast() {\n    let default_water_level = opts.output.sea_range;\n    let coast = [];\n    for (let ii = 0; ii < total_size; ++ii) {\n      if (relev[ii] >= (water_level[ii] || default_water_level)) {\n        // it's land\n        let neighbors = neighbors_bit[ii & 1];\n        let is_coast = false;\n        for (let jj = 0; jj < neighbors.length; ++jj) {\n          let nid = ii + neighbors[jj];\n          if (relev[nid] < (water_level[nid] || default_water_level)) {\n            is_coast = true;\n            break;\n          }\n        }\n        if (is_coast) {\n          coast.push(ii);\n        }\n      }\n    }\n    return coast;\n  }\n  let todo = findCoast();\n  let d = 0;\n  for (let ii = 0; ii < todo.length; ++ii) {\n    let pos = todo[ii];\n    coast_distance[pos] = d;\n    util[pos] = 1;\n  }\n  while (todo.length) {\n    d = min(d + 1, 255);\n    let next = [];\n    for (let ii = 0; ii < todo.length; ++ii) {\n      let pos = todo[ii];\n      let neighbors = neighbors_bit[pos & 1];\n      for (let jj = 0; jj < neighbors.length; ++jj) {\n        let npos = pos + neighbors[jj];\n        if (!util[npos]) {\n          util[npos] = 1;\n          coast_distance[npos] = d;\n          if (fill[npos] !== D_BORDER) {\n            next.push(npos);\n          }\n        }\n      }\n    }\n    todo = next;\n  }\n  coast_distance[0] = min(coast_distance[1] + 1, 255);\n  coast_distance[total_size - 1] = min(coast_distance[total_size - 2] + 1, 255);\n}\n\nfunction mountainify() {\n  subopts = opts.mountainify;\n  let { cdist_ramp, peak_radius, peak_percent, peak_k } = subopts;\n  let peak_candidates;\n  // Generate Poisson disk sampling across map\n  peak_candidates = poissonSample(peak_radius, peak_k).filter((a) => land[a]);\n  function choosePeaks() {\n    let peak_elev = findMaxPerRegion(peak_candidates, relev, (peak_radius / 2) | 0);\n    let keep = max(1, ceil(peak_percent * peak_elev.length));\n    peak_elev = peak_elev.slice(0, keep);\n    return peak_elev.map((a) => a[1]);\n  }\n  let points = choosePeaks();\n\n  let {\n    blend_radius,\n    height_scale,\n    weight_local,\n    power_max,\n    power_min,\n    power_blend,\n  } = subopts;\n  function growMountain(pos) {\n    let rsquared = blend_radius*blend_radius;\n    let horiz_radius = ceil(blend_radius * SKEW_X);\n    let weight_abs = 1 - weight_local;\n    let avg_height = 0;\n    let avg_count = 0;\n    let x0 = pos % width;\n    let y0 = (pos - x0) / width;\n    // Find average height under the mountain within the radius\n    // PERFTODO: If constant radius, could pre-build an array of just the\n    //   index-offsets of points that pass the range tests and pre-compute\n    //   their weights.\n\n    // Weighted average of entire area\n    for (let dx = -horiz_radius; dx <= horiz_radius; ++dx) {\n      for (let dy = -blend_radius; dy <= blend_radius; ++dy) {\n        let dsq = dx*dx + dy*dy; // Not quite accurate distance, but fine for this estimate\n        if (dsq >= rsquared) {\n          continue;\n        }\n        let x = x0 + dx;\n        let y = y0 + dy;\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n          continue;\n        }\n        let pos_idx = y * width + x;\n        if (!land[pos_idx]) {\n          continue;\n        }\n        //let w = 1 - dsq / rsquared; // 1 in center, 0 on edge\n        let w = dsq / rsquared; // 0 in center, 1 on edge\n        avg_height += relev[y * width + x] * w;\n        avg_count += w;\n      }\n    }\n    avg_height /= avg_count;\n    // Scale up exponentially in the middle\n    let center_dh = relev[pos] - avg_height;\n    if (center_dh < 10) {\n      // the center is lower than the average - must have been at the edge of a peak selection radius, and\n      // on a slope, so probably not actually a good choice for a exaggerated peak\n      return;\n    }\n\n    // Decide which angle to apply the power curve\n    // Try just perpindicular to the 3 cardinal hex-axes\n    let angle_offs = PI/6;\n    let best_h = 0;\n    let angles = [\n      [-0.5, sqrt(3/4), PI/6],\n      [-1, 0, PI*3/6],\n      [-0.5, -sqrt(3/4), PI*5/6],\n      [0.5, -sqrt(3/4), PI*7/6],\n      [1, 0, PI*9/6],\n      [0.5, sqrt(3/4), PI*11/6],\n    ];\n    for (let ii = 0; ii < angles.length; ++ii) {\n      let sx = round(x0 + angles[ii][0] * blend_radius / 2 / SKEW_X);\n      let sy = round(y0 + angles[ii][1] * blend_radius / 2);\n      sx = clamp(sx, 0, width - 1);\n      sy = clamp(sy, 0, height - 1);\n      let h = relev[sx + sy * width];\n      if (h > best_h) {\n        best_h = h;\n        angle_offs = angles[ii][2];\n      }\n    }\n\n    for (let dx = -horiz_radius; dx <= horiz_radius; ++dx) {\n      for (let dy = -blend_radius; dy <= blend_radius; ++dy) {\n        let x = x0 + dx;\n        let y = y0 + dy;\n        let unif_dx = (x - x0) / SKEW_X;\n        let unif_dy = y - y0;\n        if ((x0 & 1) !== (x & 1)) {\n          if (x0 & 1) {\n            unif_dy -= 0.5;\n          } else {\n            unif_dy += 0.5;\n          }\n        }\n        let dsq = unif_dx*unif_dx + unif_dy*unif_dy;\n        if (dsq >= rsquared) {\n          continue;\n        }\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n          continue;\n        }\n        let pos_idx = y * width + x;\n        if (!land[pos_idx]) {\n          continue;\n        }\n        let elev = relev[pos_idx];\n        let dh = elev - avg_height;\n        let scale = 1 - sqrt(dsq) / blend_radius;\n        let angle = atan2(unif_dx, unif_dy);\n        // TODO: add rotate here\n        angle = ((angle + angle_offs) + PI) % TWOPI - PI;\n        angle = abs(angle) / PI;\n        angle = clamp((angle - (1 - power_blend) / 2) / power_blend, 0, 1);\n        let eff_power = lerp(angle, power_min, power_max);\n        scale = pow(scale, eff_power);\n        let cdist = coast_distance[pos_idx];\n        if (cdist_ramp) {\n          scale *= clamp(cdist / cdist_ramp, 0, 1);\n        }\n        let delta = (weight_local * max(0, dh) + weight_abs * center_dh) * height_scale * scale;\n        mountain_delta[pos_idx] = max(mountain_delta[pos_idx], delta);\n      }\n    }\n  }\n  function applyGrowth() {\n    for (let pos_idx = 0; pos_idx < total_size; ++pos_idx) {\n      relev[pos_idx] += mountain_delta[pos_idx];\n    }\n  }\n\n  mountain_delta.fill(0);\n  for (let ii = 0; ii < points.length; ++ii) {\n    growMountain(points[ii]);\n  }\n  applyGrowth();\n}\n\nfunction pruneUphillRivers() {\n  // After Mountainify has changed the slopes, are any rivers now flowing uphill?\n  subopts = opts.river;\n  if (!subopts.mtify_prune) {\n    return;\n  }\n  let { mtify_prune_grace } = subopts;\n\n  function clearRiver(pos, from_dir) {\n    let bits = river[pos];\n    let neighbors = neighbors_bit[pos & 1];\n    for (let ii = 0; ii < 6; ++ii) {\n      if (ii !== from_dir && (bits & (1 << ii))) {\n        clearRiver(pos + neighbors[ii], (ii + 3) % 6);\n      }\n    }\n    rstrahler[pos] = 0;\n    river[pos] = 0;\n  }\n  function fillStrahler(pos, from_dir) {\n    let my_elev = relev[pos];\n    let bits = river[pos];\n    let out = [];\n    let neighbors = neighbors_bit[pos & 1];\n    for (let ii = 0; ii < 6; ++ii) {\n      if (ii !== from_dir && (bits & (1 << ii))) {\n        let nid = pos + neighbors[ii];\n        if (relev[nid] < my_elev) {\n          if (relev[nid] < my_elev - mtify_prune_grace) {\n            river[pos] &= ~(1 << ii);\n            clearRiver(nid, (ii + 3) % 6);\n          } else {\n            // Pretty close, just raise a bit\n            relev[nid] = my_elev;\n            out.push(ii);\n          }\n        } else {\n          out.push(ii);\n        }\n      }\n    }\n    // Might as well also re-compute Strahler (just for debug)\n    let s;\n    if (!out.length) {\n      s = 1;\n    } else {\n      if (out.length === 1) {\n        s = fillStrahler(pos + neighbors[out[0]], (out[0] + 3) % 6);\n      } else {\n        assert.equal(out.length, 2);\n        let s1 = fillStrahler(pos + neighbors[out[0]], (out[0] + 3) % 6);\n        let s2 = fillStrahler(pos + neighbors[out[1]], (out[1] + 3) % 6);\n        if (s1 === s2) {\n          s = s1 + 1;\n        } else {\n          s = max(s1, s2);\n        }\n      }\n    }\n    rstrahler[pos] = s;\n    return s;\n  }\n\n  for (let ii = 0; ii < total_size; ++ii) {\n    let rbits = river[ii];\n    if (!rbits) {\n      continue;\n    }\n    let neighbors = neighbors_bit[ii & 1];\n    let found_one = false;\n    for (let jj = 0; jj < neighbors.length; ++jj) {\n      if (rbits & (1 << jj)) {\n        let nid = ii + neighbors[jj];\n        if (!river[nid]) {\n          assert(!found_one);\n          found_one = true;\n          fillStrahler(ii, jj);\n          // Also, add a bit to where we flow into, to continue rivers\n          // todo.push([nid, jj]);\n        }\n      }\n    }\n  }\n}\n\nfunction generateHumidity() {\n  let total_range = opts.output.land_range; // + opts.output.sea_range; - sea isn't used for slope, for the most part\n  let slope_mul = 4096 / total_range;\n  function generateSlope() {\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        let pos = y * width + x;\n        if (land[pos]) {\n          // hexPosToUnifPos(x, y);\n          // let noise_v = sample();\n          let elev = relev[pos];\n          let right_slope = 0; // if positive, slopes down to the right\n          let neighbors = neighbors_bit[x & 1];\n          for (let ii = 1; ii < 6; ++ii) {\n            if (ii === 3) {\n              continue;\n            }\n            let npos = pos + neighbors[ii];\n            let nelev = relev[npos];\n            if (ii < 3) {\n              right_slope += elev - nelev;\n            } else {\n              right_slope += nelev - elev;\n            }\n          }\n          humidity[pos] = clamp(128 + right_slope * slope_mul, 0, 255);\n        } else {\n          humidity[pos] = 128;\n        }\n      }\n    }\n  }\n  generateSlope();\n  if (opts.humidity.show_relief) {\n    return;\n  }\n  function blurSlope() {\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        let pos = y * width + x;\n        if (land[pos]) {\n          let neighbors = neighbors_bit[x & 1];\n          let total = humidity[pos];\n          let count = 1;\n          for (let ii = 1; ii < 6; ++ii) {\n            let npos = pos + neighbors[ii];\n            if (land[npos]) {\n              total += humidity[npos];\n              count++;\n            }\n          }\n          humidity[pos] = round(total / count);\n        }\n      }\n    }\n  }\n  blurSlope();\n  function addToNoise() {\n    initNoise(opts.humidity);\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        let pos = y * width + x;\n        hexPosToUnifPos(x, y);\n        let noise_v = sample();\n        let rainshadow = (humidity[pos] - 128) / 127;\n        rainshadow = ((rainshadow >= 0) ? 0.25 : -0.25) + rainshadow * 0.75; // [-1,-0.25] or [0.25,1.0]\n        let rainshadow_effect = get('rainshadow'); // [0,1]\n        rainshadow *= rainshadow_effect;\n        noise_v = ((noise_v + rainshadow) + rainshadow_effect) / (1 + rainshadow_effect * 2); // [0,1]\n        humidity[pos] = clamp(noise_v * 255, 0, 255);\n      }\n    }\n  }\n  addToNoise();\n}\n\nfunction determineClassification() {\n  subopts = opts.classif;\n  let { cut1, cut2, blur_scale, blur_w } = subopts;\n\n  function blurHeight() {\n    let w_len = blur_w * 2 + 1;\n    let w = 1 / w_len;\n\n    let h_min = opts.output.sea_range;\n\n    // Horizontal blur\n    for (let yy = 0; yy < height; ++yy) {\n      for (let xx = 0; xx <= width - w_len; ++xx) {\n        let pos = xx + yy * width;\n        let v = 0;\n        for (let dx = 0; dx < w_len; ++dx) {\n          v += max(h_min, relev[pos + dx]);\n        }\n        blur_temp1[pos + blur_w] = round(v * w);\n      }\n    }\n    // Vertical blur\n    for (let yy = 0; yy < height - w_len; ++yy) {\n      for (let xx = blur_w; xx <= width - blur_w; ++xx) {\n        let pos = xx + yy * width;\n        let v = 0;\n        for (let dy = 0; dy < w_len; ++dy) {\n          v += blur_temp1[pos + dy * width];\n        }\n        blur_temp2[pos + blur_w * width] = round(v * w);\n      }\n    }\n  }\n  function classifFromDiff() {\n    for (let pos = 0; pos < total_size; ++pos) {\n      let c;\n      if (!land[pos]) {\n        c = C_WATER;\n      } else {\n        let elev = relev[pos];\n        let blurred = blur_temp2[pos] || elev;\n        let diff = elev - blurred;\n        let v = diff / blur_scale;\n        c = v > cut2 ? C_MOUNTAINS : v > cut1 ? C_HILLS : C_PLAINS;\n      }\n      classif[pos] = c;\n    }\n  }\n  blurHeight();\n  classifFromDiff();\n  // Maybe also want a blur / cellular automata pass to remove islands of classification\n  // Maybe want to do stuff to decrease the mountains on the coasts\n}\n\n\nexport function continentGen(opts_in) {\n  let start = Date.now();\n  opts = opts_in;\n  let { hex_tex_size } = opts;\n  let output_debug = opts.output.debug;\n  if (hex_tex_size !== last_tex_size) {\n    setupWorkBuffers(hex_tex_size);\n  }\n\n  debug_priority = [];\n  state = {}; // for passing misc parameters between phases\n  rand = randCreate(opts.seed);\n\n  fill.fill(0);\n\n  generateCoastlines();\n  fillSeas();\n  generateLakes();\n  generateTerrainSlope();\n  generateRiverSlope();\n  growRivers();\n  generateOceanDistanceField();\n  generateOcean();\n  generateOutputElevation();\n  fixupCoastalWaters();\n  blurExtremeSlopes();\n  fillLakes();\n  pruneFloodedRivers();\n  generateCoastDistanceField(); // includes lakes\n  mountainify();\n  pruneUphillRivers();\n  if (opts.early_out !== 'river') {\n    generateHumidity();\n  }\n  determineClassification();\n\n  let ret = {\n    sea_level: opts.output.sea_range,\n    max_elevation: opts.output.sea_range + opts.output.land_range,\n  };\n  if (output_debug) {\n    ret.land = land;\n    ret.fill = fill;\n    ret.tslope = tslope;\n    ret.rslope = rslope;\n    ret.river = river;\n    ret.elev = relev;\n    ret.water_level = water_level;\n    ret.rstrahler = rstrahler;\n    ret.humidity = humidity;\n    ret.classif = classif;\n    ret.coast_distance = coast_distance;\n    ret.ocean_distance = ocean_distance;\n    ret.debug_priority = debug_priority;\n    ret.blur_temp1 = blur_temp1;\n    ret.blur_temp2 = blur_temp2;\n  } else {\n    ret.elev = relev.slice(0);\n    ret.humidity = humidity.slice(0);\n    ret.river = river.slice(0);\n    ret.water_level = water_level.slice(0);\n    ret.classif = classif.slice(0);\n  }\n  ret.time = Date.now() - start;\n  return ret;\n}\n","//////////////////////////////////////////////////////////////////////////////////\n// Code provided for example purposes only with no license for use or distribution\nconst assert = require('assert');\nconst { packetCreate, packetFromBuffer, PACKET_DEBUG } = require('../common/packet.js');\n\nconst CONTINENT_SER_VERSION = 1;\n\nconst SER_METHOD_DELTA_PACK_INT = 1;\nconst SER_METHOD_RLE_DICT = 2;\nconst SER_METHOD_RLE_ZEROES = 3;\nconst SER_METHOD_RLE_U2 = 4;\n\nconst FIELDS = [\n  'elev',        // U16\n  'water_level', // U16\n  'humidity',    // U8\n  'river',       // U8\n  'classif',     // U8\n];\n\nconst SER_METHOD_FOR_FIELD = {\n  // U16; best: DeltaPakInt (saves just 19%; will zip\n  //            very well after delta encoded, though!)\n  // - huffman(delta()) would save another 30%\n  elev: SER_METHOD_DELTA_PACK_INT,\n\n  // U16; best: RLEDict (saves 99.6%)\n  water_level: SER_METHOD_RLE_DICT,\n\n  // U8;  same: raw=RLEZeroes=DeltaPakInt (saves 0%, but deltas should zip\n  //            or huffman very well though)\n  // - huffman(delta()) saves a total of 35%\n  humidity: SER_METHOD_DELTA_PACK_INT,\n\n  // U8;  best: RLEZeroes (saves 82%)\n  river: SER_METHOD_RLE_ZEROES,\n\n  // U8;  best: RLEU2 (saves 92%)\n  classif: SER_METHOD_RLE_U2,\n};\n\nconst FIELD_TYPE = {\n  elev: Uint16Array,\n  water_level: Uint16Array,\n  humidity: Uint8Array,\n  river: Uint8Array,\n  classif: Uint8Array,\n};\n\n// Write either a single value, or a 0 followed by a count of zeroes\nexport function encodeRLEZeroes(pak, data) {\n  let size = data.length;\n  let c = 0;\n  for (let ii = 0; ii < size; ++ii) {\n    let v = data[ii];\n    if (v) {\n      if (c) {\n        pak.writeInt(c);\n        c = 0;\n      }\n      pak.writeInt(v);\n    } else {\n      if (!c) {\n        pak.writeInt(v);\n      }\n      c++;\n    }\n  }\n  if (c) {\n    pak.writeInt(c);\n  }\n}\n\nfunction decodeRLEZeroes(data, pak) {\n  let idx = 0;\n  while (idx < data.length) {\n    let v = pak.readInt();\n    let c = 1;\n    if (!v) {\n      c = pak.readInt();\n    }\n    assert(idx + c <= data.length);\n    for (let ii = 0; ii < c; ++ii) {\n      data[idx++] = v;\n    }\n  }\n}\n\nexport function encodeRLEU2(pak, data) {\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  function writecv() {\n    let out = (v << 6) | c;\n    pak.writeU8(out);\n  }\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v || c === 63) {\n      writecv();\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  writecv();\n}\n\nfunction decodeRLEU2(data, pak) {\n  let idx = 0;\n  while (idx < data.length) {\n    let v = pak.readU8();\n    let c = (v & 0x3F) + 1;\n    v >>>= 6;\n    assert(idx + c <= data.length);\n    for (let ii = 0; ii < c; ++ii) {\n      data[idx++] = v;\n    }\n  }\n}\n\nexport function encodeRLEDict(pak, data) {\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  let dict = [];\n  let dict_idx = 0;\n  function writecv() {\n    pak.writeInt(c);\n    let di = dict[v];\n    if (di !== undefined) {\n      pak.writeInt(di);\n    } else {\n      di = dict[v] = dict_idx++;\n      pak.writeInt(di);\n      pak.writeInt(v);\n    }\n  }\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v) {\n      writecv();\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  writecv();\n}\n\nfunction decodeRLEDict(data, pak) {\n  let idx = 0;\n  let dict = [];\n  while (idx < data.length) {\n    let c = pak.readInt() + 1;\n    let di = pak.readInt();\n    let v = dict[di];\n    if (v === undefined) {\n      v = dict[di] = pak.readInt();\n    }\n    assert(idx + c <= data.length);\n    for (let ii = 0; ii < c; ++ii) {\n      data[idx++] = v;\n    }\n  }\n}\n\n// Packed int, biasing the delta by 124 to try to keep it in a single byte\n//   (which encodes 0-248)\nexport function encodeDeltaPakInt(pak, data) {\n  let v = 124;\n  let size = data.length;\n  for (let ii = 0; ii < size; ++ii) {\n    let delta = data[ii] - v + 124;\n    pak.writeInt(delta);\n    v = data[ii];\n  }\n}\n\nfunction decodeDeltaPakInt(data, pak) {\n  let size = data.length;\n  let v = 124;\n  for (let ii = 0; ii < size; ++ii) {\n    v += pak.readInt() - 124;\n    data[ii] = v;\n  }\n}\n\nfunction encodeToPacket(pak, method, buf) {\n  switch (method) {\n    case SER_METHOD_DELTA_PACK_INT:\n      encodeDeltaPakInt(pak, buf);\n      break;\n    case SER_METHOD_RLE_DICT:\n      encodeRLEDict(pak, buf);\n      break;\n    case SER_METHOD_RLE_ZEROES:\n      encodeRLEZeroes(pak, buf);\n      break;\n    case SER_METHOD_RLE_U2:\n      encodeRLEU2(pak, buf);\n      break;\n    default:\n      assert();\n  }\n}\n\nfunction decodeFromPacket(buf, method, pak) {\n  switch (method) {\n    case SER_METHOD_DELTA_PACK_INT:\n      decodeDeltaPakInt(buf, pak);\n      break;\n    case SER_METHOD_RLE_DICT:\n      decodeRLEDict(buf, pak);\n      break;\n    case SER_METHOD_RLE_ZEROES:\n      decodeRLEZeroes(buf, pak);\n      break;\n    case SER_METHOD_RLE_U2:\n      decodeRLEU2(buf, pak);\n      break;\n    default:\n      assert();\n  }\n}\n\nconst FIELD_MAGIC = 227;\nexport function continentSerialize(cdata, debug) {\n  let { sea_level, max_elevation } = cdata;\n  let total_size = cdata.elev.length;\n  // Estimated total size of packet is = total_size * 3, from empirical data,\n  //   give a little extra room.\n  let pak = packetCreate(debug ? PACKET_DEBUG : 0, total_size * 4);\n  pak.writeFlags();\n  pak.writeInt(CONTINENT_SER_VERSION);\n  pak.writeInt(sea_level);\n  pak.writeInt(max_elevation);\n  pak.writeInt(total_size);\n\n  FIELDS.forEach(function (field) {\n    pak.writeInt(FIELD_MAGIC);\n    encodeToPacket(pak, SER_METHOD_FOR_FIELD[field], cdata[field]);\n  });\n  pak.makeReadable();\n  let ret_len = pak.getBufferLen();\n  let ret = pak.getBuffer().slice(0, ret_len);\n  pak.pool();\n  return ret;\n}\n\nexport function continentDeserialize(buf) {\n  let ret = {};\n  let pak = packetFromBuffer(buf, buf.length, false);\n  pak.readFlags();\n  let ver = pak.readInt();\n  assert.equal(ver, CONTINENT_SER_VERSION);\n  ret.sea_level = pak.readInt();\n  ret.max_elevation = pak.readInt();\n  let total_size = pak.readInt();\n  assert(total_size <= 512*512);\n\n  FIELDS.forEach(function (field) {\n    let field_magic = pak.readInt();\n    assert.equal(field_magic, FIELD_MAGIC);\n    let ArrayType = FIELD_TYPE[field];\n    let out = ret[field] = new ArrayType(total_size);\n    decodeFromPacket(out, SER_METHOD_FOR_FIELD[field], pak);\n  });\n  return ret;\n}\n","//////////////////////////////////////////////////////////////////////////////////\n// Code provided for example purposes only with no license for use or distribution\n\n// Additional serialization methods and comparison, that were not significantly\n//   better.\n\nconst assert = require('assert');\nconst { packetCreate } = require('../common/packet.js');\nconst { ridx } = require('../common/util.js');\nconst {\n  encodeRLEZeroes,\n  encodeRLEU2,\n  encodeRLEDict,\n  encodeDeltaPakInt,\n} = require('./continent_serialize.js');\n\nfunction BitBuffer() {\n  this.pak = packetCreate(0);\n  this.v = 0;\n  this.b = 0;\n}\nBitBuffer.prototype.writeBits = function (num_bits, value) {\n  assert(num_bits < 24);\n  let { v, b, pak } = this;\n  v |= value << b;\n  b += num_bits;\n  while (b > 8) {\n    pak.writeU8(v & 255);\n    v >>>= 8;\n    b -= 8;\n  }\n  this.v = v;\n  this.b = b;\n};\nBitBuffer.prototype.flush = function () {\n  let { pak, b } = this;\n  if (b) {\n    this.writeBits(8 - b, 0);\n  }\n  pak.makeReadable();\n  let ret_len = pak.getBufferLen();\n  let ret = pak.getBuffer().slice(0, ret_len);\n  pak.pool();\n  return ret;\n};\n\nfunction encodeRLEPakInt(pak, data) {\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v) {\n      pak.writeInt(c);\n      pak.writeInt(v);\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  pak.writeInt(c);\n  pak.writeInt(v);\n}\n\nfunction encodeRLEUx(base_bits, data) {\n  let count_pak = packetCreate(0);\n  let value_buf = new BitBuffer();\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  function writecv() {\n    count_pak.writeInt(c);\n    if (v) {\n      value_buf.writeBits(1, 1);\n      value_buf.writeBits(base_bits, v);\n    } else {\n      value_buf.writeBits(1, 0);\n    }\n  }\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v) {\n      writecv();\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  writecv();\n\n  count_pak.makeReadable();\n  let ret_len = count_pak.getBufferLen();\n  let ret1 = count_pak.getBuffer().slice(0, ret_len);\n  count_pak.pool();\n  let ret2 = value_buf.flush();\n  return [ret1, ret2];\n}\n\nlet temp_u8_encode;\nfunction encodeRLEU8(data) {\n  if (!(data instanceof Uint8Array)) {\n    return '';\n  }\n  if (!temp_u8_encode || temp_u8_encode.length < data.length * 2) {\n    temp_u8_encode = new Uint8Array(data.length * 2);\n  }\n  let out = temp_u8_encode;\n  let idx = 0;\n\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v || c === 255) {\n      out[idx++] = c;\n      out[idx++] = v;\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  out[idx++] = c;\n  out[idx++] = v;\n  return out.slice(0, idx);\n}\n\nlet temp_u16_encode;\nfunction encodeRLEU16(data) {\n  if (!(data instanceof Uint16Array)) {\n    return '';\n  }\n  if (!temp_u16_encode || temp_u16_encode.length < data.length * 2) {\n    temp_u16_encode = new Uint16Array(data.length * 2);\n  }\n  let out = temp_u16_encode;\n  let idx = 0;\n\n  let v = data[0];\n  let size = data.length;\n  let c = 0;\n  for (let ii = 1; ii < size; ++ii) {\n    if (data[ii] !== v || c === 65535) {\n      out[idx++] = c;\n      out[idx++] = v;\n      c = 0;\n      v = data[ii];\n    } else {\n      c++;\n    }\n  }\n  out[idx++] = c;\n  out[idx++] = v;\n  return out.slice(0, idx);\n}\n\nfunction encodeHuffman(data) {\n  // Build encoding table\n  let histo = {};\n  for (let ii = 0; ii < data.length; ++ii) {\n    let v = data[ii];\n    histo[v] = (histo[v] || 0) + 1;\n  }\n  let nodes = [];\n  for (let key in histo) {\n    let v = Number(key);\n    let count = histo[key];\n    nodes.push([count, v]);\n  }\n  function checkCount() {\n    let a = 0;\n    for (let ii = 0; ii < nodes.length; ++ii) {\n      a += nodes[ii][0];\n    }\n    assert.equal(a, data.length);\n  }\n  checkCount();\n  while (nodes.length > 1) {\n    let lowest1 = 0;\n    let lowest2 = 1;\n    if (nodes[0][0] > nodes[1][0]) {\n      lowest1 = 1;\n      lowest2 = 0;\n    }\n    for (let ii = 2; ii < nodes.length; ++ii) {\n      if (nodes[ii][0] < nodes[lowest2][0]) {\n        if (nodes[ii][0] < nodes[lowest1][0]) {\n          lowest2 = lowest1;\n          lowest1 = ii;\n        } else {\n          lowest2 = ii;\n        }\n      }\n    }\n    assert(lowest1 !== lowest2);\n    let n1 = nodes[lowest1];\n    let n2 = nodes[lowest2];\n    let newnode = [n1[0] + n2[0], [n1[1], n2[1]]];\n    if (lowest1 === nodes.length - 1) {\n      nodes.pop();\n      ridx(nodes, lowest2);\n    } else if (lowest2 === nodes.length - 1) {\n      nodes.pop();\n      ridx(nodes, lowest1);\n    } else {\n      ridx(nodes, lowest1);\n      ridx(nodes, lowest2);\n    }\n    nodes.push(newnode);\n    checkCount();\n  }\n  let encoding = [];\n  // Note: current data written to enc_pak is not coherent, we'd need to first\n  // sort nodes by their values so a values lower than the current node_idx\n  // is never written\n  let enc_pak = packetCreate(0);\n  let node_idx = 0;\n  function walk(node, prefix, numbits) {\n    if (Array.isArray(node)) {\n      prefix <<= 1;\n      let left_idx = walk(node[0], prefix, numbits+1);\n      let right_idx = walk(node[1], prefix | 1, numbits+1);\n      enc_pak.writeInt(left_idx);\n      enc_pak.writeInt(right_idx);\n    } else {\n      encoding[node] = [prefix, numbits];\n      enc_pak.writeInt(node);\n    }\n    return node_idx++;\n  }\n  walk(nodes[0][1], 0, 0);\n\n  let buf = new BitBuffer();\n\n  for (let ii = 0; ii < data.length; ++ii) {\n    let v = data[ii];\n    let enc = encoding[v];\n    assert(enc);\n    buf.writeBits(enc[1], enc[0]);\n  }\n\n  enc_pak.makeReadable();\n  let ret_len = enc_pak.getBufferLen();\n  let ret1 = enc_pak.getBuffer().slice(0, ret_len);\n  enc_pak.pool();\n  return [buf.flush(), ret1];\n}\n\nfunction encodeWrap(fn) {\n  return function (data) {\n    let pak = packetCreate(0);\n    fn(pak, data);\n    pak.makeReadable();\n    let ret_len = pak.getBufferLen();\n    let ret = pak.getBuffer().slice(0, ret_len);\n    pak.pool();\n    return ret;\n  };\n}\n\nexport function continentSerializeTest(cdata) {\n  [\n    'elev',        // U16\n    'water_level', // U16\n    'humidity',    // U8\n    'river',       // U8\n    'classif',     // U8\n  ].forEach(function (field) {\n    let data = cdata[field];\n    console.log(`${field}:`);\n    function test(name, fn) {\n      let buf = fn(data);\n      if (Array.isArray(buf)) {\n        let b0 = buf[0].buffer.byteLength;\n        let b1 = buf[1].buffer.byteLength;\n        console.log(`  ${name}: ${b0 + b1} (${b0} + ${b1})`);\n      } else {\n        console.log(`  ${name}: ${buf.buffer.byteLength}`);\n      }\n    }\n    test('raw', () => new Uint8Array(data.buffer));\n    test('RLEPakInt', encodeWrap(encodeRLEPakInt));\n    test('RLEZeroes', encodeWrap(encodeRLEZeroes));\n    test('RLEDict', encodeWrap(encodeRLEDict));\n    test('RLEU8/16', (data instanceof Uint8Array) ? encodeRLEU8 : encodeRLEU16);\n    test('DeltaPakInt', encodeWrap(encodeDeltaPakInt));\n    if (field === 'river') {\n      test('RLEU6', encodeRLEUx.bind(null, 6));\n    }\n    if (field === 'classif') {\n      test('RLEUx(2)', encodeRLEUx.bind(null, 2));\n      test('RLEU2', encodeWrap(encodeRLEU2));\n    }\n    test('Huffman', encodeHuffman);\n    test('Huffman(DeltaPakInt)',() => encodeHuffman(encodeWrap(encodeDeltaPakInt)(data)));\n\n    // Chaining did nothing good:\n    // test('rlePakInt(deltaPakInt)', () => encodeWrap(encodePakInt)(encodeWrap(encodeDeltaPakInt)(data)));\n    // test('encodeRLEDict(deltaPakInt)', () => encodeWrap(encodeRLEDict)(encodeWrap(encodeDeltaPakInt)(data)));\n  });\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n// Things that should be done before requiring or running any user-level code or other engine code\n\nrequire('./polyfill.js');\n\nlet debug = document.getElementById('debug');\nwindow.onerror = function (e, file, line, col, errorobj) {\n  let msg = `${e}\\n  at ${file}(${line}:${col})`;\n  if (errorobj && errorobj.stack) {\n    msg = `${errorobj.stack}`;\n    if (errorobj.message) {\n      if (msg.indexOf(errorobj.message) === -1) {\n        msg = `${errorobj.message}\\n${msg}`;\n      }\n    }\n    let origin = document.location.origin || '';\n    if (origin) {\n      if (origin.slice(-1) !== '/') {\n        origin += '/';\n      }\n      msg = msg.split(origin).join(''); // replace\n    }\n    // fixup weird Firefox weirdness\n    msg = msg.replace(/\\[\\d+\\]</g, '') // remove funny [123] at start of stack lines\n      .replace(/<?\\/<?/g, '/') // remove funny <s, they mess up people's copy and paste\n      .replace(/\\n([^ ])/g, '\\n  $1'); // add indentation if missing\n  }\n  let show = true;\n  if (window.glov_error_report) {\n    show = window.glov_error_report(msg, file, line, col);\n  }\n  if (show) {\n    debug.innerText = `${msg}\\n\\nPlease report this error to the developer, and then reload this page.`;\n  }\n};\nwindow.debugmsg = function (msg, clear) {\n  if (clear) {\n    debug.innerText = msg;\n  } else {\n    debug.innerText += `${msg}\\n`;\n  }\n};\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-shadow:off */\n\nconst engine = require('./engine.js');\n\nconst { round } = Math;\n\nconst safearea_pad = new Float32Array(4); // left, right, top, bottom\n// 0: x0_real\n// 1: y0_real\n// 2: x1_real\n// 3: y1_real\n// 4: x_scale\n// 5: y_scale\n// 6: css_to_real\n// 7: inverse viewport x_scale\n// 8: inverse viewport y_scale\n// 9: x0\n// 10: y0\n// 11: x1\n// 12: y1\nexport const data = new Float32Array(13);\n\nlet screen_width;\nlet screen_height;\n// Note: render_* not used by FRVR at this time\nlet render_width;\nlet render_height;\nexport let render_viewport_w;\nexport let render_viewport_h;\nexport let render_offset_x;\nlet render_offset_y_top;\nexport let render_offset_y_bottom;\n\nfunction reapply() {\n  if (render_width) {\n    data[4] = render_width / (data[2] - data[0]);\n    data[5] = render_height / (data[3] - data[1]);\n    data[7] = (data[2] - data[0]) / render_viewport_w;\n    data[8] = (data[3] - data[1]) / render_viewport_h;\n  } else {\n    data[4] = screen_width / (data[2] - data[0]);\n    data[5] = screen_height / (data[3] - data[1]);\n  }\n}\n\n// To get to coordinates used by OpenGL / canvas\nexport function virtualToCanvas(dst, src) {\n  dst[0] = (src[0] - data[0]) * data[4];\n  dst[1] = (src[1] - data[1]) * data[5];\n}\n\n// Sets the 2D \"camera\" used to translate sprite positions to screen space.  Affects sprites queued\n//  after this call\nexport function set(x0, y0, x1, y1, ignore_safe_area) {\n  if (ignore_safe_area || render_width) {\n    data[9] = data[0] = x0;\n    data[10] = data[1] = y0;\n    data[11] = data[2] = x1;\n    data[12] = data[3] = y1;\n  } else {\n    data[9] = x0;\n    data[10] = y0;\n    data[11] = x1;\n    data[12] = y1;\n    let wscale = (x1 - x0) / (screen_width - safearea_pad[0] - safearea_pad[1]);\n    let hscale = (y1 - y0) / (screen_height - safearea_pad[2] - safearea_pad[3]);\n    data[0] = x0 - safearea_pad[0] * wscale;\n    data[1] = y0 - safearea_pad[2] * hscale;\n    data[2] = x1 + safearea_pad[1] * wscale;\n    data[3] = y1 + safearea_pad[3] * hscale;\n  }\n\n  reapply();\n}\n\nexport function setSafeAreaPadding(left, right, top, bottom) {\n  safearea_pad[0] = round(left);\n  safearea_pad[1] = round(right);\n  safearea_pad[2] = round(top);\n  safearea_pad[3] = round(bottom);\n  // Called while updating screen width/height, reapply() should get called later\n}\n\nexport function safeAreaPadding() {\n  return safearea_pad;\n}\n\nconst stack = [];\nexport function push() {\n  stack.push(data.slice(0));\n}\nexport function pop() {\n  let old = stack.pop();\n  set(old[0], old[1], old[2], old[3], true);\n}\n\nexport function domToCanvasRatio() {\n  return data[6];\n}\n\nexport function screenAspect() {\n  return (screen_width - safearea_pad[0] - safearea_pad[1]) /\n    (screen_height - safearea_pad[2] - safearea_pad[3]);\n}\n\n// Drawing area 0,0-w,h\n// But keep the aspect ratio of those things drawn to be correct\n// This may create a padding or margin on either top and bottom or sides of the screen\n// User users constant values in this range for consistent UI on all devices\nexport function setAspectFixed(w, h) {\n  let pa = render_width ? 1 : engine.pixel_aspect;\n  let inv_aspect = h / pa / w;\n  let inv_desired_aspect;\n  if (render_width) {\n    inv_desired_aspect = render_height / render_width;\n  } else {\n    inv_desired_aspect = 1 / screenAspect();\n  }\n  if (inv_aspect > inv_desired_aspect) {\n    let margin = (h / pa / inv_desired_aspect - w) / 2;\n    set(-margin, 0, w + margin, h, false);\n  } else {\n    let margin = (w * pa * inv_desired_aspect - h) / 2;\n    set(0, -margin, w, h + margin, false);\n  }\n}\n\n// Primary drawing area at least W x H\n// But keep the aspect ratio of those things drawn to be correct\n// Similar to setAspectFixed() but keeps (0,0) in the upper left (all padding\n//   is added to right and bottom)\n// Requires users to use camera2d.w()/ and camera2d.h() to determine reasonable\n//   UI positioning\nexport function setAspectFixed2(w, h) {\n  let pa = render_width ? 1 : engine.pixel_aspect;\n  let inv_aspect = h / pa / w;\n  let inv_desired_aspect;\n  if (render_width) {\n    inv_desired_aspect = render_height / render_width;\n  } else {\n    inv_desired_aspect = 1 / screenAspect();\n  }\n  if (inv_aspect > inv_desired_aspect) {\n    let margin = (h / pa / inv_desired_aspect - w);\n    set(0, 0, w + margin, h, false);\n  } else {\n    let margin = (w * pa * inv_desired_aspect - h);\n    set(0, 0, w, h + margin, false);\n  }\n}\n\nexport function zoom(x, y, factor) {\n  let inv_factor = 1.0 / factor;\n  set(\n    x - (x - data[0]) * inv_factor,\n    y - (y - data[1]) * inv_factor,\n    x + (data[2] - x) * inv_factor,\n    y + (data[3] - y) * inv_factor, true);\n}\n\nexport function setNormalized() {\n  set(0, 0, 1, 1, true);\n}\n\nexport function x0Real() {\n  return data[0];\n}\nexport function y0Real() {\n  return data[1];\n}\nexport function x1Real() {\n  return data[2];\n}\nexport function y1Real() {\n  return data[3];\n}\nexport function wReal() {\n  return data[2] - data[0];\n}\nexport function hReal() {\n  return data[3] - data[1];\n}\nexport function x0() {\n  return data[9];\n}\nexport function y0() {\n  return data[10];\n}\nexport function x1() {\n  return data[11];\n}\nexport function y1() {\n  return data[12];\n}\nexport function w() {\n  return data[11] - data[9];\n}\nexport function h() {\n  return data[12] - data[10];\n}\nexport function xScale() {\n  return data[4];\n}\nexport function yScale() {\n  return data[5];\n}\n\nexport function htmlPos(x, y) {\n  if (render_width) {\n    return [\n      100 * (((x - data[0]) / data[7] + render_offset_x) / screen_width),\n      100 * (((y - data[1]) / data[8] + render_offset_y_top) / screen_height),\n    ];\n  } else {\n    return [\n      100 * (x - data[0]) / (data[2] - data[0]),\n      100 * (y - data[1]) / (data[3] - data[1]),\n    ];\n  }\n}\nexport function htmlSize(w, h) {\n  if (render_width) {\n    return [\n      100 * w / data[7] / screen_width,\n      100 * h / data[8] / screen_height,\n    ];\n  } else {\n    return [100 * w / (data[2] - data[0]), 100 * h / (data[3] - data[1])];\n  }\n}\n\nexport function domToVirtual(dst, src) {\n  if (render_width) {\n    dst[0] = (src[0] * data[6] - render_offset_x) * data[7] + data[0];\n    dst[1] = (src[1] * data[6] - render_offset_y_top) * data[8] + data[1];\n  } else {\n    dst[0] = src[0] * data[6] / data[4] + data[0];\n    dst[1] = src[1] * data[6] / data[5] + data[1];\n  }\n}\n\nexport function domDeltaToVirtual(dst, src) {\n  if (render_width) {\n    dst[0] = src[0] * data[6] * data[7];\n    dst[1] = src[1] * data[6] * data[8];\n  } else {\n    dst[0] = src[0] * data[6] / data[4];\n    dst[1] = src[1] * data[6] / data[5];\n  }\n}\n\n// To get to coordinates used by mouse events\nexport function virtualToDom(dst, src) {\n  if (render_width) {\n    dst[0] = (render_offset_x + (src[0] - data[0]) / data[7]) / data[6];\n    dst[1] = (render_offset_y_top + (src[1] - data[1]) / data[8]) / data[6];\n  } else {\n    dst[0] = (src[0] - data[0]) * data[4] / data[6];\n    dst[1] = (src[1] - data[1]) * data[5] / data[6];\n  }\n}\n\nexport function virtualToFontSize(height) {\n  if (render_width) {\n    return height / (data[6] * data[8]) * 0.84;\n  } else {\n    return height * data[5] / data[6] * 0.84;\n  }\n}\n\n// dst/src are x/y/w/h objects (e.g. from input system)\nexport function virtualToDomPosParam(dst, src) {\n  if (render_width) {\n    dst.x = (render_offset_x + (src.x - data[0]) / data[7]) / data[6];\n    dst.w = src.w / data[7] / data[6];\n    dst.y = (render_offset_y_top + (src.y - data[1]) / data[8]) / data[6];\n    dst.h = src.h / data[8] / data[6];\n  } else {\n    dst.x = (src.x - data[0]) * data[4] / data[6];\n    dst.w = src.w * data[4] / data[6];\n    dst.y = (src.y - data[1]) * data[5] / data[6];\n    dst.h = src.h * data[5] / data[6];\n  }\n}\n\nexport function tickCamera2D() {\n  data[6] = window.devicePixelRatio || 1; /* css_to_real */\n  screen_width = engine.width;\n  screen_height = engine.height;\n  let viewport = [0, 0, screen_width, screen_height];\n  if (engine.render_width) { // Note: render_* not used by FRVR at this time\n    render_width = engine.render_width;\n    render_height = engine.render_height;\n    // Find an offset so this rendered viewport is centered while preserving aspect ratio, just like setAspectFixed\n    let pa = engine.pixel_aspect;\n    let inv_aspect = render_height / pa / render_width;\n    let eff_screen_width = (screen_width - safearea_pad[0] - safearea_pad[1]);\n    let eff_screen_height = (screen_height - safearea_pad[2] - safearea_pad[3]);\n    let inv_desired_aspect = eff_screen_height / eff_screen_width;\n    if (inv_aspect > inv_desired_aspect) {\n      let margin = (render_height / inv_desired_aspect - render_width * pa) / 2 *\n        eff_screen_height / render_height;\n      render_offset_x = safearea_pad[0] + round(margin);\n      render_offset_y_top = safearea_pad[2];\n      render_offset_y_bottom = safearea_pad[3];\n      render_viewport_w = round(eff_screen_width - margin * 2);\n      render_viewport_h = eff_screen_height;\n    } else {\n      let margin = (render_width * inv_desired_aspect - render_height / pa) / 2 *\n        eff_screen_width / render_width;\n      render_offset_x = safearea_pad[0];\n      render_offset_y_top = safearea_pad[2] + round(margin);\n      render_offset_y_bottom = safearea_pad[3] + round(margin);\n      render_viewport_w = eff_screen_width;\n      render_viewport_h = round(eff_screen_height - margin * 2);\n    }\n    viewport[2] = render_width;\n    viewport[3] = render_height;\n  } else {\n    render_width = render_height = 0;\n    render_offset_x = 0;\n    render_offset_y_top = 0;\n    render_offset_y_bottom = 0;\n  }\n\n  reapply();\n\n  // let screen_width = engine.width;\n  // let screen_height = engine.height;\n  // let screen_aspect = screen_width / screen_height;\n  // let view_aspect = game_width / game_height;\n  // if (screen_aspect > view_aspect) {\n  //   let viewport_width = game_height * screen_aspect;\n  //   let half_diff = (viewport_width - game_width) / 2;\n  //   viewportRectangle = [-half_diff, 0, game_width + half_diff, game_height];\n  // } else {\n  //   let viewport_height = game_width / screen_aspect;\n  //   let half_diff = (viewport_height - game_height) / 2;\n  //   viewportRectangle = [0, -half_diff, game_width, game_height + half_diff];\n  // }\n\n  engine.setViewport(viewport);\n}\n\nexport function startup() {\n  set(0, 0, engine.width, engine.height);\n  tickCamera2D();\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst cmd_parse_mod = require('../../common/cmd_parse.js');\nconst local_storage = require('./local_storage.js');\nexport let cmd_parse = cmd_parse_mod.create({ storage: local_storage });\n\nconst engine = require('./engine.js');\nconst textures = require('./textures.js');\nconst { PI, round } = Math;\n\nwindow.cmd = function (str) {\n  cmd_parse.handle(null, str, cmd_parse_mod.defaultHandler);\n};\n\ncmd_parse.registerValue('fov', {\n  type: cmd_parse.TYPE_FLOAT,\n  label: 'FOV',\n  range: [1,179],\n  get: () => round(engine.fov_min * 180 / PI),\n  set: (v) => engine.setFOV(v * PI / 180),\n  store: true,\n});\n\nfunction byteFormat(bytes) {\n  if (bytes > 850000) {\n    return `${(bytes/(1024*1024)).toFixed(2)}MB`;\n  }\n  if (bytes > 850) {\n    return `${(bytes/1024).toFixed(2)}KB`;\n  }\n  return `${bytes}B`;\n}\n\ncmd_parse.register({\n  cmd: 'texmem',\n  help: 'Displays texture memory usage',\n  func: function (str, resp_func) {\n    let keys = Object.keys(textures.textures);\n    keys = keys.filter((a) => textures.textures[a].gpu_mem > 1024);\n    keys.sort((a, b) => textures.textures[a].gpu_mem - textures.textures[b].gpu_mem);\n    resp_func(null, keys.map((a) => `${byteFormat(textures.textures[a].gpu_mem)} ${a}`).join('\\n'));\n  }\n});\n\ncmd_parse.register({\n  cmd: 'gpumem',\n  help: 'Displays GPU memory usage summary',\n  func: function (str, resp_func) {\n    let { gpu_mem } = engine.perf_state;\n    resp_func(null, `${byteFormat(gpu_mem.geom)} Geo\\n${byteFormat(gpu_mem.tex)} Tex\\n${\n      byteFormat(gpu_mem.geom + gpu_mem.tex)} Total`);\n  }\n});\n\ncmd_parse.register({\n  cmd: 'd',\n  help: 'Toggles a debug define',\n  func: function (str, resp_func) {\n    str = str.toUpperCase();\n    engine.defines[str] = !engine.defines[str];\n    resp_func(null, `D=${str} now ${engine.defines[str]?'SET':'unset'}`);\n    engine.definesChanged();\n  }\n});\n\ncmd_parse.register({\n  cmd: 'renderer',\n  help: 'Displays current renderer',\n  func: function (str, resp_func) {\n    resp_func(null, `Renderer=WebGL${engine.webgl2?2:1}`);\n  }\n});\n\nfunction cmdDesc(cmd_data) {\n  return `/${cmd_data.cmd} - ${cmd_data.help}`;\n}\n\ncmd_parse.register({\n  cmd: 'help',\n  help: 'Searches commands',\n  func: function (str, resp_func) {\n    let list = cmd_parse.autoComplete('', this && this.access);\n    if (str) {\n      let str_cname = cmd_parse.canonical(str);\n      let str_lc = str.toLowerCase();\n      list = list.filter((cmd_data) => cmd_data.cname.indexOf(str_cname) !== -1 ||\n          cmd_data.help.toLowerCase().indexOf(str_lc) !== -1);\n    }\n    if (!list.length) {\n      return void resp_func(null, `No commands found matching \"${str}\"`);\n    }\n    resp_func(null, list.map(cmdDesc).join('\\n'));\n  }\n});\n\nexport let safearea = [-1,-1,-1,-1];\ncmd_parse.registerValue('safe_area', {\n  label: 'Safe Area',\n  type: cmd_parse.TYPE_STRING,\n  usage: 'Safe Area value: Use -1 for auto based on browser environment,\\n' +\n    'or 0-25 for percentage of screen size\\n' +\n    '  Usage: /safe_area [value]\\n' +\n    '  Usage: /safe_area horizontal,vertical\\n' +\n    '  Usage: /safe_area left,right,top,bottom',\n  default_value: '-1',\n  get: () => (safearea[0] === -1 ? '-1 (auto)' : safearea.join(',')),\n  set: (v) => {\n    v = String(v);\n    let keys = v.split(',');\n    if (v && keys.length === 1) {\n      safearea[0] = safearea[1] = safearea[2] = safearea[3] = Number(v);\n    } else if (keys.length === 2) {\n      safearea[0] = safearea[1] = Number(keys[0]);\n      safearea[2] = safearea[3] = Number(keys[1]);\n    } else if (keys.length === 4) {\n      for (let ii = 0; ii < 4; ++ii) {\n        safearea[ii] = Number(keys[ii]);\n      }\n    } else {\n      // error, ignore?\n    }\n  },\n  store: true,\n});\n\ncmd_parse.register({\n  cmd: 'webgl2_auto',\n  help: 'Resets WebGL2 auto-detection',\n  func: function (str, resp_func) {\n    let disable_data = local_storage.getJSON('webgl2_disable');\n    if (!disable_data) {\n      return resp_func(null, 'WebGL2 is already being auto-detected');\n    }\n    local_storage.setJSON('webgl2_disable', undefined);\n    return resp_func(null, 'WebGL2 was disabled, will attempt to use it again on the next load');\n  },\n});\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst camera2d = require('./camera2d.js');\nconst engine = require('./engine.js');\nconst glov_input = require('./input.js');\nconst glov_ui = require('./ui.js');\n\nconst { focuslog } = glov_ui;\n\nclass GlovUIEditBox {\n  constructor(params) {\n    this.x = 0;\n    this.y = 0;\n    this.z = Z.UI; // actually in DOM, so above everything!\n    this.w = glov_ui.button_width;\n    this.type = 'text';\n    this.allow_modal = false;\n    // this.h = glov_ui.button_height;\n    this.font_height = glov_ui.font_height;\n    this.text = '';\n    this.placeholder = '';\n    this.max_len = 0;\n    this.initial_focus = false;\n    this.onetime_focus = false;\n    this.auto_unfocus = false;\n    this.initial_select = false;\n    this.spellcheck = true;\n    this.esc_clears = true;\n    this.applyParams(params);\n\n    this.is_focused = false;\n    this.elem = null;\n    this.input = null;\n    this.submitted = false;\n    this.pointer_lock = false;\n    this.last_frame = 0;\n  }\n  applyParams(params) {\n    if (!params) {\n      return;\n    }\n    for (let f in params) {\n      this[f] = params[f];\n    }\n  }\n  getText() {\n    return this.text;\n  }\n  setText(new_text) {\n    if (this.input) {\n      this.input.value = new_text;\n    }\n    this.text = new_text;\n  }\n  focus() {\n    if (this.input) {\n      this.input.focus();\n    } else {\n      this.onetime_focus = true;\n    }\n    glov_ui.focusSteal(this);\n    this.is_focused = true;\n    if (this.pointer_lock) {\n      glov_input.pointerLockExit();\n    }\n  }\n  unfocus() {\n    glov_ui.focusNext(this);\n  }\n  isFocused() { // call after .run()\n    return this.is_focused;\n  }\n\n  updateFocus() {\n    let was_glov_focused = this.is_focused;\n    let glov_focused = glov_ui.focusCheck(this);\n    let dom_focused = this.input && document.activeElement === this.input;\n    if (was_glov_focused !== glov_focused) {\n      // something external (from clicks/keys in GLOV) changed, apply it if it doesn't match\n      if (glov_focused && !dom_focused && this.input) {\n        focuslog('GLOV focused, DOM not, focusing', this);\n        this.input.focus();\n      }\n      if (!glov_focused && dom_focused) {\n        focuslog('DOM focused, GLOV not, and changed, blurring', this);\n        this.input.blur();\n      }\n    } else if (dom_focused && !glov_focused) {\n      focuslog('DOM focused, GLOV not, stealing', this);\n      glov_ui.focusSteal(this);\n      glov_focused = true;\n    } else if (!dom_focused && glov_focused) {\n      // Leave it alone, it may be a browser pop-up such as for passwords\n    }\n    let focused = glov_focused;\n\n    if (focused) {\n      let key_opt = (this.pointer_lock && !this.text) ? { in_event_cb: glov_input.pointerLockEnter } : null;\n      if (glov_input.keyUpEdge(glov_input.KEYS.ESC, key_opt)) {\n        if (this.text && this.esc_clears) {\n          this.setText('');\n        } else {\n          glov_ui.focusCanvas();\n          if (this.input) {\n            this.input.blur();\n          }\n          focused = false;\n          this.canceled = true;\n        }\n      }\n    }\n    this.is_focused = focused;\n    return focused;\n  }\n\n  run(params) {\n    this.applyParams(params);\n\n    if (this.last_frame !== engine.global_frame_index - 1) {\n      // it's been more than a frame, we must have not been running, discard async events\n      this.submitted = false;\n    }\n    this.last_frame = engine.global_frame_index;\n\n    this.canceled = false;\n    let focused = this.updateFocus();\n\n    glov_ui.this_frame_edit_boxes.push(this);\n    let elem = glov_ui.getElem(this.allow_modal, this.elem);\n    if (elem !== this.elem) {\n      if (elem) {\n        // new DOM element, initialize\n        elem.textContent = '';\n        let form = document.createElement('form');\n        form.setAttribute('autocomplete', 'off');\n        let input = document.createElement('input');\n        input.setAttribute('autocomplete', `auto_off_${Math.random()}`);\n        input.setAttribute('type', this.type);\n        input.setAttribute('placeholder', this.placeholder);\n        if (this.max_len) {\n          input.setAttribute('maxLength', this.max_len);\n        }\n        input.setAttribute('tabindex', 2);\n        form.addEventListener('submit', (ev) => {\n          ev.preventDefault();\n          this.submitted = true;\n          this.text = this.input.value;\n          if (this.pointer_lock && !this.text) {\n            glov_input.pointerLockEnter('edit_box_submit');\n          }\n        }, true);\n        form.appendChild(input);\n        let span = document.createElement('span');\n        span.setAttribute('tabindex', 3);\n        form.appendChild(span);\n        elem.appendChild(form);\n        input.value = this.text;\n        this.input = input;\n        if (this.initial_focus || this.onetime_focus) {\n          input.focus();\n          this.onetime_focus = false;\n        }\n        if (this.initial_select) {\n          input.select();\n        }\n      } else {\n        this.input = null;\n      }\n      this.submitted = false;\n      this.elem = elem;\n    } else {\n      if (this.input) {\n        this.text = this.input.value;\n      }\n    }\n    if (elem) {\n      let pos = camera2d.htmlPos(this.x, this.y);\n      if (!this.spellcheck) {\n        elem.spellcheck = false;\n      }\n      elem.style.left = `${pos[0]}%`;\n      elem.style.top = `${pos[1]}%`;\n      let size = camera2d.htmlSize(this.w, 0);\n      elem.style.width = `${size[0]}%`;\n      let old_fontsize = elem.style.fontSize || '?px';\n      let new_fontsize = `${camera2d.virtualToFontSize(this.font_height).toFixed(0)}px`;\n      if (new_fontsize !== old_fontsize) {\n        elem.style.fontSize = new_fontsize;\n      }\n    }\n\n    if (focused) {\n      if (this.auto_unfocus) {\n        if (glov_input.click({ peek: true })) {\n          glov_ui.focusSteal('canvas');\n        }\n      }\n      // keyboard input is handled by the INPUT element, but allow mouse events to trickle\n      glov_input.eatAllKeyboardInput();\n    }\n\n    if (this.submitted) {\n      this.submitted = false;\n      return this.SUBMIT;\n    }\n    if (this.canceled) {\n      this.canceled = false;\n      return this.CANCEL;\n    }\n    return null;\n  }\n  unrun() {\n    // remove from DOM or hide\n    this.elem = null;\n    this.input = null;\n  }\n}\nGlovUIEditBox.prototype.SUBMIT = 'submit';\nGlovUIEditBox.prototype.CANCEL = 'cancel';\n\nexport function create(params) {\n  return new GlovUIEditBox(params);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n// Some code from Turbulenz: Copyright (c) 2012-2013 Turbulenz Limited\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst engine = require('./engine.js');\nconst geom = require('./geom.js');\nconst shaders = require('./shaders.js');\nconst textures = require('./textures.js');\nconst { vec2, vec3, vec4, v4set } = require('./vmath.js');\n\nconst shader_data = {\n  vp_copy: {\n    vp: 'glov/shaders/effects_copy.vp',\n  },\n  copy: {\n    fp: 'glov/shaders/effects_copy.fp',\n  },\n  pixely_expand: {\n    fp: 'glov/shaders/pixely_expand.fp',\n  },\n  gaussian_blur: {\n    fp: 'glov/shaders/effects_gaussian_blur.fp',\n  },\n  // bloom_merge: {\n  //   fp: 'glov/shaders/effects_bloom_merge.fp',\n  // },\n  // bloom_threshold: {\n  //   fp: 'glov/shaders/effects_bloom_threshold.fp',\n  // },\n  color_matrix: {\n    fp: 'glov/shaders/effects_color_matrix.fp',\n  },\n  // distort: {\n  //   fp: 'glov/shaders/effects_distort.fp',\n  // },\n};\n\nexport function registerShader(key, obj) {\n  shader_data[key] = obj;\n}\n\nfunction getShader(key) {\n  let elem = shader_data[key];\n  if (!elem.shader) {\n    if (elem.fp) {\n      elem.shader = shaders.create(elem.fp);\n    } else {\n      elem.shader = shaders.create(elem.vp);\n    }\n  }\n  return elem.shader;\n}\n\n\nlet inited = false;\nlet clip_space = vec4(2, 2, -1, -1);\nlet copy_uv_scale = vec2(1, 1);\nlet shader_params_default = {\n  clip_space,\n  copy_uv_scale,\n};\n// let shader_params_distort;\nlet shader_params_color_matrix;\n// let shader_params_bloom;\n// let shader_params_bloom_merge;\nlet shader_params_gaussian_blur;\nlet shader_params_pixely_expand;\nlet quad_geom;\nfunction startup() {\n  inited = true;\n\n  quad_geom = geom.create(\n    [[shaders.semantic.POSITION, gl.FLOAT, 2, false]],\n    new Float32Array([\n      0, 0,\n      1, 0,\n      1, 1,\n      0, 1,\n    ]), null, geom.QUADS); // TODO: use gl.TRIANGLE_STRIP instead, save index buffer binding\n\n  // shader_params_distort = {\n  //   clip_space,\n  //   copy_uv_scale,\n  //   strength: vec2(0, 0),\n  //   transform: new Float32Array([0, 0, 0, 0, 0, 0]),\n  //   invTransform: vec4(0, 0, 0, 0),\n  // };\n\n  shader_params_color_matrix = {\n    clip_space,\n    copy_uv_scale,\n    colorMatrix: new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n  };\n\n  // shader_params_bloom = {\n  //   clip_space,\n  //   copy_uv_scale,\n  //   bloomThreshold: 0,\n  //   thresholdCuttoff: 0,\n  // };\n\n  // shader_params_bloom_merge = {\n  //   clip_space,\n  //   copy_uv_scale,\n  //   bloomIntensity: 0,\n  //   bloomSaturation: 0,\n  //   originalIntensity: 0,\n  //   originalSaturation: 0,\n  // };\n\n  // Gaussian Blur effect (also used by bloom)\n  shader_params_gaussian_blur = {\n    clip_space,\n    copy_uv_scale,\n    sampleRadius: vec3(1, 1, 1),\n    Gauss: new Float32Array([0.93, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]),\n  };\n\n  shader_params_pixely_expand = {\n    clip_space,\n    copy_uv_scale,\n    orig_pixel_size: vec4(),\n  };\n}\n\nexport function grayScaleMatrix(dst) {\n  dst[0] = 0.2126;\n  dst[1] = 0.2126;\n  dst[2] = 0.2126;\n  dst[3] = 0.7152;\n  dst[4] = 0.7152;\n  dst[5] = 0.7152;\n  dst[6] = 0.0722;\n  dst[7] = 0.0722;\n  dst[8] = 0.0722;\n  dst[9] = dst[10] = dst[11] = 0;\n}\n\nexport function sepiaMatrix(dst) {\n  dst[0] = 0.393;\n  dst[1] = 0.349;\n  dst[2] = 0.272;\n  dst[3] = 0.769;\n  dst[4] = 0.686;\n  dst[5] = 0.534;\n  dst[6] = 0.189;\n  dst[7] = 0.168;\n  dst[8] = 0.131;\n  dst[9] = dst[10] = dst[11] = 0;\n}\n\nexport function negativeMatrix(dst) {\n  dst[0] = dst[4] = dst[8] = -1;\n  dst[1] = dst[2] = dst[3] = dst[5] = dst[6] = dst[7] = 0;\n  dst[9] = dst[10] = dst[11] = 1;\n}\n\nexport function saturationMatrix(dst, saturationScale) {\n  let is = (1 - saturationScale);\n  dst[0] = (is * 0.2126) + saturationScale;\n  dst[1] = (is * 0.2126);\n  dst[2] = (is * 0.2126);\n  dst[3] = (is * 0.7152);\n  dst[4] = (is * 0.7152) + saturationScale;\n  dst[5] = (is * 0.7152);\n  dst[6] = (is * 0.0722);\n  dst[7] = (is * 0.0722);\n  dst[8] = (is * 0.0722) + saturationScale;\n  dst[9] = dst[10] = dst[11] = 0;\n}\n\nexport function hueMatrix(dst, angle) {\n  ////\n  //// Uncomment to calculate new coeffecients should luminance\n  //// values 0.2126 0.7152 0.0722 change.\n  //let lumR = 0.2126;\n  //let lumG = 0.7152;\n  //let lumB = 0.0722;\n  ////\n  //let r23 = Math.sqrt(2 / 3);\n  //let r12 = 1 / Math.sqrt(2);\n  //let r13 = 1 / Math.sqrt(3);\n  //let r16 = 1 / Math.sqrt(6);\n  //let M = [r23, 0, r13, -r16, r12, r13, -r16, -r12, r13, 0, 0, 0];\n  //let zx = (r23 * lumR) - (r16 * lumG) - (r16 * lumB);\n  //let zy =                (r12 * lumG) - (r12 * lumB);\n  //let zz = (r13 * lumR) + (r13 * lumG) + (r13 * lumB);\n  //let x = zx / zz;\n  //let y = zy / zz;\n  //let C = [1, 0, x, 0, 1, y, 0, 0, 1, 0, 0, 0];\n  //m43mul(M, M, C);\n  //console.log(\"Pre transform = \", M);\n  //let E = [1, 0, -x, 0, 1, -y, 0, 0, 1, 0, 0, 0];\n  //let N = [r23, -r16, -r16, 0, r12, -r12, r13, r13, r13, 0, 0, 0];\n  //m43mul(N, E, N);\n  //console.log(\"Post transform = \", N);\n  ////\n  //// Final matrix is then: m43Mul(Pre, [c, s, 0, -s, c, 0, 0, 0, 1, 0, 0, 0, ], Post);\n  //// for c = cos(angle), s = sin(angle)\n  ////\n  //let out = \"\";\n  //out += \"let c = Math.cos(angle);\\n\";\n  //out += \"let s = Math.sin(angle);\\n\";\n  //out += \"dst[0] = (\" + (N[0]*M[0]+N[3]*M[1]) + \" * c) + (\" + (N[3]*M[0]-N[0]*M[1]) + \" * s) + \" + lumR+\";\\n\";\n  //out += \"dst[1] = (\" + (-lumR)               + \" * c) + (\" + (N[4]*M[0]-N[1]*M[1]) + \" * s) + \" + lumR+\";\\n\";\n  //out += \"dst[2] = (\" + (-lumR)               + \" * c) + (\" + (N[5]*M[0]-N[2]*M[1]) + \" * s) + \" + lumR+\";\\n\";\n  //out += \"dst[3] = (\" + (-lumG)               + \" * c) + (\" + (N[3]*M[3]-N[0]*M[4]) + \" * s) + \" + lumG+\";\\n\";\n  //out += \"dst[4] = (\" + (N[1]*M[3]+N[4]*M[4]) + \" * c) + (\" + (N[4]*M[3]-N[1]*M[4]) + \" * s) + \" + lumG+\";\\n\";\n  //out += \"dst[5] = (\" + (-lumG)               + \" * c) + (\" + (N[5]*M[3]-N[2]*M[4]) + \" * s) + \" + lumG+\";\\n\";\n  //out += \"dst[6] = (\" + (-lumB)               + \" * c) + (\" + (N[3]*M[6]-N[0]*M[7]) + \" * s) + \" + lumB+\";\\n\";\n  //out += \"dst[7] = (\" + (-lumB)               + \" * c) + (\" + (N[4]*M[6]-N[1]*M[7]) + \" * s) + \" + lumB+\";\\n\";\n  //out += \"dst[8] = (\" + (N[2]*M[6]+N[5]*M[7]) + \" * c) + (\" + (N[5]*M[6]-N[2]*M[7]) + \" * s) + \" + lumB+\";\\n\";\n  //console.log(out);\n  let c = Math.cos(angle);\n  let s = Math.sin(angle);\n  dst[0] = (0.7874 * c) + (-0.3712362230889293 * s) + 0.2126;\n  dst[1] = (-0.2126 * c) + (0.20611404610069642 * s) + 0.2126;\n  dst[2] = (-0.2126 * c) + (-0.9485864922785551 * s) + 0.2126;\n  dst[3] = (-0.7152 * c) + (-0.4962902913954023 * s) + 0.7152;\n  dst[4] = (0.2848 * c) + (0.08105997779422341 * s) + 0.7152;\n  dst[5] = (-0.7152 * c) + (0.6584102469838492 * s) + 0.7152;\n  dst[6] = (-0.0722 * c) + (0.8675265144843316 * s) + 0.0722;\n  dst[7] = (-0.0722 * c) + (-0.28717402389491986 * s) + 0.0722;\n  dst[8] = (0.9278 * c) + (0.290176245294706 * s) + 0.0722;\n  dst[9] = dst[10] = dst[11] = 0;\n}\n\nexport function brightnessAddMatrix(dst, brightnessOffset) {\n  dst[0] = dst[4] = dst[8] = 1;\n  dst[1] = dst[2] = dst[3] = dst[5] = dst[6] = dst[7] = 0;\n  dst[9] = dst[10] = dst[11] = brightnessOffset;\n}\n\nexport function brightnessScaleMatrix(dst, scale) {\n  dst[0] = dst[4] = dst[8] = scale;\n  dst[1] = dst[2] = dst[3] = dst[5] = dst[6] = dst[7] = 0;\n  dst[9] = dst[10] = dst[11] = 0;\n}\n\nexport function additiveMatrix(dst, additiveRGB) {\n  dst[0] = dst[4] = dst[8] = 1;\n  dst[1] = dst[2] = dst[3] = dst[5] = dst[6] = dst[7] = 0;\n  dst[9] = additiveRGB[0];\n  dst[10] = additiveRGB[1];\n  dst[11] = additiveRGB[2];\n}\n\nexport function contrastMatrix(dst, contrastScale) {\n  dst[0] = dst[4] = dst[8] = contrastScale;\n  dst[1] = dst[2] = dst[3] = dst[5] = dst[6] = dst[7] = 0;\n  dst[9] = dst[10] = dst[11] = 0.5 * (1 - contrastScale);\n}\n\n// effect: { shader, params, texs }\nfunction applyEffect(effect, view_w, view_h) {\n  let viewport = engine.viewport;\n  let target_w = viewport[2];\n  let target_h = viewport[3];\n  view_w = view_w || target_w;\n  view_h = view_h || target_h;\n\n  // Set values for parameters used by all effects\n  clip_space[0] = 2.0 * view_w / target_w;\n  clip_space[1] = 2.0 * view_h / target_h;\n  // clip_space[2] = -1.0;\n  // clip_space[3] = -1.0;\n  // copy_uv_scale[0] = target_w / effect.coord_source.width;\n  // copy_uv_scale[1] = target_h / effect.coord_source.height;\n\n  shaders.bind(getShader('vp_copy'), getShader(effect.shader), effect.params);\n  textures.bindArray(effect.texs);\n  quad_geom.draw();\n}\n\n// // TODO: Update for RTBBCTT and port to new GLOV.js\n// function applyBloomTODO(params) {\n//   let source = params.source;\n//   let blur1 = params.blurTarget1;\n//   let blur2 = params.blurTarget2;\n//   let dest = params.destination;\n//   if (!source || !dest || !blur1 || !blur2 || !blur1.colorTexture0 ||\n//     !blur2.colorTexture0 || blur1 === blur2 || blur1 === dest ||\n//     source === blur1.colorTexture0 || source === dest.colorTexture0) {\n//     return false;\n//   }\n//\n//   let effectParams = this.effectParams;\n//   let techparams;\n//\n//   // Threshold copy.\n//   techparams = this.bloomThresholdParameters;\n//   effectParams.technique = this.bloomThresholdTechnique;\n//   effectParams.params = techparams;\n//\n//   techparams.bloomThreshold = (params.bloomThreshold !== undefined) ? params.bloomThreshold : 0.65;\n//   techparams.thresholdCutoff = Math.exp((params.thresholdCutoff !== undefined) ? params.thresholdCutoff : 3);\n//   techparams.inputTexture0 = source;\n//   effectParams.destination = blur1;\n//   this.applyEffect(effectParams);\n//\n//   // Gaussian blur.\n//   techparams = this.gaussianBlurParameters;\n//   effectParams.technique = this.gaussianBlurTechnique;\n//   effectParams.params = techparams;\n//\n//   let sampleRadius = (params.blurRadius || 20);\n//   techparams.sampleRadius[0] = sampleRadius / source.width;\n//   techparams.sampleRadius[1] = 0;\n//   techparams.sampleRadius[2] = 1;\n//   techparams.inputTexture0 = blur1.colorTexture0;\n//   effectParams.destination = blur2;\n//   this.applyEffect(effectParams);\n//\n//   techparams.sampleRadius[0] = 0;\n//   techparams.sampleRadius[1] = sampleRadius / source.height;\n//   techparams.sampleRadius[2] = 1;\n//   techparams.inputTexture0 = blur2.colorTexture0;\n//   effectParams.destination = blur1;\n//   this.applyEffect(effectParams);\n//\n//   // Merge.\n//   techparams = this.bloomMergeParameters;\n//   effectParams.technique = this.bloomMergeTechnique;\n//   effectParams.params = techparams;\n//\n//   techparams.bloomIntensity = (params.bloomIntensity !== undefined) ? params.bloomIntensity : 1.2;\n//   techparams.bloomSaturation = (params.bloomSaturation !== undefined) ? params.bloomSaturation : 1.2;\n//   techparams.originalIntensity = (params.originalIntensity !== undefined) ? params.originalIntensity : 1.0;\n//   techparams.originalSaturation = (params.originalSaturation !== undefined) ? params.originalSaturation : 1.0;\n//   techparams.inputTexture0 = source;\n//   techparams.inputTexture1 = blur1.colorTexture0;\n//   effectParams.destination = dest;\n//   this.applyEffect(effectParams);\n//\n//   return true;\n// }\n\nexport function applyCopy(params) {\n  if (!inited) {\n    startup();\n  }\n  applyEffect({\n    shader: params.shader || 'copy',\n    params: shader_params_default,\n    texs: [params.source],\n  });\n}\n\nexport function applyPixelyExpand(params) {\n  if (!inited) {\n    startup();\n  }\n  let source = params.source;\n  source.setSamplerState({\n    filter_min: gl.LINEAR,\n    filter_mag: gl.LINEAR,\n    wrap_s: gl.CLAMP_TO_EDGE,\n    wrap_t: gl.CLAMP_TO_EDGE,\n  });\n\n  // do horizontal blur for primary lines\n  let resx = source.width;\n  let resy = source.height;\n  let sampleRadius = (params.hblur || 0.25) / resx;\n  shader_params_gaussian_blur.sampleRadius[0] = sampleRadius;\n  shader_params_gaussian_blur.sampleRadius[1] = 0;\n  shader_params_gaussian_blur.sampleRadius[2] = 1;\n  applyEffect({\n    shader: 'gaussian_blur',\n    params: shader_params_gaussian_blur,\n    texs: [source],\n  }, resx, resy);\n  let hblur = engine.captureFramebuffer(null, resx, resy, true, false);\n\n  // do seperable gaussian blur for scanlines (using horizontal blur from above)\n  sampleRadius = (params.vblur || 0.75) / resy;\n  shader_params_gaussian_blur.sampleRadius[0] = 0;\n  shader_params_gaussian_blur.sampleRadius[1] = sampleRadius;\n  shader_params_gaussian_blur.sampleRadius[2] = 1;\n  applyEffect({\n    shader: 'gaussian_blur',\n    params: shader_params_gaussian_blur,\n    texs: [hblur],\n  }, resx, resy);\n  let vblur = engine.captureFramebuffer(null, resx, resy, true, false);\n\n  // combine at full res\n  v4set(shader_params_pixely_expand.orig_pixel_size,\n    source.width, source.height, 1/source.width, 1/source.height);\n\n  engine.setViewport(params.final_viewport);\n  if (params.clear_color) {\n    gl.clearColor(params.clear_color[0], params.clear_color[1], params.clear_color[2], params.clear_color[3]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  applyEffect({\n    shader: 'pixely_expand',\n    params: shader_params_pixely_expand,\n    texs: [source, hblur, vblur],\n  });\n}\n\nexport function applyGaussianBlur(params) {\n  if (!inited) {\n    startup();\n  }\n  let source = params.source;\n  source.setSamplerState({\n    filter_min: gl.LINEAR,\n    filter_mag: gl.LINEAR,\n    wrap_s: gl.CLAMP_TO_EDGE,\n    wrap_t: gl.CLAMP_TO_EDGE,\n  });\n  let max_size = params.max_size || 512;\n  let min_size = params.min_size || 128;\n\n  // Quick shrink down to 512->256->128 (or other specified min/max size)\n  let inputTexture0 = source;\n\n  let viewport = engine.viewport;\n  let res = max_size;\n  while (res > viewport[2] || res > viewport[3]) {\n    res /= 2;\n  }\n\n  while (res > min_size) {\n    applyEffect({\n      shader: params.shader_copy || 'copy',\n      params: shader_params_default,\n      texs: [inputTexture0],\n    }, res, res);\n    inputTexture0 = engine.captureFramebuffer(null, res, res, true, false);\n    res /= 2;\n  }\n\n  // Do seperable blur\n  let sampleRadius = (params.blur || 1) / res;\n  shader_params_gaussian_blur.sampleRadius[0] = sampleRadius;\n  shader_params_gaussian_blur.sampleRadius[1] = 0;\n  shader_params_gaussian_blur.sampleRadius[2] = params.glow || 1;\n  applyEffect({\n    shader: 'gaussian_blur',\n    params: shader_params_gaussian_blur,\n    texs: [inputTexture0],\n  }, res, res);\n  let blur = engine.captureFramebuffer(null, res, res, true, false);\n\n  shader_params_gaussian_blur.sampleRadius[0] = 0;\n  shader_params_gaussian_blur.sampleRadius[1] = sampleRadius;\n  shader_params_gaussian_blur.sampleRadius[2] = params.glow || 1;\n  applyEffect({\n    shader: 'gaussian_blur',\n    params: shader_params_gaussian_blur,\n    texs: [blur],\n  });\n\n  return true;\n}\n\nexport function applyColorMatrix(params) {\n  if (!inited) {\n    startup();\n  }\n  let source = params.source;\n  source.setSamplerState({\n    filter_min: gl.LINEAR,\n    filter_mag: gl.LINEAR,\n    wrap_s: gl.CLAMP_TO_EDGE,\n    wrap_t: gl.CLAMP_TO_EDGE,\n  });\n\n  let matrix = params.colorMatrix;\n  let mout = shader_params_color_matrix.colorMatrix;\n\n  mout[0] = matrix[0];\n  mout[1] = matrix[3];\n  mout[2] = matrix[6];\n  mout[3] = matrix[9];\n  mout[4] = matrix[1];\n  mout[5] = matrix[4];\n  mout[6] = matrix[7];\n  mout[7] = matrix[10];\n  mout[8] = matrix[2];\n  mout[9] = matrix[5];\n  mout[10] = matrix[8];\n  mout[11] = matrix[11];\n\n  applyEffect({\n    shader: 'color_matrix',\n    params: shader_params_color_matrix,\n    texs: [source],\n  });\n\n  return true;\n}\n\n// // TODO: Update for RTBBCTT and port to new GLOV.js\n// export function applyDistortTODO(params) {\n//   let source = params.source;\n//   let dest = params.destination;\n//   let distort = params.distortion;\n//   if (!source || !dest || !distort || !dest.colorTexture0 ||\n//     source === dest.colorTexture0 || distort === dest.colorTexture0) {\n//     return false;\n//   }\n//\n//   // input transform.\n//   //  a b tx\n//   //  c d ty\n//   let a;\n//   let b;\n//   let c;\n//   let d;\n//   let tx;\n//   let ty;\n//\n//   let transform = params.transform;\n//   if (transform) {\n//     // transform col-major.\n//     a = transform[0];\n//     b = transform[2];\n//     tx = transform[4];\n//     c = transform[1];\n//     d = transform[3];\n//     ty = transform[5];\n//   } else {\n//     a = d = 1;\n//     b = c = 0;\n//     tx = ty = 0;\n//   }\n//\n//   let effectParams = this.effectParams;\n//   let techparams = this.distortParameters;\n//   effectParams.technique = this.distortTechnique;\n//   effectParams.params = techparams;\n//\n//   // TODO: Cache 'transform', 'invTransform', etc in the code below\n//   techparams.transform[0] = a;\n//   techparams.transform[1] = b;\n//   techparams.transform[2] = tx;\n//   techparams.transform[3] = c;\n//   techparams.transform[4] = d;\n//   techparams.transform[5] = ty;\n//\n//   // Compute inverse transform to use in distort texture displacement..\n//   let idet = 1 / (a * d - b * c);\n//   let ia = techparams.invTransform[0] = (idet * d);\n//   let ib = techparams.invTransform[1] = (idet * -b);\n//   let ic = techparams.invTransform[2] = (idet * -c);\n//   let id = techparams.invTransform[3] = (idet * a);\n//\n//   // Compute max pixel offset after transform for normalisation.\n//   let x1 = ((ia + ib) * (ia + ib)) + ((ic + id) * (ic + id));\n//   let x2 = ((ia - ib) * (ia - ib)) + ((ic - id) * (ic - id));\n//   let x3 = ((-ia + ib) * (-ia + ib)) + ((-ic + id) * (-ic + id));\n//   let x4 = ((-ia - ib) * (-ia - ib)) + ((-ic - id) * (-ic - id));\n//   let xmax = 0.5 * Math.sqrt(Math.max(x1, x2, x3, x4));\n//\n//   let strength = (params.strength || 10);\n//   techparams.strength[0] = strength / (source.width * xmax);\n//   techparams.strength[1] = strength / (source.height * xmax);\n//\n//   techparams.inputTexture0 = source;\n//   techparams.distortTexture = distort; // linear / repeat\n//   effectParams.destination = dest;\n//   this.applyEffect(effectParams);\n//\n//   return true;\n// }\n\nexport function clearAlpha() {\n  let old_dt = gl.getParameter(gl.DEPTH_TEST);\n  if (old_dt) {\n    gl.disable(gl.DEPTH_TEST);\n  }\n  gl.colorMask(false, false, false, true);\n  applyCopy({ source: textures.textures.white });\n  gl.colorMask(true, true, true, true);\n  if (old_dt) {\n    gl.enable(gl.DEPTH_TEST);\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint-env browser */\n\nrequire('./bootstrap.js'); // Just in case it's not in app.js\n\nexport let DEBUG = String(document.location).match(/^https?:\\/\\/localhost/);\n\nrequire('not_worker'); // This module cannot be required from a worker bundle\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst cmds = require('./cmds.js');\nconst effects = require('./effects.js');\nconst glov_font = require('./font.js');\nconst font_info_palanquin32 = require('../img/font/palanquin32.json');\nconst geom = require('./geom.js');\nconst input = require('./input.js');\nconst local_storage = require('./local_storage.js');\nconst mat3FromMat4 = require('gl-mat3/fromMat4');\nconst mat4Copy = require('gl-mat4/copy');\nconst mat4Invert = require('gl-mat4/invert');\nconst mat4Mul = require('gl-mat4/multiply');\nconst mat4Transpose = require('gl-mat4/transpose');\nconst mat4Perspective = require('gl-mat4/perspective');\nconst { asin, cos, floor, min, max, PI, round, sin, sqrt } = Math;\nconst models = require('./models.js');\nconst perf = require('./perf.js');\nconst settings = require('./settings.js');\nconst shaders = require('./shaders.js');\nconst { soundLoading, soundStartup, soundTick } = require('./sound.js');\nconst sprites = require('./sprites.js');\nconst textures = require('./textures.js');\nconst { texturesTick } = textures;\nconst glov_transition = require('./transition.js');\nconst glov_ui = require('./ui.js');\nconst urlhash = require('./urlhash.js');\nconst { clamp, defaults, nearSame, ridx } = require('../../common/util.js');\nconst { mat3, mat4, vec3, vec4, v3mulMat4, v3iNormalize, v4copy, v4same, v4set } = require('./vmath.js');\n\nexport let canvas;\nexport let webgl2;\nexport let glov_particles;\n\nexport let width;\nexport let height;\nexport let pixel_aspect = 1;\nexport let antialias;\n\nexport let game_width;\nexport let game_height;\n\nexport let render_width;\nexport let render_height;\n\n//eslint-disable-next-line no-use-before-define\nexport let defines = urlhash.register({ key: 'D', type: urlhash.TYPE_SET, change: definesChanged });\n\nexport let any_3d = false;\nexport let ZFAR;\nexport let ZNEAR;\nexport let fov_y = 1;\nexport let fov_x = 1;\nexport let fov_min = 60 * PI / 180;\n\nexport let mat_projection = mat4();\nexport let mat_view = mat4();\nlet mat_m = mat4();\nexport let mat_vp = mat4();\nlet mat_mv = mat4();\nlet mat_mv_no_skew = mat4();\nlet mat_mvp = mat4();\nlet mat_mv_inv_transform = mat3();\nlet mat_inv_view = mat3();\nlet projection_inverse = vec4();\n\nexport let light_diffuse = vec3(0.75, 0.75, 0.75);\nlet light_dir_vs = vec3(0, 0, 0);\nexport let light_ambient = vec3(0.25, 0.25, 0.25);\nexport let light_dir_ws = vec3(-1, -2, -3);\n\nexport let font;\nexport let app_state = null;\nexport const border_color = vec4(0, 0, 0, 1);\n\nlet mat_temp = mat4();\nexport function setGlobalMatrices(_mat_view) {\n  mat4Copy(mat_view, _mat_view);\n  mat4Mul(mat_vp, mat_projection, mat_view);\n  v3iNormalize(light_dir_ws);\n  v3mulMat4(light_dir_vs, light_dir_ws, mat_view);\n  mat4Invert(mat_temp, mat_view);\n  mat3FromMat4(mat_inv_view, mat_temp);\n}\n\nexport function setFOV(new_fov) {\n  fov_min = new_fov;\n}\n\nexport function setGameDims(w, h) {\n  game_width = w;\n  game_height = h;\n}\n\nlet is_ios_safari = (function () {\n  let ua = window.navigator.userAgent;\n  let is_ios = ua.match(/iPad/i) || ua.match(/iPhone/i);\n  let webkit = ua.match(/WebKit/i);\n  return is_ios && webkit && !ua.match(/CriOS/i);\n}());\n\n// Didn't need this for a while, but got slow on iOS recently :(\nconst postprocessing_reset_version = '3';\nexport let postprocessing = local_storage.get('glov_no_postprocessing') !== postprocessing_reset_version;\nexport function postprocessingAllow(allow) {\n  local_storage.set('glov_no_postprocessing', allow ? undefined : postprocessing_reset_version);\n  postprocessing = allow;\n}\n\nexport function glCheckError() {\n  let gl_err = gl.getError();\n  if (gl_err) {\n    console.error(gl_err);\n    throw new Error(gl_err);\n  }\n}\n\nexport function releaseCanvas() {\n  try {\n    if (gl) {\n      let ext = gl.getExtension('WEBGL_lose_context');\n      if (ext) {\n        ext.loseContext();\n      }\n    }\n  } catch (ignored) {\n    // nothing, it's fine\n  }\n}\n\nlet error_report_disabled = false;\nexport function reloadSafe() {\n  // Do not report any errors after this point\n  error_report_disabled = true;\n  // Release canvas to not leak memory on Firefox\n  releaseCanvas();\n  document.location.reload();\n}\nwindow.reloadSafe = reloadSafe;\n\nlet reloading_defines = {};\nexport function defineCausesReload(define) {\n  reloading_defines[define] = defines[define];\n}\ndefineCausesReload('FORCEWEBGL2');\ndefineCausesReload('NOWEBGL2');\nexport function definesChanged() {\n  for (let key in reloading_defines) {\n    if (defines[key] !== reloading_defines[key]) {\n      urlhash.onURLChange(reloadSafe);\n      break;\n    }\n  }\n  shaders.handleDefinesChanged();\n}\n\nfunction normalizeRow(m, idx) {\n  let len = m[idx]*m[idx] + m[idx+1]*m[idx+1] + m[idx+2]*m[idx+2];\n  if (len > 0) {\n    len = 1 / sqrt(len);\n    m[idx] *= len;\n    m[idx+1] *= len;\n    m[idx+2] *= len;\n  }\n}\n\nexport function updateMatrices(mat_model) {\n  // PERFTODO: depending on rendering path, only some of these are needed (m + vp or just mvp)\n  mat4Copy(mat_m, mat_model);\n\n  mat4Mul(mat_mv, mat_view, mat_model);\n  mat4Mul(mat_mvp, mat_projection, mat_mv);\n  // TODO: Can expand and simplify all of this, especially below\n  // Compute the inverse transform of thee model_view matrix, discarding scale,\n  // to be used for getting normals into view space\n  mat4Copy(mat_temp, mat_model);\n  normalizeRow(mat_temp, 0);\n  normalizeRow(mat_temp, 4);\n  normalizeRow(mat_temp, 8);\n  mat4Mul(mat_mv_no_skew, mat_view, mat_temp);\n  mat4Invert(mat_temp, mat_mv_no_skew);\n  mat4Transpose(mat_temp, mat_temp);\n  mat3FromMat4(mat_mv_inv_transform, mat_temp);\n}\nexport let global_timer = 0;\nexport function getFrameTimestamp() {\n  return global_timer;\n}\n\nexport let global_frame_index = 0;\nexport function getFrameIndex() {\n  return global_frame_index;\n}\n\nexport let this_frame_time = 0;\nexport function getFrameDt() {\n  return this_frame_time;\n}\n\nexport let hrtime = 0;\n\n// Wall time, may contain large jumps, may be 0 or negative\nlet this_frame_time_actual = 0;\nexport function getFrameDtActual() {\n  return this_frame_time_actual;\n}\n\nlet after_loading_state = null;\nexport let is_loading = true;\nexport function setState(new_state) {\n  if (is_loading) {\n    after_loading_state = new_state;\n  } else {\n    app_state = new_state;\n  }\n}\n\nexport function stateActive(test_state) {\n  if (is_loading) {\n    return after_loading_state === test_state;\n  } else {\n    return app_state === test_state;\n  }\n}\n\nlet mspf = 1000;\nlet mspf_update_time = 0;\nlet mspf_frame_count = 0;\nlet last_tick_cpu = 0;\nlet mspf_tick = 1000;\n// let net_time = 1000;\nlet mspf_tick_accum = 0;\n// let net_time_accum = 0;\nexport const PERF_HISTORY_SIZE = 128;\nexport let perf_state = window.glov_perf_state = {\n  fpsgraph: {\n    index: 0,\n    history: new Float32Array(PERF_HISTORY_SIZE * 2),\n  },\n  gpu_mem: {\n    tex: 0,\n    geom: 0,\n  },\n};\nlet fpsgraph = perf_state.fpsgraph;\n\nperf.addMetric({\n  name: 'fps',\n  show_stat: 'show_fps', // always, if we're showing any metrics\n  show_graph: 'fps_graph',\n  labels: {\n    'fps: ': () => (1000 / mspf).toFixed(1),\n    'ms/f: ': () => mspf.toFixed(0),\n    'cpu: ': () => mspf_tick.toFixed(0),\n    // 'net: ': () => net_time.toFixed(0),\n  },\n  data: fpsgraph, // contain .index and .history (stride of colors.length)\n  line_scale_top: 50,\n  colors: [\n    // vec4(0.161, 0.678, 1, 1), // net time\n    vec4(1, 0.925, 0.153, 1), // cpu/tick time\n    vec4(0, 0.894, 0.212, 1), // total time (GPU)\n  ],\n  interactable: DEBUG,\n});\n\nlet do_borders = true;\nlet do_viewport_postprocess = false;\nlet need_repos = 0;\n\nexport function resizing() {\n  return need_repos;\n}\n\nlet app_tick_functions = [];\nexport function addTickFunc(cb) {\n  app_tick_functions.push(cb);\n}\n\nlet post_tick = [];\nexport function postTick(opts) {\n  opts.ticks = opts.ticks || 1; // run in how many ticks?\n  opts.inactive = opts.inactive || false; // run even if inactive?\n  assert.equal(typeof opts.fn, 'function');\n  post_tick.push(opts);\n}\n\nlet temporary_textures = {};\n\nfunction resetEffects() {\n  for (let key in temporary_textures) {\n    let temp = temporary_textures[key];\n    // Release unused textures\n    while (temp.list.length > temp.idx) {\n      temp.list.pop().destroy();\n    }\n    if (!temp.idx) {\n      delete temporary_textures[key];\n    } else {\n      temp.idx = 0;\n    }\n  }\n}\n\nconst SAFARI_FULLSCREEN_ASPECT = (function () {\n  let screen = window.screen;\n  if (!is_ios_safari || !screen) {\n    return 0;\n  }\n  const SAFARI_DIMS = { // wxh : [fullscreen aspect]\n    // iPhone XR\n    // iPhone 11 Pro Max\n    // iPhone XS Max\n    // iPhone 11\n    '896,414': 896/414,\n    // iPhone 11 Pro\n    // iPhone X (probably)\n    '812,375': 812/375,\n    // iPhone 8 Plus\n    '736,414': 736/414,\n    // iPhone 6s+\n    // iPhone 6+\n    '716,414': 736/414, // (screen.availWidth reports 20 less)\n    // iPhone 8\n    // iPhone 7 (10.1)\n    // iPhone 7 (11.4)\n    '667,375': 667/375,\n    // iPhone 6s\n    // iPhone 6\n    '647,375': 667/375, // (screen.availWidth reports 20 less)\n    // iPhone 5s\n    '548,320': 568/320, // (screen.availWidth reports 20 less)\n  };\n  let key = `${max(screen.availWidth, screen.availHeight)},${min(screen.availWidth, screen.availHeight)}`;\n  return SAFARI_DIMS[key] || 0;\n}());\nfunction safariTopSafeArea(view_w, view_h) {\n  // Detect if the URL bar is hidden, but should be a safe area\n  if (SAFARI_FULLSCREEN_ASPECT && nearSame(view_w/view_h, SAFARI_FULLSCREEN_ASPECT, 0.001)) {\n    // Note: if user has scaling enabled, the padding required might be different\n    //   but the same holds true for the safe area padding detected via CSS!\n    return 50 * (window.devicePixelRatio || 1); // seems to be 50pts on all devices\n  }\n  return 0;\n}\n\n\nlet last_canvas_width;\nlet last_canvas_height;\nlet last_body_height;\nlet safearea_elem;\nlet safearea_ignore_bottom = false;\nlet safearea_values = [0,0,0,0];\nlet last_safearea_values = [0,0,0,0];\nfunction checkResize() {\n  // use VisualViewport on at least iOS Safari - deal with tabs and keyboard\n  //   shrinking the viewport without changing the window height\n  let vv = window.visualViewport || {};\n  let css_to_real = window.devicePixelRatio || 1;\n  let view_w = (vv.width || window.innerWidth);\n  let view_h = (vv.height || window.innerHeight);\n  if (view_h !== last_body_height) {\n    // set this *before* getting canvas and safearea_elem dims below\n    last_body_height = view_h;\n    document.body.style.height = `${view_h}px`;\n  }\n  let new_width = round(canvas.clientWidth * css_to_real) || 1;\n  let new_height = round(canvas.clientHeight * css_to_real) || 1;\n\n  if (cmds.safearea[0] === -1) {\n    if (safearea_elem) {\n      let sa_width = safearea_elem.offsetWidth;\n      let sa_height = safearea_elem.offsetHeight;\n      if (sa_width && sa_height) {\n        v4set(safearea_values,\n          safearea_elem.offsetLeft * css_to_real,\n          new_width - (sa_width + safearea_elem.offsetLeft) * css_to_real,\n          max(safearea_elem.offsetTop * css_to_real, safariTopSafeArea(view_w, view_h)),\n          // Note: Possibly ignoring bottom safe area, it seems not useful on iPhones (does not\n          //  adjust when keyboard is up, only obscured in the middle, if obeying left/right safe area)\n          safearea_ignore_bottom ? 0 : new_height - (sa_height + safearea_elem.offsetTop) * css_to_real);\n      }\n    }\n  } else {\n    v4set(safearea_values,\n      new_width * clamp(cmds.safearea[0], 0, 25)/100,\n      new_width * clamp(cmds.safearea[1], 0, 25)/100,\n      new_height * clamp(cmds.safearea[2], 0, 25)/100,\n      new_height * clamp(cmds.safearea[3], 0, 25)/100);\n  }\n  if (!v4same(safearea_values, last_safearea_values)) {\n    v4copy(last_safearea_values, safearea_values);\n    camera2d.setSafeAreaPadding(safearea_values[0], safearea_values[1], safearea_values[2], safearea_values[3]);\n    need_repos = max(need_repos, 1);\n  }\n\n  if (new_width !== last_canvas_width || new_height !== last_canvas_height) {\n    window.pixel_scale = css_to_real; // for debug\n    last_canvas_width = canvas.width = new_width || 1;\n    last_canvas_height = canvas.height = new_height || 1;\n    // For the next 10 frames, make sure font size is correct\n    need_repos = 10;\n  }\n  if (is_ios_safari && (window.visualViewport || need_repos)) {\n    // we have accurate view information, or screen was just rotated / resized\n    // force scroll to top\n    window.scroll(0,0);\n  }\n}\n\nexport let viewport = vec4(0,0,1,1);\nexport function setViewport(xywh) {\n  v4copy(viewport, xywh);\n  gl.viewport(xywh[0], xywh[1], xywh[2], xywh[3]);\n}\n\nlet last_temp_idx = 0;\nexport function getTemporaryTexture(w, h) {\n  let key = w ? `${w}_${h}` : 'screen';\n  let temp = temporary_textures[key];\n  if (!temp) {\n    temp = temporary_textures[key] = { list: [], idx: 0 };\n  }\n  if (temp.idx >= temp.list.length) {\n    let tex = textures.createForCapture(`temp_${key}_${++last_temp_idx}`);\n    temp.list.push(tex);\n  }\n  let tex = temp.list[temp.idx++];\n  return tex;\n}\n\nexport function captureFramebuffer(tex, w, h, do_filter_linear, do_wrap) {\n  if (!w && render_width) {\n    w = render_width;\n    h = render_height;\n  }\n  if (!tex) {\n    tex = getTemporaryTexture(w, h);\n  }\n  if (w) {\n    tex.copyTexImage(viewport[0], viewport[1], w, h);\n  } else {\n    tex.copyTexImage(0, 0, width, height);\n  }\n  tex.setSamplerState({\n    filter_min: do_filter_linear ? gl.LINEAR : gl.NEAREST,\n    filter_mag: do_filter_linear ? gl.LINEAR : gl.NEAREST,\n    wrap_s: do_wrap ? gl.REPEAT : gl.CLAMP_TO_EDGE,\n    wrap_t: do_wrap ? gl.REPEAT : gl.CLAMP_TO_EDGE,\n  });\n  return tex;\n}\n\nlet frame_requested = false;\nfunction requestFrame() {\n  if (frame_requested) {\n    return;\n  }\n  frame_requested = true;\n  let max_fps = settings.max_fps;\n  if (defines.SLOWLOAD && is_loading) {\n    // Safari on CrossBrowserTesting needs this in order to have some time to load/decode audio data\n    // TODO: Instead, generally, if loading, compare last_tick_cpu vs dt, and if\n    //   we're not idle for at least half of the time and we have *internal*\n    //   loads (textures, sounds, models, NOT user code), delay so that we are.\n    max_fps = 2;\n  }\n  if (max_fps) {\n    // eslint-disable-next-line no-use-before-define\n    setTimeout(tick, round(1000 / max_fps));\n  } else {\n    // eslint-disable-next-line no-use-before-define\n    requestAnimationFrame(tick);\n  }\n}\n\nlet mat_projection_10;\nexport let had_3d_this_frame;\n\nexport function setupProjection(use_fov_y, use_width, use_height, znear, zfar) {\n  mat4Perspective(mat_projection, use_fov_y, use_width/use_height, znear, zfar);\n  mat_projection_10 = mat_projection[10];\n  v4set(projection_inverse,\n    2 / (use_width * mat_projection[0]), // projection_matrix.m00),\n    2 / (use_height * mat_projection[5]), // projection_matrix.m11),\n    -(1 + mat_projection[8]) / mat_projection[0], // projection_matrix.m20) / projection_matrix.m00,\n    -(1 + mat_projection[9]) / mat_projection[5] // projection_matrix.m21) / projection_matrix.m11\n  );\n}\n\nexport function start3DRendering() {\n  had_3d_this_frame = true;\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n  gl.enable(gl.BLEND);\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthMask(true);\n\n  setupProjection(fov_y, width, height, ZNEAR, ZFAR);\n\n  gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // eslint-disable-line no-bitwise\n  gl.enable(gl.CULL_FACE);\n}\n\nexport function projectionZBias(dist, at_z) {\n  if (!dist) {\n    mat_projection[10] = mat_projection_10;\n    return;\n  }\n  //let e = 2 * ZFAR * ZNEAR / (ZFAR - ZNEAR) * (dist / (at_z * (at_z + dist)));\n  let e = 0.2 * (dist / (at_z * (at_z + dist)));\n  e = max(e, 2e-7);\n  mat_projection[10] = mat_projection_10 + e;\n}\n\nfunction fixNatives(is_startup) {\n  // If any browser extensions have added things to the Array prototype, remove them!\n  let b = [];\n  for (let a in b) {\n    console[is_startup ? 'log' : 'error'](`Found invasive enumerable property \"${a}\" on Array.prototype, removing...`);\n    let old_val = b[a];\n    delete Array.prototype[a];\n    // If this fails to work, perhaps try using Object.preventExtensions(Array.prototype) in an inline header script?\n    // eslint-disable-next-line no-extend-native\n    Object.defineProperty(Array.prototype, a, { value: old_val, enumerable: false });\n  }\n  for (let a in b) {\n    // Failed: code that iterates arrays will fail\n    assert(false, `Array.prototype has unremovable member ${a}`);\n  }\n}\n\nexport const hrnow = window.performance ? window.performance.now.bind(window.performance) : Date.now.bind(Date);\n\nlet last_tick = 0;\nfunction tick(timestamp) {\n  frame_requested = false;\n  // if (timestamp < 1e12) { // high resolution timer\n  //   this ends up being a value way back in time, relative to what hrnow() returns,\n  //   and even back in time relative to input events already dispatched,\n  //   causing timing confusion, so ignore it, just call hrnow()\n  //   hrtime = timestamp;\n  // } else { // probably integer milliseconds since epoch, or nothing\n  hrtime = hrnow();\n  // }\n  let now = round(hrtime); // Code assumes integer milliseconds\n  if (!last_tick) {\n    last_tick = now;\n  }\n  this_frame_time_actual = now - last_tick;\n  let dt = min(max(this_frame_time_actual, 1), 250);\n  this_frame_time = dt;\n  last_tick = now;\n  global_timer += dt;\n  ++global_frame_index;\n\n  fixNatives(false);\n\n  // let this_net_time = wsclient.getNetTime();\n  // fpsgraph.history[(fpsgraph.index % PERF_HISTORY_SIZE) * 3 + 0] = this_net_time;\n  fpsgraph.history[(fpsgraph.index % PERF_HISTORY_SIZE) * 2 + 1] = this_frame_time_actual;\n  fpsgraph.index++;\n  fpsgraph.history[(fpsgraph.index % PERF_HISTORY_SIZE) * 2 + 0] = 0;\n\n  ++mspf_frame_count;\n  mspf_tick_accum += last_tick_cpu;\n  // net_time_accum += this_net_time;\n  if (now - mspf_update_time > 1000) {\n    if (!mspf_update_time) {\n      mspf_update_time = now;\n    } else {\n      mspf = (now - mspf_update_time) / mspf_frame_count;\n      mspf_tick = mspf_tick_accum / mspf_frame_count;\n      mspf_tick_accum = 0;\n      // net_time = net_time_accum / mspf_frame_count;\n      // net_time_accum = 0;\n      mspf_frame_count = 0;\n      mspf_update_time = now;\n    }\n  }\n\n  if (document.hidden || document.webkitHidden) {\n    resetEffects();\n    last_tick_cpu = 0;\n    for (let ii = post_tick.length - 1; ii >= 0; --ii) {\n      if (post_tick[ii].inactive && !--post_tick[ii].ticks) {\n        post_tick[ii].fn();\n        ridx(post_tick, ii);\n      }\n    }\n    requestFrame();\n    return;\n  }\n\n  had_3d_this_frame = false;\n  checkResize();\n  width = canvas.width;\n  height = canvas.height;\n\n  if (any_3d) {\n    // setting the fov values for the frame even if we don't do 3D this frame, because something\n    // might need it before start3DRendering() (e.g. mouse click inverse projection)\n    if (width > height) {\n      fov_y = fov_min;\n      let rise = width/height * sin(fov_y / 2) / cos(fov_y / 2);\n      fov_x = 2 * asin(rise / sqrt(rise * rise + 1));\n    } else {\n      fov_x = fov_min;\n      let rise = height/width * sin(fov_x / 2) / cos(fov_x / 2);\n      fov_y = 2 * asin(rise / sqrt(rise * rise + 1));\n    }\n  }\n  textures.bind(0, textures.textures.error);\n\n  camera2d.tickCamera2D();\n  camera2d.setAspectFixed(game_width, game_height);\n\n  soundTick(dt);\n  input.tickInput();\n  glov_ui.tickUI(dt);\n\n  if (need_repos) {\n    --need_repos;\n    let ul = [];\n    camera2d.virtualToDom(ul, [0,0]);\n    let lr = [];\n    camera2d.virtualToDom(lr, [game_width-1,game_height-1]);\n    let viewport2 = [ul[0], ul[1], lr[0], lr[1]];\n    let view_height = viewport2[3] - viewport2[1];\n    // default font size of 16 when at height of game_height\n    let font_size = min(256, max(2, floor(view_height/800 * 16)));\n    let elem_fullscreen = document.getElementById('fullscreen');\n    if (elem_fullscreen) {\n      elem_fullscreen.style['font-size'] = `${font_size}px`;\n    }\n  }\n\n  if (do_borders) {\n    // Borders\n    glov_ui.drawRect(camera2d.x0Real(), camera2d.y0Real(), camera2d.x1Real(), 0, Z.BORDERS, border_color);\n    glov_ui.drawRect(camera2d.x0Real(), game_height, camera2d.x1Real(), camera2d.y1Real(), Z.BORDERS, border_color);\n    glov_ui.drawRect(camera2d.x0Real(), 0, 0, game_height, Z.BORDERS, border_color);\n    glov_ui.drawRect(game_width, 0, camera2d.x1Real(), game_height, Z.BORDERS, border_color);\n  }\n\n  if (settings.show_metrics) {\n    perf.draw();\n  }\n\n  for (let ii = 0; ii < app_tick_functions.length; ++ii) {\n    app_tick_functions[ii](dt);\n  }\n  if (app_state) {\n    app_state(dt);\n  }\n\n  glov_particles.tick(dt); // *after* app_tick, so newly added/killed particles can be queued into the draw list\n  glov_transition.render(dt);\n\n  if (had_3d_this_frame) {\n    gl.disable(gl.CULL_FACE);\n  } else {\n    // delayed clear (and general GL init) until after app_state, app might change clear color\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    gl.enable(gl.BLEND);\n    gl.disable(gl.DEPTH_TEST);\n    gl.depthMask(false);\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n    // TODO: for do_viewport_post_process, we need to enable gl.scissor to avoid clearing the whole screen!\n    // gl.scissor(0, 0, viewport[2] - viewport[0], viewport[3] - viewport[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  sprites.draw();\n\n  glov_ui.endFrame();\n\n  if (render_width) {\n    let source = captureFramebuffer();\n    let clear_color = [0, 0, 0, 1];\n    let final_viewport = [\n      camera2d.render_offset_x, camera2d.render_offset_y_bottom,\n      camera2d.render_viewport_w, camera2d.render_viewport_h\n    ];\n    if (do_viewport_postprocess) {\n      effects.applyPixelyExpand({ source, final_viewport, clear_color });\n    } else {\n      if (clear_color) {\n        gl.clearColor(clear_color[0], clear_color[1], clear_color[2], clear_color[3]);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n      }\n      setViewport(final_viewport);\n      // gl.scissor(0, 0, width, height);\n      effects.applyCopy({ source });\n    }\n  }\n\n  input.endFrame();\n  resetEffects();\n  texturesTick();\n\n  for (let ii = post_tick.length - 1; ii >= 0; --ii) {\n    if (!--post_tick[ii].ticks) {\n      post_tick[ii].fn();\n      ridx(post_tick, ii);\n    }\n  }\n\n  last_tick_cpu = hrnow() - now;\n  fpsgraph.history[(fpsgraph.index % PERF_HISTORY_SIZE) * 2 + 0] = last_tick_cpu;\n  requestFrame();\n}\n\nlet error_report_details = {};\nlet error_report_details_str = '';\nexport function setErrorReportDetails(key, value) {\n  if (value) {\n    error_report_details[key] = escape(String(value));\n  } else {\n    delete error_report_details[key];\n  }\n  error_report_details_str = `&${Object.keys(error_report_details)\n    .map((k) => `${k}=${error_report_details[k]}`)\n    .join('&')}`;\n}\nsetErrorReportDetails('ver', BUILD_TIMESTAMP);\nlet last_error_time = 0;\nlet crash_idx = 0;\n// Errors from plugins that we don't want to get reported to us, or show the user!\nlet filtered_errors = /avast_submit|vc_request_action/;\nfunction glovErrorReport(msg, file, line, col) {\n  ++crash_idx;\n  let now = Date.now();\n  setTimeout(requestFrame, 1);\n  let dt = now - last_error_time;\n  last_error_time = now;\n  if (error_report_disabled) {\n    return false;\n  }\n  if (dt < 30*1000) {\n    // Less than 30 seconds since the last error, either we're erroring every\n    // frame, or this is a secondary error caused by the first, do not report it.\n    // Could maybe hash the error message and just report each message once, and\n    // flag errors as primary or secondary.\n    return false;\n  }\n  if (msg.match(filtered_errors)) {\n    return false;\n  }\n  // Post to an error reporting endpoint that (probably) doesn't exist - it'll get in the logs anyway!\n  let url = urlhash.getAPIPath(); // base like http://foo.com/bar/ (without index.html)\n  url += `errorReport?cidx=${crash_idx}&file=${escape(file)}&line=${line}&col=${col}&url=${escape(location.href)}` +\n    `&msg=${escape(msg)}${error_report_details_str}`;\n  let xhr = new XMLHttpRequest();\n  xhr.open('POST', url, true);\n  xhr.send(null);\n  return true;\n}\n\nfunction periodiclyRequestFrame() {\n  requestFrame();\n  setTimeout(periodiclyRequestFrame, 5000);\n}\n\nexport function startup(params) {\n  fixNatives(true);\n\n  canvas = document.getElementById('canvas');\n  safearea_elem = document.getElementById('safearea');\n\n  if (params.error_report !== false) {\n    window.glov_error_report = glovErrorReport;\n  }\n\n  safearea_ignore_bottom = params.safearea_ignore_bottom || false;\n\n  // resize the canvas to fill browser window dynamically\n  window.addEventListener('resize', checkResize, false);\n  checkResize();\n\n  let is_pixely = params.pixely && params.pixely !== 'off';\n  antialias = params.antialias || !is_pixely && params.antialias !== false;\n  let powerPreference = params.high ? 'high-performance' : 'default';\n  let context_names = ['webgl2', 'webgl', 'experimental-webgl'];\n  let force_webgl1 = defines.NOWEBGL2;\n  let disable_data = local_storage.getJSON('webgl2_disable');\n  // Check if a previous, recent run had an error that hinted we should disable WebGL2\n  if (disable_data && disable_data.ua === navigator.userAgent && disable_data.ts > Date.now() - 7*24*60*60*1000) {\n    console.log('Disabling WebGL2 because a previous run encountered a related error');\n    force_webgl1 = true;\n  }\n  if (DEBUG && !defines.FORCEWEBGL2) {\n    let rc = local_storage.getJSON('run_count', 0) + 1;\n    local_storage.setJSON('run_count', rc);\n    if (rc % 2) {\n      force_webgl1 = true;\n    }\n  }\n  if (force_webgl1) {\n    context_names.splice(0, 1);\n  }\n  let context_opts = [{ antialias, powerPreference }, { powerPreference }, {}];\n  let good = false;\n  webgl2 = false;\n  for (let i = 0; !good && i < context_names.length; i += 1) {\n    for (let jj = 0; !good && jj < context_opts.length; ++jj) {\n      try {\n        window.gl = canvas.getContext(context_names[i], context_opts[jj]);\n        if (window.gl) {\n          if (context_names[i] === 'webgl2') {\n            webgl2 = true;\n          }\n          good = true;\n          break;\n        }\n      } catch (e) {\n        // ignore\n      }\n    }\n  }\n  if (!good) {\n    // eslint-disable-next-line no-alert\n    window.alert('Sorry, but your browser does not support WebGL or does not have it enabled.');\n    document.getElementById('loading').style.visibility = 'hidden';\n    document.getElementById('nowebgl').style.visibility = 'visible';\n    return false;\n  }\n  console.log(`Using WebGL${webgl2?2:1}`);\n\n  assert(gl);\n  canvas.focus();\n  width = canvas.width;\n  height = canvas.height;\n  game_width = params.game_width || 1280;\n  game_height = params.game_height || 960;\n  any_3d = params.any_3d || false;\n  ZNEAR = params.znear || 0.7;\n  ZFAR = params.zfar || 10000;\n  if (params.pixely === 'strict') {\n    render_width = game_width;\n    render_height = game_height;\n    if (params.viewport_postprocess) {\n      do_viewport_postprocess = true;\n    }\n  } else {\n    render_width = undefined;\n    render_height = undefined;\n  }\n  pixel_aspect = params.pixel_aspect || 1;\n\n  gl.depthFunc(gl.LEQUAL);\n  // gl.enable(gl.SCISSOR_TEST);\n  if (!any_3d) {\n    gl.disable(gl.CULL_FACE);\n  }\n  gl.cullFace(gl.BACK);\n  gl.clearColor(0, 0.1, 0.2, 1);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1); // Allow RGB texture data with non-mult-4 widths\n\n  textures.startup();\n  geom.startup();\n  shaders.startup({\n    light_diffuse,\n    light_dir_vs,\n    ambient: light_ambient,\n    mat_m: mat_m,\n    mat_mv: mat_mv,\n    mat_vp: mat_vp,\n    mvp: mat_mvp,\n    mv_inv_trans: mat_mv_inv_transform,\n    mat_inv_view: mat_inv_view,\n    view: mat_view,\n    projection: mat_projection,\n    projection_inverse,\n  });\n  camera2d.startup();\n  sprites.startup();\n  input.startup(canvas, params);\n  if (any_3d) {\n    models.startup();\n  }\n\n  /* eslint-disable global-require */\n  glov_particles = require('./particles.js').create();\n\n  if (is_pixely) {\n    textures.defaultFilters(gl.NEAREST, gl.NEAREST);\n  } else {\n    textures.defaultFilters(gl.LINEAR_MIPMAP_LINEAR, gl.LINEAR);\n  }\n\n  const font_info_04b03x2 = require('../img/font/04b03_8x2.json');\n  const font_info_04b03x1 = require('../img/font/04b03_8x1.json');\n  if (params.font) {\n    font = glov_font.create(params.font.info, params.font.texture);\n  } else if (params.pixely === 'strict') {\n    font = glov_font.create(font_info_04b03x1, 'font/04b03_8x1');\n  } else if (is_pixely) {\n    font = glov_font.create(font_info_04b03x2, 'font/04b03_8x2');\n  } else {\n    font = glov_font.create(font_info_palanquin32, 'font/palanquin32');\n  }\n  params.font = font;\n  glov_ui.startup(params);\n\n  soundStartup(params.sound);\n  glov_ui.bindSounds(defaults(params.ui_sounds || {}, {\n    button_click: 'button_click',\n    rollover: 'rollover',\n  }));\n\n  camera2d.setAspectFixed(game_width, game_height);\n\n  if (params.state) {\n    setState(params.state);\n  }\n  if (params.do_borders !== undefined) {\n    do_borders = params.do_borders;\n  }\n  if (params.show_fps !== undefined) {\n    settings.show_fps = params.show_fps;\n  }\n\n  periodiclyRequestFrame();\n  return true;\n}\n\nexport function loadsPending() {\n  return textures.load_count + soundLoading() + models.load_count;\n}\n\nfunction loading() {\n  let load_count = loadsPending();\n  let elem_loading_text = document.getElementById('loading_text');\n  if (elem_loading_text) {\n    elem_loading_text.innerText = `Loading (${load_count})...`;\n  }\n  if (!load_count) {\n    is_loading = false;\n    app_state = after_loading_state;\n    // Clear after next frame, so something is rendered to the canvas\n    postTick({\n      ticks: 2,\n      fn: function () {\n        let loading_elem = document.getElementById('loading');\n        if (loading_elem) {\n          loading_elem.style.visibility = 'hidden';\n        }\n      }\n    });\n  }\n}\napp_state = loading;\n\nwindow.glov_engine = exports;\n","const assert = require('assert');\n\nlet by_ext = {};\nlet by_match = [];\n\n// cb(filename)\nexport function filewatchOn(ext_or_search, cb) {\n  if (ext_or_search[0] === '.') {\n    assert(!by_ext[ext_or_search]);\n    by_ext[ext_or_search] = cb;\n  } else {\n    by_match.push([ext_or_search, cb]);\n  }\n}\n\nlet message_cb;\n// cb(message)\nexport function filewatchMessageHandler(cb) {\n  message_cb = cb;\n}\n\nfunction onFileChange(filename) {\n  console.log(`FileWatch change: ${filename}`);\n  let ext_idx = filename.lastIndexOf('.');\n  let did_reload = false;\n  if (ext_idx !== -1) {\n    let ext = filename.slice(ext_idx);\n    if (by_ext[ext]) {\n      if (by_ext[ext](filename) !== false) {\n        did_reload = true;\n      }\n    }\n  }\n  for (let ii = 0; ii < by_match.length; ++ii) {\n    if (filename.match(by_match[ii][0])) {\n      if (by_match[ii][1](filename) !== false) {\n        did_reload = true;\n      }\n    }\n  }\n  if (message_cb && did_reload) {\n    message_cb(`Reloading: ${filename}`);\n  }\n}\n\nexport function filewatchTriggerChange(filename) {\n  onFileChange(filename);\n}\n\nexport function filewatchStartup(client) {\n  client.onMsg('filewatch', onFileChange);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-bitwise:off, complexity:off, no-shadow:off */\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst { floor, max, round } = Math;\nconst shaders = require('./shaders.js');\nconst sprites = require('./sprites.js');\nconst textures = require('./textures.js');\nconst { clamp } = require('../../common/util.js');\nconst { vec4, v4clone, v4scale } = require('./vmath.js');\n\n/*\n\nfont_style = glov_font.style(null, {\n  color: 0xFFFFFFff,\n  outline_width: 0,\n  outline_color: 0x00000000,\n  glow_xoffs: 0,\n  glow_yoffs: 0,\n  glow_inner: 0,\n  glow_outer: 0,\n  glow_color: 0x000000ff,\n});\n\n */\n\n// typedef struct FontCharInfo {\n//   int c;\n//   float x0;\n//   float y0;\n//   int w;\n//   int h;\n//   int imgIdx;\n// } FontCharInfo;\n\n// typedef struct FontInfo {\n//   AS_NAME(CharInfo) FontCharInfo **char_infos;\n//   int font_size;\n//   float x0;\n//   float y0;\n//   int imageW;\n//   int imageH;\n//   int spread;\n// } FontInfo;\n\nexport const COLOR_MODE = {\n  SINGLE: 0,\n  GRADIENT: 1,\n};\n\nexport const ALIGN = {\n  HLEFT: 0,\n  HCENTER: 1,\n  HRIGHT: 2,\n  HMASK: 3,\n\n  VTOP: 0 << 2,\n  VCENTER: 1 << 2,\n  VBOTTOM: 2 << 2,\n  VMASK: 3 << 2,\n\n  HFIT: 1 << 4,\n  HWRAP: 1 << 5, // only for glovMarkup*, not drawSizedAligned below, use drawSizedWrapped below instead\n\n  HCENTERFIT: 1 | (1 << 4),\n  HVCENTER: 1 | (1 << 2), // to avoid doing bitwise ops elsewhere\n  HVCENTERFIT: 1 | (1 << 2) | (1 << 4), // to avoid doing bitwise ops elsewhere\n};\n\n\n// typedef struct GlovFontStyle\n// {\n//   // These members will never be changed (safe to initialize with GlovFontStyle foo = {1.0, 0xfff, etc};\n//   float outline_width;\n//   U32 outline_color;\n//   // Glow: can be used for a dropshadow as well\n//   //   inner can be negative to have the glow be less opaque (can also just change the alpha of the glow color)\n//   //   a glow would be e.g. (0, 0, -1, 5)\n//   //   a dropshadow would be e.g. (3.25, 3.25, -2.5, 5)\n//   float glow_xoffs;\n//   float glow_yoffs;\n//   float glow_inner;\n//   float glow_outer;\n//   U32 glow_color;\n//   U32 color; // upper left, or single color\n//   U32 colorUR; // upper right\n//   U32 colorLR; // lower right\n//   U32 colorLL; // lower left\n//   GlovFontColorMode color_mode;\n// } GlovFontStyle;\n\n/* Default GlovFontStyle:\n  font_style = {\n    outline_width: 0, outline_color: 0x00000000,\n    glow_xoffs: 0, glow_yoffs: 0, glow_inner: 0, glow_outer: 0, glow_color: 0x00000000,\n    color: 0xFFFFFFff\n  };\n\n  font_style = {\n    outline_width: 0, outline_color: 0x00000000,\n    glow_xoffs: 0, glow_yoffs: 0, glow_inner: 0, glow_outer: 0, glow_color: 0x00000000,\n    // Color gradient: UL, UR, LR, LL\n    color: 0xFFFFFFff, colorUR: 0xFFFFFFff, colorLR: 0x000000ff, colorLL: 0x000000ff,\n    color_mode: glov_font.COLOR_MODE.GRADIENT,\n  };\n*/\n\nfunction GlovFontStyle() {\n  this.color_vec4 = vec4(1,1,1,1); // Matches GlovFontStyle.prototype.color below\n}\nGlovFontStyle.prototype.outline_width = 0;\nGlovFontStyle.prototype.outline_color = 0x00000000;\nGlovFontStyle.prototype.glow_xoffs = 0;\nGlovFontStyle.prototype.glow_yoffs = 0;\nGlovFontStyle.prototype.glow_inner = 0;\nGlovFontStyle.prototype.glow_outer = 0;\nGlovFontStyle.prototype.glow_color = 0x00000000;\nGlovFontStyle.prototype.color = 0xFFFFFFff;\nGlovFontStyle.prototype.colorUR = 0;\nGlovFontStyle.prototype.colorLR = 0;\nGlovFontStyle.prototype.colorLL = 0;\nGlovFontStyle.prototype.color_mode = COLOR_MODE.SINGLE;\n\nexport const font_shaders = {};\n\nexport function intColorFromVec4Color(v) {\n  return ((v[0] * 255 | 0) << 24) |\n    ((v[1] * 255 | 0) << 16) |\n    ((v[2] * 255 | 0) << 8) |\n    ((v[3] * 255 | 0));\n}\n\nexport function vec4ColorFromIntColor(v, c) {\n  v[0] = ((c >> 24) & 0xFF) / 255;\n  v[1] = ((c >> 16) & 0xFF) / 255;\n  v[2] = ((c >> 8) & 0xFF) / 255;\n  v[3] = (c & 0xFF) / 255;\n}\n\nexport const glov_font_default_style = new GlovFontStyle();\n\nexport function style(font_style, fields) {\n  let ret = new GlovFontStyle();\n  let { color_vec4 } = ret;\n  if (font_style) {\n    for (let f in font_style) {\n      ret[f] = font_style[f];\n    }\n  }\n  for (let f in fields) {\n    ret[f] = fields[f];\n  }\n  ret.color_vec4 = color_vec4; // Restore\n  vec4ColorFromIntColor(ret.color_vec4, ret.color);\n  return ret;\n}\n\nexport function styleColored(font_style, color) {\n  return style(font_style, {\n    color\n  });\n}\n\nfunction colorAlpha(color, alpha) {\n  alpha = clamp(round((color & 0xFF) * alpha), 0, 255);\n  return color & 0xFFFFFF00 | alpha;\n}\n\nexport function styleAlpha(font_style, alpha) {\n  return style(font_style, {\n    color: colorAlpha((font_style || glov_font_default_style).color, alpha),\n    outline_color: colorAlpha((font_style || glov_font_default_style).outline_color, alpha),\n    glow_color: colorAlpha((font_style || glov_font_default_style).glow_color, alpha),\n  });\n}\n\nlet tech_params = null;\nlet tech_params_dirty = false;\nlet temp_color = null;\n\nfunction createTechniqueParameters() {\n  if (tech_params) {\n    return;\n  }\n\n  tech_params = {\n    param0: vec4(),\n    outlineColor: vec4(),\n    glowColor: vec4(),\n    glowParams: vec4(),\n    tex0: null\n  };\n  if (!temp_color) {\n    temp_color = vec4();\n  }\n}\n\nfunction techParamsSet(param, value) {\n  let tpv = tech_params[param];\n  // not dirty, if anything changes, we need a new object!\n  if (!tech_params_dirty) {\n    if (tpv[0] !== value[0] || tpv[1] !== value[1] || tpv[2] !== value[2] || tpv[3] !== value[3]) {\n      // clone\n      tech_params = {\n        param0: v4clone(tech_params.param0),\n        outlineColor: v4clone(tech_params.outlineColor),\n        glowColor: v4clone(tech_params.glowColor),\n        glowParams: v4clone(tech_params.glowParams),\n      };\n      tech_params_dirty = true;\n      tpv = tech_params[param];\n    } else {\n      // identical, do nothing\n      return;\n    }\n  }\n  if (tech_params_dirty) {\n    // just set\n    tpv[0] = value[0];\n    tpv[1] = value[1];\n    tpv[2] = value[2];\n    tpv[3] = value[3];\n    // return;\n  }\n}\n\nfunction techParamsGet() {\n  tech_params_dirty = false;\n  return tech_params;\n}\n\nfunction GlovFont(font_info, texture_name) {\n  assert(font_info.font_size !== 0); // Got lost somewhere\n\n  this.texture = textures.load({\n    url: `img/${texture_name}.png`,\n    filter_min: font_info.noFilter ? gl.NEAREST : gl.LINEAR,\n    filter_mag: font_info.noFilter ? gl.NEAREST : gl.LINEAR,\n    wrap_s: gl.CLAMP_TO_EDGE,\n    wrap_t: gl.CLAMP_TO_EDGE,\n  });\n  this.textures = [this.texture];\n\n  this.font_info = font_info;\n  this.shader = font_shaders.font_aa;\n  this.tex_w = font_info.imageW;\n  this.tex_h = font_info.imageH;\n\n  // Calculate inverse scale\n  for (let ii = 0; ii < font_info.char_infos.length; ++ii) {\n    let char_info = font_info.char_infos[ii];\n    char_info.scale = 1 / (char_info.sc || 1);\n  }\n\n  // build lookup\n  this.char_infos = [];\n  for (let ii = 0; ii < font_info.char_infos.length; ++ii) {\n    let char_info = font_info.char_infos[ii];\n    this.char_infos[font_info.char_infos[ii].c] = char_info;\n    char_info.xpad = char_info.xpad || 0;\n    char_info.yoffs = char_info.yoffs || 0;\n  }\n  this.replacement_character = this.infoFromChar(0xFFFD);\n  if (!this.replacement_character) {\n    this.replacement_character = this.infoFromChar(63); // '?'\n  }\n\n  this.default_style = new GlovFontStyle();\n  this.applied_style = new GlovFontStyle();\n\n  createTechniqueParameters();\n}\n\n// General draw functions return width\n// Pass NULL for style to use default style\n// If the function takes a color, this overrides the color on the style\nGlovFont.prototype.drawSizedColor = function (style, x, y, z, size, color, text) {\n  return this.drawSized(styleColored(style, color), x, y, z, size, text);\n};\nGlovFont.prototype.drawSized = function (style, x, y, z, size, text) {\n  return this.drawScaled(style, x, y, z, size / this.font_info.font_size, size / this.font_info.font_size, text);\n};\n\nGlovFont.prototype.drawSizedAligned = function (style, _x, _y, z, size, align, w, h, text) {\n  let x_size = size;\n  let y_size = size;\n  let width = this.getStringWidth(style, x_size, text);\n  if ((align & ALIGN.HFIT) && width > w) {\n    let scale = w / width;\n    x_size *= scale;\n    width = w;\n    // Additionally, if we're really squishing things horizontally, shrink the font size\n    // and offset to be centered.\n    if (scale < 0.5) {\n      if ((align & ALIGN.VMASK) !== ALIGN.VCENTER && (align & ALIGN.VMASK) !== ALIGN.VBOTTOM) {\n        // Offset to be roughly centered in the original line bounds\n        _y += (y_size - (y_size * scale * 2)) / 2;\n      }\n      y_size *= scale * 2;\n    }\n  }\n  let height = y_size;\n  let x;\n  let y;\n  switch (align & ALIGN.HMASK) {\n    case ALIGN.HCENTER:\n      x = _x + (w - width) / 2;\n      if (this.font_info.noFilter) {\n        x |= 0; // ensure integral\n      }\n      break;\n    case ALIGN.HRIGHT:\n      x = _x + w - width;\n      break;\n    case ALIGN.HLEFT:\n      x = _x;\n      break;\n    default:\n      x = _x;\n  }\n  switch (align & ALIGN.VMASK) {\n    case ALIGN.VCENTER:\n      y = _y + (h - height) / 2;\n      if (this.font_info.noFilter) {\n        y |= 0; // ensure integral\n      }\n      break;\n    case ALIGN.VBOTTOM:\n      y = _y + h - height;\n      break;\n    case ALIGN.VTOP:\n      y = _y;\n      break;\n    default:\n      y = _y;\n  }\n\n  return this.drawScaled(style, x, y, z, x_size / this.font_info.font_size, y_size / this.font_info.font_size, text);\n};\n\n// returns height\nGlovFont.prototype.drawSizedColorWrapped = function (style, x, y, z, w, indent, size, color, text) {\n  return this.drawScaledWrapped(styleColored(style, color), x, y, z, w,\n    indent, size / this.font_info.font_size, size / this.font_info.font_size, text);\n};\nGlovFont.prototype.drawSizedWrapped = function (style, x, y, z, w, indent, size, text) {\n  return this.drawScaledWrapped(style, x, y, z, w,\n    indent, size / this.font_info.font_size, size / this.font_info.font_size, text);\n};\n\nGlovFont.prototype.wrapLines = function (w, indent, size, text, word_cb /*(x, int linenum, const char *word)*/) {\n  return this.wrapLinesScaled(w, indent, size / this.font_info.font_size, text, word_cb);\n};\n\nGlovFont.prototype.numLines = function (style, w, indent, size, text) {\n  this.applyStyle(style);\n  let numlines = 0;\n  function wordCallback(ignored, linenum, word) {\n    numlines = max(numlines, linenum);\n  }\n  this.wrapLines(w, indent, size, text, wordCallback);\n  return numlines + 1;\n};\n\nGlovFont.prototype.infoFromChar = function (c) {\n  let ret = this.char_infos[c];\n  if (ret) {\n    return ret;\n  }\n  if (c > 127) {\n    // no char info, and non-ascii, non-control code\n    return this.replacement_character;\n  }\n  return null;\n};\n\nGlovFont.prototype.getCharacterWidth = function (style, x_size, c) {\n  assert.equal(typeof c, 'number');\n  this.applyStyle(style);\n  let char_info = this.infoFromChar(c);\n  let xsc = x_size / this.font_info.font_size;\n  let x_advance = this.calcXAdvance(xsc);\n  if (char_info) {\n    return (char_info.w + char_info.xpad) * xsc * char_info.scale + x_advance;\n  }\n  return 0;\n};\n\nGlovFont.prototype.getStringWidth = function (style, x_size, text) {\n  this.applyStyle(style);\n  let ret=0;\n  let xsc = x_size / this.font_info.font_size;\n  let x_advance = this.calcXAdvance(xsc);\n  for (let ii = 0; ii < text.length; ++ii) {\n    let c = text.charCodeAt(ii);\n    let char_info = this.infoFromChar(c);\n    if (!char_info) {\n      char_info = this.infoFromChar(13);\n    }\n    if (char_info) {\n      ret += (char_info.w + char_info.xpad) * xsc * char_info.scale + x_advance;\n    }\n  }\n  return ret;\n};\n\n// word_cb(x, int linenum, const char *word)\nGlovFont.prototype.wrapLinesScaled = function (w, indent, xsc, text, word_cb) {\n  let len = text.length;\n  let s = 0;\n  let word_start = 0;\n  let word_x0 = 0;\n  let x = word_x0;\n  let linenum = 0;\n  let space_info = this.infoFromChar(32); // ' '\n  let space_size = (space_info ? space_info.w + space_info.xpad : this.font_info.font_size) * xsc;\n  let hard_wrap = false;\n  let x_advance = this.calcXAdvance(xsc);\n\n  do {\n    let c = s < len ? text.charCodeAt(s) : 0;\n    let newx = x;\n    let char_w;\n    if (c === 9) { // '\\t') {\n      let tabsize = xsc * this.font_info.font_size * 4;\n      newx = (floor(x / tabsize) + 1) * tabsize;\n      char_w = tabsize;\n    } else {\n      let char_info = this.infoFromChar(c);\n      if (!char_info) {\n        char_info = this.infoFromChar(10);\n      }\n      if (char_info) {\n        char_w = (char_info.w + char_info.xpad) * xsc * char_info.scale + x_advance;\n        newx = x + char_w;\n      }\n    }\n    if (newx >= w && hard_wrap) {\n      // flush the word so far!\n      if (word_cb) {\n        word_cb(word_x0, linenum, text.slice(word_start, s));\n      }\n      word_start = s;\n      word_x0 = indent;\n      x = word_x0 + char_w;\n      linenum++;\n    } else {\n      x = newx;\n    }\n    if (!(c === 32 /*' '*/ || c === 0 || c === 10 /*'\\n'*/)) {\n      s++;\n      c = s < len ? text.charCodeAt(s) : 0;\n    }\n    if (c === 32 /*' '*/ || c === 0 || c === 10 /*'\\n'*/) {\n      hard_wrap = false;\n      // draw word until s\n      if (x > w) {\n        // maybe wrap\n        let word_width = x - word_x0;\n        if (word_width > w - indent) {\n          // not going to fit, split it up!\n          hard_wrap = true;\n          // recover and restart at word start\n          s = word_start;\n          x = word_x0;\n          continue;\n        } else {\n          word_x0 = indent;\n          x = word_x0 + word_width;\n          linenum++;\n        }\n      }\n      if (word_cb) {\n        word_cb(word_x0, linenum, text.slice(word_start, s));\n      }\n      word_start = s+1;\n      if (c === 10 /*'\\n'*/) {\n        x = indent;\n        linenum++;\n      } else {\n        x += space_size;\n      }\n      word_x0 = x;\n      if (c === 32 /*' '*/ || c === 10 /*'\\n'*/) {\n        s++; // advance past space\n      }\n    }\n  } while (s < len);\n  ++linenum;\n  return linenum;\n};\n\nGlovFont.prototype.drawScaledWrapped = function (style, x, y, z, w, indent, xsc, ysc, text) {\n  if (text === null || text === undefined) {\n    text = '(null)';\n  }\n  this.applyStyle(style);\n  this.last_width = 0;\n  let num_lines = this.wrapLinesScaled(w, indent, xsc, text, (xoffs, linenum, word) => {\n    let y2 = y + this.font_info.font_size * ysc * linenum;\n    let x2 = x + xoffs;\n    let word_w = this.drawScaled(style, x2, y2, z, xsc, ysc, word);\n    this.last_width = max(this.last_width, xoffs + word_w);\n  });\n  return num_lines * this.font_info.font_size * ysc;\n};\n\nGlovFont.prototype.calcXAdvance = function (xsc) {\n  // Assume called: applyStyle(style);\n\n  // scale all supplied values by this so that if we swap in a font with twice the resolution (and twice the spread)\n  //   things look almost identical, just crisper\n  let font_texel_scale = this.font_info.font_size / 32;\n  // As a compromise, -2 bias here seems to work well\n  let x_advance = xsc * font_texel_scale * max(this.applied_style.outline_width - 2, 0);\n  // As a compromise, there's a -3 bias in there, so it only kicks in under extreme circumstances\n  x_advance = max(x_advance, xsc * font_texel_scale *\n    max(this.applied_style.glow_outer - this.applied_style.glow_xoffs - 3, 0));\n  return x_advance;\n};\n\n//////////////////////////////////////////////////////////////////////////\n// Main implementation\n\nGlovFont.prototype.drawScaled = function (style, _x, y, z, xsc, ysc, text) {\n  let x = _x;\n  assert(isFinite(x));\n  assert(isFinite(y));\n  assert(isFinite(z));\n  let font_info = this.font_info;\n  // Debug: show expect area of glyphs\n  // require('./ui.js').drawRect(_x, y,\n  //   _x + xsc * font_info.font_size * 20, y + ysc * font_info.font_size,\n  //   1000, [1, 0, 1, 0.5]);\n  y += (font_info.y_offset || 0) * ysc;\n  let texs = this.textures;\n  if (text === null || text === undefined) {\n    text = '(null)';\n  }\n  const len = text.length;\n  if (xsc === 0 || ysc === 0) {\n    return 0;\n  }\n\n  this.applyStyle(style);\n\n  const avg_scale_font = (xsc + ysc) * 0.5;\n  const camera_xscale = camera2d.data[4];\n  const camera_yscale = camera2d.data[5];\n  let avg_scale_combined = (xsc * camera_xscale + ysc * camera_yscale) * 0.5;\n  // avg_scale_combined *= glov_settings.render_scale;\n\n  // scale all supplied values by this so that if we swap in a font with twice the resolution (and twice the spread)\n  //   things look almost identical, just crisper\n  let x_advance = this.calcXAdvance(xsc);\n  let font_texel_scale = font_info.font_size / 32;\n  let tile_state = 0;\n\n  let applied_style = this.applied_style;\n\n  // Calculate anti-aliasing values\n  let delta_per_source_pixel = 0.5 / font_info.spread;\n  let delta_per_dest_pixel = delta_per_source_pixel / avg_scale_combined;\n  let value = vec4(\n    1 / delta_per_dest_pixel, // AA Mult and Outline Mult\n    -0.5 / delta_per_dest_pixel + 0.5, // AA Add\n    // Outline Add\n    -0.5 / delta_per_dest_pixel + 0.5 + applied_style.outline_width*font_texel_scale*avg_scale_combined,\n    0, // Unused\n  );\n  if (value[2] > 0) {\n    value[2] = 0;\n  }\n  let padding1 = max(0, applied_style.outline_width*font_texel_scale*avg_scale_font);\n  let padding4 = vec4();\n  const outer_scaled = applied_style.glow_outer*font_texel_scale;\n  padding4[0] = max(outer_scaled*xsc - applied_style.glow_xoffs*font_texel_scale*xsc, padding1);\n  padding4[2] = max(outer_scaled*xsc + applied_style.glow_xoffs*font_texel_scale*xsc, padding1);\n  padding4[1] = max(outer_scaled*ysc - applied_style.glow_yoffs*font_texel_scale*ysc, padding1);\n  padding4[3] = max(outer_scaled*ysc + applied_style.glow_yoffs*font_texel_scale*ysc, padding1);\n\n  techParamsSet('param0', value);\n  let value2 = vec4(\n    0, // filled later\n    0, // filled later\n    // Glow mult\n    1 / ((applied_style.glow_outer - applied_style.glow_inner) * delta_per_source_pixel * font_texel_scale),\n    -(0.5 - applied_style.glow_outer * delta_per_source_pixel * font_texel_scale) / ((applied_style.glow_outer -\n      applied_style.glow_inner) * delta_per_source_pixel * font_texel_scale)\n  );\n  if (value2[3] > 0) {\n    value2[3] = 0;\n  }\n\n  let padding_in_font_space = vec4();\n  v4scale(padding_in_font_space, padding4, 1 / avg_scale_font);\n  for (let ii = 0; ii < 4; ++ii) {\n    if (padding_in_font_space[ii] > font_info.spread) {\n      // Not enough buffer\n      let sc = font_info.spread / padding_in_font_space[ii];\n      padding4[ii] *= sc;\n      padding_in_font_space[ii] *= sc;\n    }\n  }\n\n  // Choose appropriate z advance so that character are drawn left to right (or RTL if the glow is on the other side)\n  const z_advance = applied_style.glow_xoffs < 0 ? -0.0001 : 0.0001;\n\n\n  // For non-1:1 aspect ration rendering, need to scale our coordinates' padding differently in each axis\n  let rel_x_scale = xsc / avg_scale_font;\n  let rel_y_scale = ysc / avg_scale_font;\n\n  for (let i=0; i<len; i++) {\n    const c = text.charCodeAt(i);\n    if (c === 9) { // '\\t'.charCodeAt(0)) {\n      let tabsize = xsc * font_info.font_size * 4;\n      x = ((((x - _x) / tabsize) | 0) + 1) * tabsize + _x;\n    } else {\n      let char_info = this.infoFromChar(c);\n      if (!char_info) {\n        char_info = this.infoFromChar(13);\n      }\n      if (char_info) {\n        let char_scale = char_info.scale;\n        let xsc2 = xsc * char_scale;\n        if (char_info.w) {\n          let ysc2 = ysc * char_scale;\n          let pad_scale = 1 / char_scale;\n          let tile_width = this.tex_w;\n          let tile_height = this.tex_h;\n          // Lazy update params here\n          if (char_scale !== tile_state) {\n            value2[0] = -applied_style.glow_xoffs * font_texel_scale * pad_scale / tile_width;\n            value2[1] = -applied_style.glow_yoffs * font_texel_scale * pad_scale / tile_height;\n            techParamsSet('glowParams', value2);\n          }\n\n          let u0 = (char_info.x0 - padding_in_font_space[0] * pad_scale) / tile_width;\n          let u1 = (char_info.x0 + char_info.w + padding_in_font_space[2] * pad_scale) / tile_width;\n          let v0 = (char_info.y0 - padding_in_font_space[1] * pad_scale) / tile_height;\n          let v1 = (char_info.y0 + char_info.h + padding_in_font_space[3] * pad_scale) / tile_height;\n\n          let w = char_info.w * xsc2 + (padding4[0] + padding4[2]) * rel_x_scale;\n          let h = char_info.h * ysc2 + (padding4[1] + padding4[3]) * rel_y_scale;\n\n          sprites.queueraw(\n            texs,\n            x - rel_x_scale * padding4[0], y - rel_y_scale * padding4[2] + char_info.yoffs * ysc2,\n            z + z_advance * i, w, h,\n            u0, v0, u1, v1,\n            applied_style.color_vec4,\n            this.shader, techParamsGet());\n\n          // require('./ui.js').drawRect(x - rel_x_scale * padding4[0],\n          //   y - rel_y_scale * padding4[2] + char_info.yoffs * ysc2,\n          //   w + x - rel_x_scale * padding4[0],\n          //   h + y - rel_y_scale * padding4[2] + char_info.yoffs * ysc2,\n          //   1000, [i & 1, (i & 2)>>1, (i & 4)>>2, 0.5]);\n        }\n\n        x += (char_info.w + char_info.xpad) * xsc2 + x_advance;\n      }\n    }\n  }\n  return x - _x;\n};\n\nGlovFont.prototype.determineShader = function () {\n  let outline = this.applied_style.outline_width && (this.applied_style.outline_color & 0xff);\n  let glow = this.applied_style.glow_outer > 0 && (this.applied_style.glow_color & 0xff);\n  if (outline) {\n    if (glow) {\n      this.shader = font_shaders.font_aa_outline_glow;\n    } else {\n      this.shader = font_shaders.font_aa_outline;\n    }\n  } else if (glow) {\n    this.shader = font_shaders.font_aa_glow;\n  } else {\n    this.shader = font_shaders.font_aa;\n  }\n};\n\nGlovFont.prototype.applyStyle = function (style) {\n  if (!style) {\n    style = this.default_style;\n  }\n  // outline\n  vec4ColorFromIntColor(temp_color, style.outline_color);\n  techParamsSet('outlineColor', temp_color);\n\n  // glow\n  vec4ColorFromIntColor(temp_color, style.glow_color);\n  techParamsSet('glowColor', temp_color);\n\n  // everything else\n  this.applied_style.outline_width = style.outline_width;\n  this.applied_style.outline_color = style.outline_color;\n  this.applied_style.glow_xoffs = style.glow_xoffs;\n  this.applied_style.glow_yoffs = style.glow_yoffs;\n  this.applied_style.glow_inner = style.glow_inner;\n  this.applied_style.glow_outer = style.glow_outer;\n  this.applied_style.glow_color = style.glow_color;\n  this.applied_style.color = style.color;\n  this.applied_style.color_vec4 = style.color_vec4;\n  this.applied_style.colorUR = style.colorUR;\n  this.applied_style.colorLR = style.colorLR;\n  this.applied_style.colorLL = style.colorLL;\n  this.applied_style.color_mode = style.color_mode;\n\n  if (this.applied_style.color_mode === COLOR_MODE.SINGLE) {\n    this.applied_style.colorUR = this.applied_style.colorLL = this.applied_style.colorLR = this.applied_style.color;\n  }\n\n  this.determineShader();\n};\n\n// Replicate constants and utility functions on all font instances as well\nGlovFont.prototype.COLOR_MODE = COLOR_MODE;\nGlovFont.prototype.ALIGN = ALIGN;\nGlovFont.prototype.style = style;\nGlovFont.prototype.styleAlpha = styleAlpha;\nGlovFont.prototype.styleColored = styleColored;\n\nfunction fontShadersInit() {\n  if (font_shaders.font_aa) {\n    return;\n  }\n  font_shaders.font_aa = shaders.create('glov/shaders/font_aa.fp');\n  font_shaders.font_aa_glow = shaders.create('glov/shaders/font_aa_glow.fp');\n  font_shaders.font_aa_outline = shaders.create('glov/shaders/font_aa_outline.fp');\n  font_shaders.font_aa_outline_glow = shaders.create('glov/shaders/font_aa_outline_glow.fp');\n}\n\nexport function create(font_info, texture_name) {\n  fontShadersInit();\n  return new GlovFont(font_info, texture_name);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-bitwise:off */\n\nconst assert = require('assert');\nconst engine = require('./engine.js');\nconst { ceil, max, min } = Math;\n\nexport const TRIANGLES = 4;\nexport const TRIANGLE_FAN = 6;\nexport const QUADS = 7;\n\nconst gl_byte_size = {\n  0x1400: 1, // GL_BYTE\n  0x1401: 1, // GL_UNSIGNED_BYTE\n  0x1402: 2, // GL_SHORT\n  0x1403: 2, // GL_UNSIGNED_SHORT\n  0x1406: 4, // GL_FLOAT\n};\n\n// let unit_buf;\n// let unit_buf_len = 0;\n\nlet bound_geom;\n\nlet bound_array_buf = null;\nlet bound_index_buf = null;\n\nlet quad_index_buf;\nlet quad_index_buf_len = 0;\n\nfunction deleteBuffer(handle) {\n  if (!handle) {\n    return;\n  }\n  if (bound_array_buf === handle) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    bound_array_buf = null;\n  }\n  if (bound_index_buf === handle) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    bound_index_buf = null;\n  }\n  gl.deleteBuffer(handle);\n}\n\nlet attrib_enabled = 0;\nfunction enableVertexAttribArray(bits) {\n  if (bits === attrib_enabled) {\n    return;\n  }\n  let disable_mask = (attrib_enabled & (~bits));\n  let enable_mask = ((~attrib_enabled) & bits);\n  attrib_enabled = bits;\n\n  if (disable_mask) {\n    let n = 0;\n    do {\n      if (disable_mask & 1) {\n        gl.disableVertexAttribArray(n);\n      }\n      n++;\n      disable_mask >>= 1;\n    } while (disable_mask);\n  }\n\n  if (enable_mask) {\n    let n = 0;\n    do {\n      if (enable_mask & 1) {\n        gl.enableVertexAttribArray(n);\n      }\n      n++;\n      enable_mask >>= 1;\n    } while (enable_mask);\n  }\n}\n\n// function bindUnitBuf(arr_idx, len) {\n//   if (len > unit_buf_len) {\n//     deleteBuffer(unit_buf);\n//     unit_buf = gl.createBuffer();\n//     unit_buf_len = max(ceil(unit_buf_len * 1.5), len);\n//     gl.bindBuffer(gl.ARRAY_BUFFER, unit_buf);\n//     bound_array_buf = unit_buf;\n//     let arr = new Uint8Array(unit_buf_len * 4);\n//     for (let ii = 0; ii < unit_buf_len * 4; ++ii) {\n//       arr[ii] = 255;\n//     }\n//     gl.bufferData(gl.ARRAY_BUFFER, arr, gl.STATIC_DRAW);\n//   } else {\n//     if (bound_array_buf !== unit_buf) {\n//       gl.bindBuffer(gl.ARRAY_BUFFER, unit_buf);\n//       bound_array_buf = unit_buf;\n//     }\n//   }\n//   gl.vertexAttribPointer(arr_idx, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n// }\n\n// Verts should be ordered counter-clockwise from the upper left\nfunction getQuadIndexBuf(quad_count) {\n  assert(quad_count <= 16384);\n  // If not, need to split into multiple vertex and index buffers (fairly easy),\n  //   or use the OES_element_index_uint extension (trivial, but probably slower, maybe not supported on mobile?)\n  if (quad_count * 6 > quad_index_buf_len) {\n    if (!quad_index_buf) {\n      quad_index_buf = gl.createBuffer();\n    } else {\n      // freeing old one\n      engine.perf_state.gpu_mem.geom -= quad_index_buf_len * 2;\n    }\n    quad_index_buf_len = max(ceil(quad_index_buf_len * 1.5), quad_count * 6);\n    if (bound_index_buf !== quad_index_buf) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, quad_index_buf);\n      bound_index_buf = quad_index_buf;\n    }\n    let arr = new Uint16Array(quad_index_buf_len);\n    let vidx = 0;\n    for (let ii = 0; ii < quad_index_buf_len;) {\n      arr[ii++] = vidx + 1;\n      arr[ii++] = vidx + 3;\n      arr[ii++] = vidx++; // 0\n      arr[ii++] = vidx++; // 1\n      arr[ii++] = vidx++; // 2\n      arr[ii++] = vidx++; // 3\n    }\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arr, gl.STATIC_DRAW);\n    engine.perf_state.gpu_mem.geom += quad_index_buf_len * 2;\n  }\n  return quad_index_buf;\n}\n\nexport function createIndices(idxs) {\n  let ret = {\n    ibo: gl.createBuffer(),\n    ibo_size: idxs.length,\n  };\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ret.ibo);\n  bound_index_buf = ret.ibo;\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, idxs, gl.STATIC_DRAW);\n  engine.perf_state.gpu_mem.geom += idxs.length * 2;\n  return ret;\n}\n\nfunction formatInfo(format) {\n  if (!format.info) {\n    let stride = 0;\n    let elem_count = 0;\n    let used_attribs = 0;\n    let common_byte_size = 0;\n    for (let ii = 0; ii < format.length; ++ii) {\n      let fmt = format[ii];\n      let sem = fmt[0];\n      let gltype = fmt[1];\n      let count = fmt[2];\n      used_attribs |= (1 << sem);\n      let byte_size = gl_byte_size[gltype];\n      assert(byte_size);\n      assert(!common_byte_size || byte_size === common_byte_size);\n      common_byte_size = byte_size;\n      fmt[3] = fmt[3] || false;\n      fmt[4] = byte_size;\n      stride += count * byte_size;\n      elem_count += count;\n    }\n    format.info = {\n      stride, elem_count, used_attribs, common_byte_size\n    };\n  }\n  return format.info;\n}\n\n// format is [shaders.semantic.foo, gl.FLOAT/UNSIGNED_BYTE/etc, count, normalized]\nfunction Geom(format, verts, idxs, mode) {\n  this.mode = mode || TRIANGLES;\n  this.format = format;\n  let info = this.format_info = formatInfo(format);\n  this.stride = info.stride;\n  this.used_attribs = info.used_attribs;\n\n  this.vert_count = verts.length / this.format_info.elem_count;\n  this.vert_gpu_mem = verts.length * this.format_info.common_byte_size;\n  if (verts.length) {\n    this.vbo = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n    bound_array_buf = this.vbo;\n    gl.bufferData(gl.ARRAY_BUFFER, verts, gl.STATIC_DRAW);\n    engine.perf_state.gpu_mem.geom += this.vert_gpu_mem;\n  }\n  this.orig_mode = mode;\n  if (idxs) {\n    if (idxs.ibo) {\n      this.ibo = idxs.ibo;\n      this.ibo_owned = false;\n      this.ibo_size = idxs.ibo_size;\n    } else {\n      this.ibo = gl.createBuffer();\n      this.ibo_owned = true;\n      this.ibo_size = idxs.length;\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\n      bound_index_buf = this.ibo;\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, idxs, gl.STATIC_DRAW);\n      engine.perf_state.gpu_mem.geom += idxs.length * 2;\n    }\n  } else if (mode === QUADS) {\n    assert.equal(this.vert_count % 4, 0);\n    let quad_count = this.vert_count / 4;\n    // PERFTODO: Use GL_QUADS_OES extension\n    this.ibo = getQuadIndexBuf(quad_count);\n    this.ibo_owned = false;\n    this.ibo_size = quad_count * 6;\n    this.mode = TRIANGLES;\n  } else if (mode === TRIANGLE_FAN) {\n    this.mode = TRIANGLE_FAN;\n  } else {\n    this.ibo = null;\n    this.ibo_owned = false;\n  }\n}\n\nGeom.prototype.updateSub = function (offset, verts) {\n  if (bound_array_buf !== this.vbo) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n    bound_array_buf = this.vbo;\n  }\n  gl.bufferSubData(gl.ARRAY_BUFFER, offset, verts);\n};\n\nGeom.prototype.update = function (verts, num_verts) {\n  assert.equal(this.ibo_owned, false);\n  if (num_verts > this.vert_count) {\n    if (bound_geom === this) {\n      bound_geom = null;\n    }\n    engine.perf_state.gpu_mem.geom -= this.vert_gpu_mem;\n    deleteBuffer(this.vbo);\n    // Note: matching size, ignoring num_verts\n    this.vert_count = verts.length / this.format_info.elem_count;\n    this.vert_gpu_mem = verts.length * this.format_info.common_byte_size;\n    this.vbo = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n    bound_array_buf = this.vbo;\n    gl.bufferData(gl.ARRAY_BUFFER, verts, gl.DYNAMIC_DRAW);\n    engine.perf_state.gpu_mem.geom += this.vert_gpu_mem;\n  } else {\n    // Fits\n    if (bound_array_buf !== this.vbo) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n      bound_array_buf = this.vbo;\n    }\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, verts.subarray(0, num_verts * this.format_info.elem_count));\n    // gl.bufferData(gl.ARRAY_BUFFER, verts, gl.DYNAMIC_DRAW);\n  }\n  if (this.orig_mode === QUADS) {\n    let quad_count = num_verts / 4;\n    this.ibo = getQuadIndexBuf(quad_count);\n    this.ibo_size = quad_count * 6;\n  }\n};\n\nGeom.prototype.dispose = function () {\n  if (this.ibo_owned) {\n    deleteBuffer(this.ibo);\n  }\n  this.ibo = null;\n  deleteBuffer(this.vbo);\n  this.vbo = null;\n  engine.perf_state.gpu_mem.geom -= this.vert_gpu_mem;\n  this.vert_gpu_mem = 0;\n};\n\n\nlet bound_attribs = (function () {\n  let r = [];\n  for (let ii = 0; ii < 16; ++ii) {\n    r.push({\n      vbo: null,\n      offset: 0,\n    });\n  }\n  return r;\n}());\nGeom.prototype.bind = function () {\n  if (bound_geom !== this) {\n    bound_geom = this;\n    let vbo = this.vbo;\n\n    let offset = 0;\n    for (let ii = 0; ii < this.format.length; ++ii) {\n      let fmt = this.format[ii];\n      let count = fmt[2];\n      let byte_size = fmt[4];\n      if (bound_attribs[ii].vbo === vbo) { //  && bound_attribs[ii].offset = offset\n        // already bound\n      } else {\n        if (bound_array_buf !== vbo) {\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n          bound_array_buf = vbo;\n        }\n        let sem = fmt[0];\n        let gltype = fmt[1];\n        let normalized = fmt[3];\n        gl.vertexAttribPointer(sem, count, gltype, normalized, this.stride, offset);\n        bound_attribs[ii].vbo = bound_array_buf;\n        // bound_attribs[ii].offset = offset;\n      }\n      offset += count * byte_size;\n    }\n    // if (!used[1]) { // COLOR\n    //   used_attribs |= 1 << shader.semantics.COLOR;\n    //   bindUnitBuf(1, this.vert_count);\n    // }\n    enableVertexAttribArray(this.used_attribs);\n  }\n\n  if (this.ibo && bound_index_buf !== this.ibo) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\n    bound_index_buf = this.ibo;\n  }\n};\nGeom.prototype.draw = function () {\n  this.bind();\n  if (this.ibo) {\n    gl.drawElements(this.mode, this.ibo_size, gl.UNSIGNED_SHORT, 0);\n  } else {\n    gl.drawArrays(this.mode, 0, this.vert_count);\n  }\n};\n\nfunction GeomMultiQuads(format, verts) {\n  let format_info = formatInfo(format);\n  let ec = format_info.elem_count;\n  let vert_count = verts.length / ec;\n  this.geoms = [];\n  for (let idx = 0; idx < vert_count; idx += 65536) {\n    let num_sub_verts = min(vert_count - idx, 65536);\n    let sub_data = new Uint8Array(verts.buffer, idx * ec, num_sub_verts * ec);\n    this.geoms.push(new Geom(format, sub_data, null, QUADS));\n  }\n}\nGeomMultiQuads.prototype.draw = function () {\n  for (let ii = 0; ii < this.geoms.length; ++ii) {\n    this.geoms[ii].draw();\n  }\n};\nGeomMultiQuads.prototype.dispose = function () {\n  for (let ii = 0; ii < this.geoms.length; ++ii) {\n    this.geoms[ii].dispose();\n  }\n  this.geoms = null;\n};\n\nexport function create(format, verts, idxs, mode) {\n  return new Geom(format, verts, idxs, mode);\n}\n\nexport function createQuads(format, verts) {\n  let format_info = formatInfo(format);\n  assert(verts instanceof Uint8Array); // only one handled by GeomMultiQuads for now\n  let vert_count = verts.length / format_info.elem_count;\n  if (vert_count > 65536) {\n    return new GeomMultiQuads(format, verts);\n  }\n  return new Geom(format, verts, null, QUADS);\n}\n\nexport function startup() {\n  // Nothing for now.\n}\n","/* eslint no-bitwise:off */\n// From https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript\n\nlet charCache = new Array(128);  // Preallocate the cache for the common single byte chars\nlet charFromCodePt = String.fromCodePoint || String.fromCharCode;\nlet result = [];\nexport function decode(array) {\n  let codePt;\n  let byte1;\n  let buffLen = array.length;\n\n  result.length = 0;\n\n  for (let i = 0; i < buffLen;) {\n    byte1 = array[i++];\n\n    if (byte1 <= 0x7F) {\n      codePt = byte1;\n    } else if (byte1 <= 0xDF) {\n      codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);\n    } else if (byte1 <= 0xEF) {\n      codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\n    } else if (String.fromCodePoint) {\n      codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\n    } else {\n      codePt = 63;    // Cannot convert four byte code points, so use \"?\" instead\n      i += 3;\n    }\n\n    result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));\n  }\n\n  return result.join('');\n}\n","// Derived from (MIT Licensed) https://github.com/uber-web/loaders.gl/tree/master/modules/gltf\n\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\n\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\n\n// glTF ACCESSOR CONSTANTS\n\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n","// Derived from (MIT Licensed) https://github.com/uber-web/loaders.gl/tree/master/modules/gltf\n/* eslint-env browser */\n\nconst assert = require('assert');\n\n/* eslint-disable camelcase, max-statements */\nconst { unpackGLBBuffers } = require('./unpack-glb-buffers.js');\nconst { unpackBinaryJson } = require('./unpack-binary-json.js');\n\nfunction padTo4Bytes(byteLength) {\n  return (byteLength + 3) & ~3; //eslint-disable-line no-bitwise\n}\n\nconst decode_utf8 = require('./decode-utf8.js');\n\nconst {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} = require('./gltf-type-utils.js');\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\n\nconst LE = true; // Binary GLTF is little endian.\nconst BE = false; // Magic needs to be written as BE\n\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\nfunction GLBParser() {\n  // Result\n  this.binaryByteOffset = null;\n  this.packedJson = null;\n  this.json = null;\n}\n\nfunction parseBinary(self) {\n  // GLB Header\n  const dataView = new DataView(self.glbArrayBuffer);\n  const magic1 = dataView.getUint32(0, BE); // Magic number (the ASCII string 'glTF').\n  const version = dataView.getUint32(4, LE); // Version 2 of binary glTF container format\n  const fileLength = dataView.getUint32(8, LE); // Total byte length of generated file\n\n  let valid = magic1 === MAGIC_glTF;\n  if (!valid) {\n    console.warn('Invalid GLB magic string');\n  }\n\n  assert(version === 2, `Invalid GLB version ${version}. Only .glb v2 supported`);\n  assert(fileLength > 20);\n\n  // Write the JSON chunk\n  const jsonChunkLength = dataView.getUint32(12, LE); // Byte length of json chunk\n  const jsonChunkFormat = dataView.getUint32(16, LE); // Chunk format as uint32\n\n  valid = jsonChunkFormat === GLB_CHUNK_TYPE_JSON || jsonChunkFormat === 0; // Back compat\n  assert(valid, `JSON chunk format ${jsonChunkFormat}`);\n\n  // Create a \"view\" of the binary encoded JSON data\n  const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n  const jsonChunk = new Uint8Array(self.glbArrayBuffer, jsonChunkOffset, jsonChunkLength);\n\n  // Decode the JSON binary array into clear text\n  const jsonText = decode_utf8.decode(jsonChunk);\n\n  // Parse the JSON text into a JavaScript data structure\n  self.json = JSON.parse(jsonText);\n\n  // TODO - BIN chunk can be optional\n  const binaryChunkStart = jsonChunkOffset + padTo4Bytes(jsonChunkLength);\n  self.binaryByteOffset = binaryChunkStart + GLB_CHUNK_HEADER_SIZE;\n\n  const binChunkFormat = dataView.getUint32(binaryChunkStart + 4, LE); // Chunk format as uint32\n  valid = binChunkFormat === GLB_CHUNK_TYPE_BIN || binChunkFormat === 1; // Back compat\n  assert(valid, `BIN chunk format ${binChunkFormat}`);\n\n  return {\n    arrayBuffer: self.glbArrayBuffer,\n    binaryByteOffset: self.binaryByteOffset,\n    json: self.json\n  };\n}\n\nfunction parseInternal(self) {\n  const result = parseBinary(self);\n  self.packedJson = result.json;\n  self.unpackedBuffers = unpackGLBBuffers(self.glbArrayBuffer, self.json, self.binaryByteOffset);\n  self.json = unpackBinaryJson(self.json, self.unpackedBuffers);\n}\n\nGLBParser.prototype.parseSync = function (arrayBuffer) {\n  // Input\n  this.glbArrayBuffer = arrayBuffer;\n\n  // Only parse once\n  if (this.json === null && this.binaryByteOffset === null) {\n    parseInternal(this);\n  }\n  return this;\n};\n\n// Return the gltf JSON and the original arrayBuffer\nGLBParser.prototype.parse = function (arrayBuffer) {\n  return this.parseSync(arrayBuffer);\n};\n\n// Returns application JSON data stored in `key`\nGLBParser.prototype.getApplicationData = function (key) {\n  return this.json[key];\n};\n\n// Returns JSON envelope\nGLBParser.prototype.getJSON = function () {\n  return this.json;\n};\n\n// Return binary chunk\nGLBParser.prototype.getArrayBuffer = function () {\n  return this.glbArrayBuffer;\n};\n\n// Return index into binary chunk\nGLBParser.prototype.getBinaryByteOffset = function () {\n  return this.binaryByteOffset;\n};\n\n// Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\nGLBParser.prototype.getBufferView = function (glTFBufferView) {\n  const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n  return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n};\n\n// Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\nGLBParser.prototype.getBuffer = function (glTFAccessor) {\n  // Decode the glTF accessor format\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n  const length = glTFAccessor.count * components;\n  const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n  // Get the boundaries of the binary sub-chunk for this bufferView\n  const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n  assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);\n\n  const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;\n  return new ArrayType(this.glbArrayBuffer, byteOffset, length);\n};\n\n// Unpacks an image into an HTML image\nGLBParser.prototype.getImageData = function (glTFImage) {\n  return {\n    typedArray: this.getBufferView(glTFImage.bufferView),\n    mimeType: glTFImage.mimeType || 'image/jpeg'\n  };\n};\n\nGLBParser.prototype.getImage = function (glTFImage) {\n  const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n  const mimeType = glTFImage.mimeType || 'image/jpeg';\n  const blob = new Blob([arrayBufferView], { type: mimeType });\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n  const img = new Image();\n  img.src = imageUrl;\n  return img;\n};\n\n// GLBParser.prototype.getImageAsync = function (glTFImage) {\n//   return new Promise(resolve => {\n//     const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n//     const mimeType = glTFImage.mimeType || 'image/jpeg';\n//     const blob = new Blob([arrayBufferView], {type: mimeType});\n//     const urlCreator = window.URL || window.webkitURL;\n//     const imageUrl = urlCreator.createObjectURL(blob);\n//     const img = new Image();\n//     img.onload = () => resolve(img);\n//     img.src = imageUrl;\n//   });\n// };\n\nmodule.exports = GLBParser;\nGLBParser.parse = function (data) {\n  let parser = new GLBParser();\n  return parser.parse(data);\n};\n","// Derived from (MIT Licensed) https://github.com/uber-web/loaders.gl/tree/master/modules/gltf\n\nfunction parseJSONPointer(value) {\n  if (typeof value === 'string') {\n    // Remove escape character\n    if (value.indexOf('##/') === 0) {\n      return value.slice(1);\n    }\n\n    let matches = value.match(/#\\/([a-z]+)\\/([0-9]+)/);\n    if (matches) {\n      const index = parseInt(matches[2], 10);\n      return [matches[1], index];\n    }\n\n    // Legacy: `$$$i`\n    matches = value.match(/\\$\\$\\$([0-9]+)/);\n    if (matches) {\n      const index = parseInt(matches[1], 10);\n      return ['accessors', index];\n    }\n  }\n\n  return null;\n}\n\nfunction decodeJSONPointer(object, buffers) {\n  const pointer = parseJSONPointer(object);\n  if (pointer) {\n    const field = pointer[0];\n    const index = pointer[1];\n    const buffer = buffers[field] && buffers[field][index];\n    if (buffer) {\n      return buffer;\n    }\n    console.error(`Invalid JSON pointer ${object}: #/${field}/${index}`);\n  }\n  return null;\n}\n\n// Recursively unpacks objects, replacing \"JSON pointers\" with typed arrays\nfunction unpackJsonArraysRecursive(json, topJson, buffers, options = {}) {\n  const object = json;\n\n  const buffer = decodeJSONPointer(object, buffers);\n  if (buffer) {\n    return buffer;\n  }\n\n  // Copy array\n  if (Array.isArray(object)) {\n    return object.map((element) => unpackJsonArraysRecursive(element, topJson, buffers, options));\n  }\n\n  // Copy object\n  if (object !== null && typeof object === 'object') {\n    const newObject = {};\n    for (const key in object) {\n      newObject[key] = unpackJsonArraysRecursive(object[key], topJson, buffers, options);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n\nexport function unpackBinaryJson(json, buffers, options = {}) {\n  return unpackJsonArraysRecursive(json, json, buffers, options);\n}\n","// Derived from (MIT Licensed) https://github.com/uber-web/loaders.gl/tree/master/modules/gltf\n\nconst assert = require('assert');\n\nconst {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} = require('./gltf-type-utils.js');\n\n// Creates a new ArrayBuffer starting at the offset, containing all remaining bytes\n// TODO - should not be needed, see above\nfunction getArrayBufferAtOffset(arrayBuffer, byteOffset) {\n  const length = arrayBuffer.byteLength - byteOffset;\n  const binaryBuffer = new ArrayBuffer(length);\n  const sourceArray = new Uint8Array(arrayBuffer);\n  const binaryArray = new Uint8Array(binaryBuffer);\n  for (let i = 0; i < length; i++) {\n    binaryArray[i] = sourceArray[byteOffset + i];\n  }\n  return binaryBuffer;\n}\n\nfunction getArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return { ArrayType, length, byteLength };\n}\n\nfunction unpackAccessors(arrayBuffer, bufferViews, json) {\n  // unpack accessors\n  const accessors = json.accessors || [];\n\n  const accessorBuffers = [];\n\n  for (let i = 0; i < accessors.length; ++i) {\n    const accessor = accessors[i];\n    assert(accessor);\n\n    const bufferView = bufferViews[accessor.bufferView];\n    // Draco encoded meshes don't have bufferView in accessor\n    if (bufferView) {\n      // Create a new typed array as a view into the combined buffer\n      const { ArrayType, length } = getArrayTypeAndLength(accessor, bufferView);\n      const array = new ArrayType(arrayBuffer, bufferView.byteOffset, length);\n      // Store the metadata on the array (e.g. needed to determine number of components per element)\n      array.accessor = accessor;\n      accessorBuffers.push(array);\n    }\n  }\n\n  return accessorBuffers;\n}\n\nfunction unpackImages(arrayBuffer, bufferViews, json) {\n  // unpack images\n  const images = json.images || [];\n\n  const imageBuffers = [];\n\n  for (let i = 0; i < images.length; ++i) {\n    const image = images[i];\n    assert(image);\n\n    if (image.bufferView === undefined) {\n      imageBuffers.push(null);\n      continue;\n    }\n\n    const bufferView = bufferViews[image.bufferView];\n    assert(bufferView);\n\n    // Create a new typed array as a view into the combined buffer\n    const array = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\n    // Store the metadata on the array (e.g. needed to determine number of components per element)\n    array.imate = image;\n    imageBuffers.push(array);\n  }\n\n  return imageBuffers;\n}\n\nexport function unpackGLBBuffers(arrayBuffer, json, binaryByteOffset) {\n  // TODO - really inefficient, should just use the offset into the original array buffer\n  if (binaryByteOffset) {\n    arrayBuffer = getArrayBufferAtOffset(arrayBuffer, binaryByteOffset);\n  }\n\n  const bufferViews = json.bufferViews || [];\n\n  for (let i = 0; i < bufferViews.length; ++i) {\n    const bufferView = bufferViews[i];\n    assert(bufferView.byteLength >= 0);\n  }\n\n  return {\n    // TODO: delete unpackAccessors and use buffer views only?\n    accessors: unpackAccessors(arrayBuffer, bufferViews, json),\n    images: unpackImages(arrayBuffer, bufferViews, json)\n  };\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n// System for registering callbacks to run in event handlers on the next frame\n// Used to get around restrictions on APIs like pointer lock, fullscreen, or\n// screen orientation.\n\nconst assert = require('assert');\n\nlet cbs = {};\nexport function topOfFrame() {\n  cbs = {};\n}\n\nexport function on(type, code_or_pos, cb) {\n  let list = cbs[type] = cbs[type] || [];\n  if (typeof code_or_pos === 'number') {\n    list[code_or_pos] = cb;\n  } else {\n    list.push([code_or_pos, cb]);\n  }\n}\n\nexport function handle(type, event) {\n  let list = cbs[type];\n  if (!list) {\n    return;\n  }\n  switch (type) {\n    case 'keydown':\n    case 'keyup':\n      if (list[event.keyCode]) {\n        list[event.keyCode](type, event);\n      }\n      break;\n    case 'mouseup':\n    case 'mousedown': {\n      let x = event.pageX;\n      let y = event.pageY;\n      let button = event.button;\n      for (let ii = 0; ii < list.length; ++ii) {\n        let elem = list[ii];\n        let pos = elem[0];\n        if (x >= pos.x && x < pos.x + pos.w &&\n          y >= pos.y && y < pos.y + pos.h &&\n          (pos.button < 0 || pos.button === button)\n        ) {\n          elem[1](type, event);\n          break;\n        }\n      }\n    } break;\n    default:\n      assert(false);\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n// Some code from Turbulenz: Copyright (c) 2012-2013 Turbulenz Limited\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* global navigator */\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst { cmd_parse } = require('./cmds.js');\nconst engine = require('./engine.js');\nconst in_event = require('./in_event.js');\nconst local_storage = require('./local_storage.js');\nconst { abs, max, min, sqrt } = Math;\nconst pointer_lock = require('./pointer_lock.js');\nconst { soundResume } = require('./sound.js');\nconst { vec2, v2add, v2copy, v2lengthSq, v2set, v2scale, v2sub } = require('./vmath.js');\n\nconst UP_EDGE = 0; // only for pads, which use === null as \"up\"\nconst UP = 0; // only for key/mouse\nconst DOWN = 1;\nconst DOWN_EDGE = 2; // only for pads\n\n// per-app overrideable options\nconst TOUCH_AS_MOUSE = true;\nlet map_analog_to_dpad = true;\n\nlet mouse_log = false;\n\nexport const ANY = -2;\nexport const POINTERLOCK = -1;\n\nexport let KEYS = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  RETURN: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  INS: 45,\n  DEL: 46,\n  NUMPAD_DIVIDE: 111,\n  EQUALS: 187,\n  MINUS: 189,\n  SLASH: 191,\n  TILDE: 192,\n};\n(function () {\n  for (let ii = 1; ii <= 12; ++ii) {\n    KEYS[`F${ii}`] = 111 + ii;\n  }\n  for (let ii = 48; ii <= 90; ++ii) { // 0-9;A-Z\n    KEYS[String.fromCharCode(ii)] = ii;\n  }\n}());\nif (typeof Proxy === 'function') {\n  // Catch referencing keys that are not in our map\n  KEYS = new Proxy(KEYS, {\n    get: function (target, prop) {\n      let ret = target[prop];\n      assert(ret);\n      return ret;\n    }\n  });\n}\nexport const PAD = {\n  A: 0,\n  SELECT: 0, // GLOV name\n  B: 1,\n  CANCEL: 1, // GLOV name\n  X: 2,\n  Y: 3,\n  LB: 4,\n  LEFT_BUMPER: 4,\n  RB: 5,\n  RIGHT_BUMPER: 5,\n  LT: 6,\n  LEFT_TRIGGER: 6,\n  RT: 7,\n  RIGHT_TRIGGER: 7,\n  BACK: 8,\n  START: 9,\n  LEFT_STICK: 10,\n  RIGHT_STICK: 11,\n  UP: 12,\n  DOWN: 13,\n  LEFT: 14,\n  RIGHT: 15,\n  ANALOG_UP: 20,\n  ANALOG_LEFT: 21,\n  ANALOG_DOWN: 22,\n  ANALOG_RIGHT: 23,\n};\n\nlet pad_to_touch;\n\nlet canvas;\nlet key_state_new = {};\nlet pad_states = []; // One map per gamepad to pad button states\nlet gamepad_data = []; // Other tracking data per gamepad\nlet mouse_pos = vec2(); // in DOM coordinates, not canvas or virtual\nlet last_mouse_pos = vec2();\nlet mouse_pos_is_touch = false;\nlet mouse_over_captured = false;\nlet mouse_down = [];\nlet mouse_wheel = 0;\nlet movement_questionable_frames = 0;\nconst MOVEMENT_QUESTIONABLE_FRAMES = 2; // Need at least 2\n\nlet input_eaten_kb = false;\nlet input_eaten_mouse = false;\n\nlet touches = {}; // `m${button}` or touch_id -> TouchData\n\nexport let touch_mode = local_storage.getJSON('touch_mode', false);\nexport let pad_mode = local_storage.getJSON('pad_mode', false);\n\ncmd_parse.registerValue('mouse_log', {\n  type: cmd_parse.TYPE_INT,\n  range: [0, 1],\n  get: () => mouse_log,\n  set: (v) => (mouse_log = v),\n});\n\nfunction eventTimestamp(event) {\n  if (event && event.timeStamp) {\n    // assert((event.timeStamp < 1e12) === (engine.hrtime < 1e12));\n    // Must both be high res times, or both not!\n    if ((event.timeStamp < 1e12) !== (engine.hrtime < 1e12)) {\n      return engine.hrtime;\n    }\n    return event.timeStamp;\n  }\n  return engine.hrtime;\n}\n\nfunction TouchData(pos, touch, button, event) {\n  this.delta = vec2();\n  this.total = 0;\n  this.cur_pos = pos.slice(0);\n  this.start_pos = pos.slice(0);\n  this.touch = touch;\n  this.button = button;\n  this.start_time = Date.now();\n  this.dispatched = false;\n  this.dispatched_drag_over = false;\n  this.up_edge = 0;\n  this.down_edge = 0;\n  this.state = DOWN;\n  this.down_time = 0;\n  this.origin_time = eventTimestamp(event);\n}\nTouchData.prototype.down = function (event, is_edge) {\n  if (is_edge) {\n    this.down_edge++;\n  }\n  this.state = DOWN;\n  this.origin_time = eventTimestamp(event);\n};\n\nconst MIN_EVENT_TIME_DELTA = 0.01; // fractions of a millisecond\nfunction timeDelta(event, origin_time) {\n  let et = eventTimestamp(event);\n  // timestamps on events are often back in time relative to the last tick time\n  return max(et - origin_time, MIN_EVENT_TIME_DELTA);\n}\n\nfunction KeyData() {\n  this.down_edge = 0;\n  // this.down_start = 0;\n  this.origin_time = 0;\n  this.down_time = 0;\n  this.up_edge = 0;\n  this.state = UP;\n}\nKeyData.prototype.keyUp = function (event) {\n  ++this.up_edge;\n  this.down_time += timeDelta(event, this.origin_time);\n  this.state = UP;\n};\n\nfunction setMouseToMid() {\n  v2set(mouse_pos, engine.width*0.5/camera2d.domToCanvasRatio(), engine.height*0.5/camera2d.domToCanvasRatio());\n}\n\nexport function pointerLocked() {\n  return pointer_lock.isLocked();\n}\nlet pointerlock_touch_id = `m${POINTERLOCK}`;\n// only works reliably when called from an event handler\nexport function pointerLockEnter(when) {\n  pointer_lock.enter(when);\n}\nfunction onPointerLockEnter() {\n  if (touch_mode) {\n    return;\n  }\n  let touch_data = touches[pointerlock_touch_id];\n  setMouseToMid();\n  if (touch_data) {\n    v2copy(touch_data.start_pos, mouse_pos);\n    touch_data.state = DOWN;\n    touch_data.origin_time = engine.hrtime;\n  } else {\n    touch_data = touches[pointerlock_touch_id] = new TouchData(mouse_pos, false, POINTERLOCK, null);\n  }\n  movement_questionable_frames = MOVEMENT_QUESTIONABLE_FRAMES;\n}\nexport function pointerLockExit() {\n  let touch_data = touches[pointerlock_touch_id];\n  if (touch_data) {\n    v2copy(touch_data.cur_pos, mouse_pos);\n    // no UP_EDGE for this\n    touch_data.state = UP;\n  }\n  pointer_lock.exit();\n  movement_questionable_frames = MOVEMENT_QUESTIONABLE_FRAMES;\n}\n\nlet last_event;\nconst skip = { isTrusted: 1, sourceCapabilities: 1, path: 1, currentTarget: 1, view: 1 };\nfunction eventlog(event) {\n  if (event === last_event) {\n    return;\n  }\n  last_event = event;\n  let pairs = [];\n  for (let k in event) {\n    let v = event[k];\n    if (!v || typeof v === 'function' || k.toUpperCase() === k || skip[k]) {\n      continue;\n    }\n    pairs.push(`${k}:${v.id || v}`);\n  }\n  console.log(`${engine.global_frame_index} ${event.type} ${pointerLocked()?'ptrlck':'unlckd'} ${pairs.join(',')}`);\n}\n\nfunction letEventThrough(event) {\n  return event.target.tagName === 'INPUT' || String(event.target.className).indexOf('noglov') !== -1;\n}\n\nfunction ignored(event) {\n  // eventlog(event);\n  if (!letEventThrough(event)) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n\nlet unload_protected = false;\nfunction beforeUnload(e) {\n  if (unload_protected) {\n    // Cancel the event\n    e.preventDefault();\n    // Chrome requires returnValue to be set\n    e.returnValue = 'Are you sure you want to quit?';\n  } else {\n    engine.releaseCanvas();\n  }\n}\nfunction protectUnload(enable) {\n  unload_protected = enable;\n}\n\nfunction onKeyUp(event) {\n  protectUnload(event.ctrlKey);\n  let code = event.keyCode;\n  if (!letEventThrough(event)) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  if (code === KEYS.ESC && pointerLocked()) {\n    pointerLockExit();\n  }\n  // Letting through to our code regardless of no_stop, because we handle things like ESC in INPUT elements\n\n  let ks = key_state_new[code];\n  if (ks && ks.state === DOWN) {\n    ks.keyUp(event);\n  }\n\n  in_event.handle('keyup', event);\n}\n\nfunction onKeyDown(event) {\n  protectUnload(event.ctrlKey);\n  let code = event.keyCode;\n  let no_stop = letEventThrough(event) ||\n    code >= KEYS.F5 && code <= KEYS.F12 || // Chrome debug hotkeys\n    code === KEYS.I && (event.altKey && event.metaKey || event.ctrlKey && event.shiftKey); // Safari, alternate Chrome\n  if (!no_stop) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n  // console.log(`${event.code} ${event.keyCode}`);\n  soundResume();\n\n  // Letting through to our code regardless of no_stop, because we handle things like ESC in INPUT elements\n  let ks = key_state_new[code];\n  if (!ks) {\n    ks = key_state_new[code] = new KeyData();\n  }\n  if (ks.state !== DOWN) { // not a repeat event\n    ++ks.down_edge;\n    ks.state = DOWN;\n    ks.origin_time = eventTimestamp(event);\n    // ks.down_start = ks.origin_time;\n\n    in_event.handle('keydown', event);\n  }\n}\n\nlet mouse_moved = false;\nlet temp_delta = vec2();\nlet last_abs_move = 0;\nlet last_abs_move_time = 0;\nfunction onMouseMove(event, no_stop) {\n  /// eventlog(event);\n  // Don't block mouse button 3, that's the Back button\n  if (!letEventThrough(event) && !no_stop && event.button !== 3) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (touch_mode) {\n      local_storage.setJSON('touch_mode', false);\n      touch_mode = false;\n    }\n    if (pad_mode) {\n      local_storage.setJSON('pad_mode', false);\n      pad_mode = false;\n    }\n  }\n  mouse_moved = true;\n  // offsetX/layerX return position relative to text-entry boxes, not good!\n  // clientX/clientY do not handle weird scrolling that happens on iOS, but\n  //   should not affect mouse events (but maybe on Safari desktop?)\n  mouse_pos[0] = event.pageX;\n  mouse_pos[1] = event.pageY;\n  // if (event.offsetX !== undefined) {\n  //   mouse_pos[0] = event.offsetX;\n  //   mouse_pos[1] = event.offsetY;\n  // } else {\n  //   mouse_pos[0] = event.layerX;\n  //   mouse_pos[1] = event.layerY;\n  // }\n  mouse_pos_is_touch = false;\n\n  let any_movement = false;\n  if (pointerLocked()) {\n    setMouseToMid();\n    if (event.movementX || event.movementY) {\n      // Smooth out (ignore) large jumps in movement\n      // This is, I believe, just a bug with Chromium on Windows, as it repositions the hidden mouse cursor\n      let ts = event.timeStamp || Date.now();\n      let abs_move = abs(event.movementX) + abs(event.movementY);\n      if (abs_move > 200 && (abs_move > 3 * last_abs_move || ts - last_abs_move_time > 1000)) {\n        console.log(`Ignoring mousemove with sudden large delta: ${event.movementX},${event.movementY}`);\n      } else {\n        v2set(temp_delta, event.movementX || 0, event.movementY || 0);\n        any_movement = true;\n      }\n      last_abs_move = abs_move;\n      last_abs_move_time = ts;\n    }\n  } else {\n    v2sub(temp_delta, mouse_pos, last_mouse_pos);\n    if (temp_delta[0] || temp_delta[1]) {\n      any_movement = true;\n    }\n    v2copy(last_mouse_pos, mouse_pos);\n  }\n  if (any_movement && movement_questionable_frames && v2lengthSq(temp_delta) > 100*100) {\n    // giant movement right after entering or exiting pointer lock, ignore (Chrome bug)\n    // We get these unreasonable jumps in both movementXY and the other, presumably\n    // because pointerLocked() is slightly out of sync, though the large .movementX/Y\n    // is clearly erroneous.\n    any_movement = false;\n  }\n  if (any_movement) {\n    for (let button = POINTERLOCK; button < mouse_down.length; ++button) {\n      if (mouse_down[button] || button === POINTERLOCK && pointerLocked()) {\n        let touch_data = touches[`m${button}`];\n        if (touch_data) {\n          v2add(touch_data.delta, touch_data.delta, temp_delta);\n          touch_data.total += abs(temp_delta[0]) + abs(temp_delta[1]);\n          v2copy(touch_data.cur_pos, mouse_pos);\n        }\n      }\n    }\n  }\n}\n\nfunction onMouseDown(event) {\n  if (mouse_log) {\n    eventlog(event);\n  }\n  onMouseMove(event); // update mouse_pos\n  soundResume();\n  let no_click = letEventThrough(event);\n\n  let button = event.button;\n  mouse_down[button] = mouse_pos.slice(0);\n  let touch_id = `m${button}`;\n  if (touches[touch_id]) {\n    v2copy(touches[touch_id].start_pos, mouse_pos);\n  } else {\n    touches[touch_id] = new TouchData(mouse_pos, false, button, event);\n  }\n  touches[touch_id].down(event, !no_click);\n  if (!no_click) {\n    in_event.handle('mousedown', event);\n  }\n  //This solves input bug when game is running as iframe. E.g. Facebook Instant\n  if (window.focus) {\n    window.focus();\n  }\n}\n\nfunction onMouseUp(event) {\n  if (mouse_log) {\n    eventlog(event);\n  }\n  onMouseMove(event); // update mouse_pos\n  let no_click = letEventThrough(event);\n  let button = event.button;\n  if (mouse_down[button]) {\n    let touch_id = `m${button}`;\n    let touch_data = touches[touch_id];\n    if (touch_data) {\n      v2copy(touch_data.cur_pos, mouse_pos);\n      if (!no_click) {\n        touch_data.up_edge++;\n      }\n      touch_data.state = UP;\n      touch_data.down_time += timeDelta(event, touch_data.origin_time);\n    }\n    delete mouse_down[button];\n  }\n  if (!no_click) {\n    in_event.handle('mouseup', event);\n  }\n}\n\nfunction onWheel(event) {\n  onMouseMove(event, true);\n  let delta = -event.deltaY || event.wheelDelta || -event.detail;\n  if (delta > 0) {\n    mouse_wheel++;\n  } else if (delta < 0) {\n    mouse_wheel--;\n  }\n}\n\nlet touch_pos = vec2();\nlet released_touch_id = 0;\nfunction onTouchChange(event) {\n  // eventlog(event);\n  // Using .pageX/Y here because on iOS when a text entry is selected, it scrolls\n  // our canvas offscreen.  Should maybe have the canvas resize and use clientX\n  // instead, but this works well enough.\n  soundResume();\n  if (!touch_mode) {\n    local_storage.set('touch_mode', true);\n    touch_mode = true;\n  }\n  if (pad_mode) {\n    local_storage.set('pad_mode', true);\n    pad_mode = true;\n  }\n  if (event.cancelable !== false) {\n    event.preventDefault();\n  }\n  let ct = event.touches;\n  let seen = {};\n\n  let new_count = ct.length;\n  let old_count = new_count;\n  // Look for press and movement\n  for (let ii = 0; ii < new_count; ++ii) {\n    let touch = ct[ii];\n    let last_touch = touches[touch.identifier];\n    v2set(touch_pos, touch.pageX, touch.pageY);\n    if (!last_touch) {\n      last_touch = touches[touch.identifier] = new TouchData(touch_pos, true, 0, event);\n      last_touch.down(event, true);\n      --old_count;\n      in_event.handle('mousedown', touch);\n    } else {\n      v2sub(temp_delta, touch_pos, last_touch.cur_pos);\n      v2add(last_touch.delta, last_touch.delta, temp_delta);\n      last_touch.total += abs(temp_delta[0]) + abs(temp_delta[1]);\n      v2copy(last_touch.cur_pos, touch_pos);\n    }\n\n    seen[touch.identifier] = true;\n    if (TOUCH_AS_MOUSE && new_count === 1) {\n      // Single touch, treat as mouse movement\n      v2copy(mouse_pos, touch_pos);\n      mouse_pos_is_touch = true;\n    }\n  }\n  // Look for release, if releasing exactly one final touch\n  let released_touch;\n  let released_ids = [];\n  for (let id in touches) {\n    if (!seen[id]) {\n      let touch = touches[id];\n      if (touch.touch && touch.state === DOWN) {\n        ++old_count;\n        released_touch = touch;\n        released_ids.push(id);\n        in_event.handle('mouseup', { pageX: touch.cur_pos[0], pageY: touch.cur_pos[1] });\n        touch.up_edge++;\n        touch.state = UP;\n        touch.down_time += timeDelta(event, touch.origin_time);\n        touch.release = true;\n      }\n    }\n  }\n  for (let ii = 0; ii < released_ids.length; ++ii) {\n    let id = released_ids[ii];\n    let touch = touches[id];\n    // get new id, not overlapping with touch.identifier values,\n    // so that if we get a new touch event before the next tick, we still see the release, etc\n    let new_id = `r${++released_touch_id}`;\n    delete touches[id];\n    touches[new_id] = touch;\n  }\n  if (TOUCH_AS_MOUSE) {\n    if (old_count === 1 && new_count === 0) {\n      delete mouse_down[0];\n      v2copy(mouse_pos, released_touch.cur_pos);\n      mouse_pos_is_touch = true;\n    } else if (new_count === 1) {\n      let touch = ct[0];\n      if (!old_count) {\n        mouse_down[0] = vec2(touch.pageX, touch.pageY);\n      }\n      v2set(mouse_pos, touch.pageX, touch.pageY);\n      mouse_pos_is_touch = true;\n    } else if (new_count > 1) {\n      // multiple touches, release mouse_down without emitting click\n      delete mouse_down[0];\n    }\n  }\n}\n\nfunction onBlurOrFocus(evt) {\n  protectUnload(false);\n  for (let code in key_state_new) {\n    let ks = key_state_new[code];\n    if (ks.state === DOWN) {\n      ks.keyUp(evt);\n    }\n  }\n}\n\nlet ANALOG_MAP = {};\nfunction genAnalogMap() {\n  if (map_analog_to_dpad) {\n    ANALOG_MAP[PAD.LEFT] = PAD.ANALOG_LEFT;\n    ANALOG_MAP[PAD.RIGHT] = PAD.ANALOG_RIGHT;\n    ANALOG_MAP[PAD.UP] = PAD.ANALOG_UP;\n    ANALOG_MAP[PAD.DOWN] = PAD.ANALOG_DOWN;\n  }\n}\n\nexport function startup(_canvas, params) {\n  canvas = _canvas;\n  pointer_lock.startup(canvas, onPointerLockEnter);\n  if (params.map_analog_to_dpad !== undefined) {\n    map_analog_to_dpad = params.map_analog_to_dpad;\n  }\n  pad_to_touch = params.pad_to_touch;\n  genAnalogMap();\n\n  let passive_param = false;\n  try {\n    let opts = Object.defineProperty({}, 'passive', {\n      get: function () {\n        passive_param = { passive: false };\n        return false;\n      }\n    });\n    window.addEventListener('test', null, opts);\n    window.removeEventListener('test', null, opts);\n  } catch (e) {\n    passive_param = false;\n  }\n\n  window.addEventListener('keydown', onKeyDown, false);\n  window.addEventListener('keyup', onKeyUp, false);\n\n  window.addEventListener('click', ignored, false);\n  window.addEventListener('contextmenu', ignored, false);\n  window.addEventListener('mousemove', onMouseMove, false);\n  window.addEventListener('mousedown', onMouseDown, false);\n  window.addEventListener('mouseup', onMouseUp, false);\n  if (window.WheelEvent) {\n    window.addEventListener('wheel', onWheel, passive_param);\n  } else {\n    window.addEventListener('DOMMouseScroll', onWheel, false);\n    window.addEventListener('mousewheel', onWheel, false);\n  }\n\n  window.addEventListener('blur', onBlurOrFocus, false);\n  window.addEventListener('focus', onBlurOrFocus, false);\n\n  canvas.addEventListener('touchstart', onTouchChange, passive_param);\n  canvas.addEventListener('touchmove', onTouchChange, passive_param);\n  canvas.addEventListener('touchend', onTouchChange, passive_param);\n  canvas.addEventListener('touchcancel', onTouchChange, passive_param);\n\n  // For iOS, this is needed in test_fullscreen, but not here, for some reason\n  //window.addEventListener('gesturestart', ignored, false);\n\n  window.addEventListener('beforeunload', beforeUnload, false);\n}\n\n\nconst DEADZONE = 0.26;\nconst DEADZONE_SQ = DEADZONE * DEADZONE;\nconst NUM_STICKS = 2;\nconst PAD_THRESHOLD = 0.25; // for turning analog motion into digital events\n\nfunction getGamepadData(idx) {\n  let gpd = gamepad_data[idx];\n  if (!gpd) {\n    gpd = gamepad_data[idx] = {\n      id: idx,\n      timestamp: 0,\n      sticks: new Array(NUM_STICKS),\n    };\n    for (let ii = 0; ii < NUM_STICKS; ++ii) {\n      gpd.sticks[ii] = vec2();\n    }\n    pad_states[idx] = {};\n  }\n  return gpd;\n}\n\nfunction updatePadState(gpd, ps, b, padcode) {\n  if (b && !ps[padcode]) {\n    ps[padcode] = DOWN_EDGE;\n    if (!pad_mode) {\n      local_storage.setJSON('pad_mode', true);\n      pad_mode = true;\n    }\n    if (padcode === pad_to_touch) {\n      let touch_id = `g${gpd.id}`;\n      if (touches[touch_id]) {\n        setMouseToMid();\n        v2copy(touches[touch_id].start_pos, mouse_pos);\n      } else {\n        touches[touch_id] = new TouchData(mouse_pos, false, 0, null);\n      }\n      touches[touch_id].down(null, true);\n    }\n  } else if (!b && ps[padcode]) {\n    ps[padcode] = UP_EDGE;\n    if (padcode === pad_to_touch) {\n      let touch_id = `g${gpd.id}`;\n      let touch_data = touches[touch_id];\n      if (touch_data) {\n        setMouseToMid();\n        v2copy(touch_data.cur_pos, mouse_pos);\n        touch_data.up_edge++;\n        touch_data.state = UP;\n        touch_data.down_time += max(engine.hrtime - touch_data.origin_time, MIN_EVENT_TIME_DELTA);\n      }\n    }\n  }\n}\n\nfunction gamepadUpdate() {\n  let gamepads = (navigator.gamepads ||\n    navigator.webkitGamepads ||\n    (navigator.getGamepads && navigator.getGamepads()) ||\n    (navigator.webkitGetGamepads && navigator.webkitGetGamepads()));\n\n  if (gamepads) {\n    let numGamePads = gamepads.length;\n    for (let ii = 0; ii < numGamePads; ii++) {\n      let gamepad = gamepads[ii];\n      if (!gamepad) {\n        continue;\n      }\n      let gpd = getGamepadData(ii);\n      let ps = pad_states[ii];\n      // Update button states\n      if (gpd.timestamp < gamepad.timestamp) {\n        let buttons = gamepad.buttons;\n        gpd.timestamp = gamepad.timestamp;\n\n        let numButtons = buttons.length;\n        for (let n = 0; n < numButtons; n++) {\n          let value = buttons[n];\n          if (typeof value === 'object') {\n            value = value.value;\n          }\n          value = value > 0.5;\n          updatePadState(gpd, ps, value, n);\n        }\n      }\n\n      // Update axes states\n      let axes = gamepad.axes;\n      if (axes.length >= NUM_STICKS * 2) {\n        for (let n = 0; n < NUM_STICKS; ++n) {\n          let pair = gpd.sticks[n];\n          v2set(pair, axes[n*2], -axes[n*2 + 1]);\n          let magnitude = v2lengthSq(pair);\n          if (magnitude > DEADZONE_SQ) {\n            magnitude = sqrt(magnitude);\n\n            // Normalize lX and lY\n            v2scale(pair, pair, 1 / magnitude);\n\n            // Clip the magnitude at its max possible value\n            magnitude = min(magnitude, 1);\n\n            // Adjust magnitude relative to the end of the dead zone\n            magnitude = ((magnitude - DEADZONE) / (1 - DEADZONE));\n\n            v2scale(pair, pair, magnitude);\n          } else {\n            v2set(pair, 0, 0);\n          }\n\n          // Apply \"movement\" to drag events\n          if (n <= 1 && pad_to_touch !== undefined) {\n            let touch_data = touches[`g${gpd.id}`];\n            if (touch_data) {\n              v2scale(temp_delta, pair, engine.this_frame_time);\n              v2add(touch_data.delta, touch_data.delta, temp_delta);\n              touch_data.total += abs(temp_delta[0]) + abs(temp_delta[1]);\n              setMouseToMid();\n              v2copy(touch_data.cur_pos, mouse_pos);\n            }\n          }\n        }\n\n        // Calculate virtual directional buttons\n        updatePadState(gpd, ps, gpd.sticks[0][0] < -PAD_THRESHOLD, PAD.ANALOG_LEFT);\n        updatePadState(gpd, ps, gpd.sticks[0][0] > PAD_THRESHOLD, PAD.ANALOG_RIGHT);\n        updatePadState(gpd, ps, gpd.sticks[0][1] < -PAD_THRESHOLD, PAD.ANALOG_DOWN);\n        updatePadState(gpd, ps, gpd.sticks[0][1] > PAD_THRESHOLD, PAD.ANALOG_UP);\n      }\n    }\n  }\n}\n\nexport function tickInput() {\n  // browser frame has occurred since the call to endFrame(),\n  // we should now have `touches` and `key_state` populated with edge events\n  if (movement_questionable_frames) {\n    --movement_questionable_frames;\n  }\n\n  // update timing of key down states\n  let hrtime = engine.hrtime;\n  for (let code in key_state_new) {\n    let ks = key_state_new[code];\n    if (ks.state === DOWN) {\n      ks.down_time += max(hrtime - ks.origin_time, MIN_EVENT_TIME_DELTA);\n      // assert(hrtime >= ks.origin_time); - should be true, but often isn't\n      ks.origin_time = hrtime;\n    }\n  }\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (touch_data.state === DOWN) {\n      touch_data.down_time += max(hrtime - touch_data.origin_time, MIN_EVENT_TIME_DELTA);\n      // assert(hrtime >= touch_data.origin_time); - should be true, but often isn't\n      touch_data.origin_time = hrtime;\n    }\n  }\n\n  mouse_over_captured = false;\n  gamepadUpdate();\n  in_event.topOfFrame();\n  if (touches[pointerlock_touch_id] && !pointerLocked()) {\n    pointerLockExit();\n  }\n}\n\nfunction endFrameTickMap(map) {\n  Object.keys(map).forEach((keycode) => {\n    switch (map[keycode]) {\n      case DOWN_EDGE:\n        map[keycode] = DOWN;\n        break;\n      case UP_EDGE:\n        delete map[keycode];\n        break;\n      default:\n    }\n  });\n}\nexport function endFrame(skip_mouse) {\n  for (let code in key_state_new) {\n    let ks = key_state_new[code];\n    if (ks.state === UP) {\n      key_state_new[code] = null;\n      delete key_state_new[code];\n    } else {\n      ks.up_edge = 0;\n      ks.down_edge = 0;\n      ks.down_time = 0;\n    }\n  }\n\n  pad_states.forEach(endFrameTickMap);\n  if (!skip_mouse) {\n    for (let touch_id in touches) {\n      let touch_data = touches[touch_id];\n      if (touch_data.state === UP) {\n        // Manually null out touches[touch_id] - some Chrome optimizer bug causes\n        // callers to later get this old value (instead of the newly added on with\n        // the same ID) unless we null it out (then they seem to get the new one).\n        touches[touch_id] = null;\n        delete touches[touch_id];\n      } else {\n        touch_data.delta[0] = touch_data.delta[1] = 0;\n        touch_data.dispatched = false;\n        touch_data.dispatched_drag_over = false;\n        touch_data.up_edge = 0;\n        touch_data.down_edge = 0;\n        touch_data.down_time = 0;\n      }\n    }\n    mouse_wheel = 0;\n    input_eaten_mouse = false;\n  }\n  input_eaten_kb = false;\n  mouse_moved = false;\n}\n\nexport function eatAllInput(skip_mouse) {\n  // destroy touches, remove all down and up edges\n  endFrame(skip_mouse);\n  if (!skip_mouse) {\n    mouse_over_captured = true;\n    input_eaten_mouse = true;\n  }\n  input_eaten_kb = true;\n}\n\nexport function eatAllKeyboardInput() {\n  eatAllInput(true);\n}\n\n// returns position mapped to current camera view\nexport function mousePos(dst) {\n  dst = dst || vec2();\n  camera2d.domToVirtual(dst, mouse_pos);\n  return dst;\n}\n\nexport function mouseMoved() {\n  return mouse_moved;\n}\n\nexport function mouseWheel() {\n  let ret = mouse_wheel;\n  mouse_wheel = 0;\n  return ret;\n}\n\nfunction mousePosParam(param) {\n  param = param || {};\n  return {\n    x: param.x === undefined ? camera2d.x0Real() : param.x,\n    y: param.y === undefined ? camera2d.y0Real() : param.y,\n    w: param.w === undefined ? camera2d.wReal() : param.w,\n    h: param.h === undefined ? camera2d.hReal() : param.h,\n    button: param.button === undefined ? ANY : param.button,\n  };\n}\n\nlet check_pos = vec2();\nfunction checkPos(pos, param) {\n  camera2d.domToVirtual(check_pos, pos);\n  return check_pos[0] >= param.x && (param.w === Infinity || check_pos[0] < param.x + param.w) &&\n    check_pos[1] >= param.y && (param.h === Infinity || check_pos[1] < param.y + param.h);\n}\n\nexport function mouseOver(param) {\n  if (mouse_over_captured || pointerLocked()) {\n    return false;\n  }\n  param = param || {};\n  let pos_param = mousePosParam(param);\n\n  // eat mouse up/down/drag events\n  if (!param.peek) {\n    for (let id in touches) {\n      let touch = touches[id];\n      if (checkPos(touch.cur_pos, pos_param)) {\n        touch.down_edge = 0;\n        touch.up_edge = 0;\n        if (!param || !param.drag_target) {\n          touch.dispatched = true;\n        }\n      }\n    }\n  }\n\n  if (checkPos(mouse_pos, pos_param)) {\n    if (!param.peek) {\n      mouse_over_captured = true;\n    }\n    return true;\n  }\n  return false;\n}\n\nexport function mouseDown(button) {\n  if (button === ANY) {\n    return mouseDown(0) || mouseDown(2);\n  }\n  button = button || 0;\n  return !input_eaten_mouse && mouse_down[button];\n}\n\nexport function mousePosIsTouch() {\n  return mouse_pos_is_touch;\n}\n\nexport function isTouchDown(param) {\n  if (input_eaten_mouse) {\n    return false;\n  }\n  let pos_param = mousePosParam(param);\n  for (let id in touches) {\n    let touch = touches[id];\n    if (checkPos(touch.cur_pos, pos_param)) {\n      return check_pos.slice(0);\n    }\n  }\n  return false;\n}\n\nexport function numTouches() {\n  return Object.keys(touches).length;\n}\n\nexport function keyDown(keycode) {\n  if (input_eaten_kb) {\n    return 0;\n  }\n  let ks = key_state_new[keycode];\n  if (!ks) {\n    return 0;\n  }\n  if (ks.state === DOWN) {\n    assert(ks.down_time); // Will fire if we call keyDown() before tickInput()\n  }\n  return ks.down_time;\n}\nexport function keyDownEdge(keycode, opts) {\n  if (opts && opts.in_event_cb && !input_eaten_kb) {\n    in_event.on('keydown', keycode, opts.in_event_cb);\n  }\n\n  let ks = key_state_new[keycode];\n  if (!ks) {\n    return 0;\n  }\n  let r = ks.down_edge;\n  ks.down_edge = 0;\n  return r;\n}\nexport function keyUpEdge(keycode, opts) {\n  if (opts && opts.in_event_cb && !input_eaten_kb) {\n    in_event.on('keyup', keycode, opts.in_event_cb);\n  }\n\n  let ks = key_state_new[keycode];\n  if (!ks) {\n    return 0;\n  }\n  let r = ks.up_edge;\n  ks.up_edge = 0;\n  return r;\n}\n\nexport function padGetAxes(out, stickindex, padindex) {\n  assert(stickindex >= 0 && stickindex < NUM_STICKS);\n  if (padindex === undefined) {\n    let sub = vec2();\n    v2set(out, 0, 0);\n    for (let ii = 0; ii < gamepad_data.length; ++ii) {\n      padGetAxes(sub, stickindex, ii);\n      v2add(out, out, sub);\n    }\n    return;\n  }\n  let sticks = getGamepadData(padindex).sticks;\n  v2copy(out, sticks[stickindex]);\n}\n\nfunction padButtonDownInternal(gpd, ps, padcode) {\n  if (ps[padcode]) {\n    return engine.this_frame_time;\n  }\n  return 0;\n}\nfunction padButtonDownEdgeInternal(gpd, ps, padcode) {\n  if (ps[padcode] === DOWN_EDGE) {\n    ps[padcode] = DOWN;\n    return engine.this_frame_time;\n  }\n  return 0;\n}\nfunction padButtonUpEdgeInternal(gpd, ps, padcode) {\n  if (ps[padcode] === UP_EDGE) {\n    delete ps[padcode];\n    return engine.this_frame_time;\n  }\n  return 0;\n}\n\nfunction padButtonShared(fn, padcode, padindex) {\n  assert(padcode !== undefined);\n  let r = 0;\n  // Handle calling without a specific pad index\n  if (padindex === undefined) {\n    for (let ii = 0; ii < pad_states.length; ++ii) {\n      r += padButtonShared(fn, padcode, ii);\n    }\n    return r;\n  }\n\n  if (input_eaten_mouse) {\n    return 0;\n  }\n  let gpd = gamepad_data[padindex];\n  if (!gpd) {\n    return 0;\n  }\n  let ps = pad_states[padindex];\n\n  r += ANALOG_MAP[padcode] && fn(gpd, ps, ANALOG_MAP[padcode]) || 0;\n  r += fn(gpd, ps, padcode);\n  return r;\n}\nexport function padButtonDown(padcode, padindex) {\n  return padButtonShared(padButtonDownInternal, padcode, padindex);\n}\nexport function padButtonDownEdge(padcode, padindex) {\n  return padButtonShared(padButtonDownEdgeInternal, padcode, padindex);\n}\nexport function padButtonUpEdge(padcode, padindex) {\n  return padButtonShared(padButtonUpEdgeInternal, padcode, padindex);\n}\n\nlet start_pos = vec2();\nlet cur_pos = vec2();\nlet delta = vec2();\n\nexport function mouseUpEdge(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n  let max_click_dist = param.max_dist || 50; // TODO: relative to camera distance?\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!touch_data.up_edge ||\n      !(button === ANY || button === touch_data.button) ||\n      touch_data.total > max_click_dist\n    ) {\n      continue;\n    }\n    if (checkPos(touch_data.cur_pos, pos_param)) {\n      if (!param.peek) {\n        touch_data.up_edge = 0;\n      }\n      return {\n        button: touch_data.button,\n        pos: check_pos.slice(0),\n        start_time: touch_data.start_time,\n      };\n    }\n  }\n\n  if (param.in_event_cb && !input_eaten_mouse && !mouse_over_captured) {\n    // TODO: Maybe need to also pass along earlier exclusions?  Working okay for now though.\n    if (!param.phys) {\n      param.phys = {};\n    }\n    param.phys.button = typeof param.in_event_button === 'number' ? param.in_event_button : button;\n    camera2d.virtualToDomPosParam(param.phys, pos_param);\n    in_event.on('mouseup', param.phys, param.in_event_cb);\n  }\n  return false;\n}\nexports.click = mouseUpEdge;\n\nexport function mouseDownEdge(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!touch_data.down_edge ||\n      !(button === ANY || button === touch_data.button)\n    ) {\n      continue;\n    }\n    if (checkPos(touch_data.cur_pos, pos_param)) {\n      if (!param.peek) {\n        touch_data.down_edge = 0;\n      }\n      return {\n        button: touch_data.button,\n        pos: check_pos.slice(0),\n        start_time: touch_data.start_time,\n      };\n    }\n  }\n\n  if (param.in_event_cb && !input_eaten_mouse && !mouse_over_captured) {\n    // TODO: Maybe need to also pass along earlier exclusions?  Working okay for now though.\n    if (!param.phys) {\n      param.phys = {};\n    }\n    param.phys.button = button;\n    camera2d.virtualToDomPosParam(param.phys, pos_param);\n    in_event.on('mousedown', param.phys, param.in_event_cb);\n  }\n  return false;\n}\n\n// Completely consume any clicks or drags coming from a mouse down event in this\n// area - used to catch focus leaving an edit box without wanting to do what\n// a click would normally do.\nexport function mouseConsumeClicks(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!(button === ANY || button === touch_data.button)) {\n      continue;\n    }\n    if (checkPos(touch_data.start_pos, pos_param)) {\n      touch_data.down_edge = 0;\n      // Set start pos so that it will not pass checkPos\n      touch_data.start_pos[0] = touch_data.start_pos[1] = Infinity;\n      // Set .total so that mouseUpEdge will not detect it as a click\n      touch_data.total = Infinity;\n    }\n  }\n}\n\nexport function drag(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n  let min_dist = param.min_dist || 0;\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!(button === ANY || button === touch_data.button) || touch_data.dispatched) {\n      continue;\n    }\n    if (checkPos(touch_data.start_pos, pos_param)) {\n      camera2d.domDeltaToVirtual(delta, [touch_data.total/2, touch_data.total/2]);\n      let total = delta[0] + delta[1];\n      if (total < min_dist) {\n        continue;\n      }\n      if (!param.peek) {\n        touch_data.dispatched = true;\n      }\n      let is_down_edge = touch_data.down_edge;\n      if (param.eat_clicks) {\n        touch_data.down_edge = touch_data.up_edge = 0;\n      }\n      if (param.payload) {\n        touch_data.drag_payload = param.payload;\n      }\n      camera2d.domToVirtual(start_pos, touch_data.start_pos);\n      camera2d.domToVirtual(cur_pos, touch_data.cur_pos);\n      camera2d.domDeltaToVirtual(delta, touch_data.delta);\n      return {\n        cur_pos,\n        start_pos,\n        delta, // this frame's delta\n        total, // total (linear) distance dragged\n        button: touch_data.button,\n        touch: touch_data.touch,\n        start_time: touch_data.start_time,\n        is_down_edge,\n        down_time: touch_data.down_time,\n      };\n    }\n  }\n  return null;\n}\n\n// a lot like drag(), refactor to share more?\nexport function longPress(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n  let max_dist = param.max_dist || 0;\n  let min_time = param.min_time || 500;\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!(button === ANY || button === touch_data.button) || touch_data.long_press_dispatched) {\n      continue;\n    }\n    if (checkPos(touch_data.start_pos, pos_param)) {\n      camera2d.domDeltaToVirtual(delta, [touch_data.total/2, touch_data.total/2]);\n      let total = delta[0] + delta[1];\n      if (total > max_dist) {\n        continue;\n      }\n      let time = Date.now() - touch_data.start_time;\n      if (time < min_time) {\n        continue;\n      }\n      if (!param.peek) {\n        // ? touch_data.dispatched = true;\n        touch_data.long_press_dispatched = true;\n      }\n      let is_down_edge = touch_data.down_edge;\n      if (param.eat_clicks) {\n        touch_data.down_edge = touch_data.up_edge = 0;\n      }\n      camera2d.domToVirtual(start_pos, touch_data.start_pos);\n      camera2d.domToVirtual(cur_pos, touch_data.cur_pos);\n      camera2d.domDeltaToVirtual(delta, touch_data.delta);\n      return {\n        long_press: true,\n        cur_pos,\n        start_pos,\n        delta, // this frame's delta\n        total, // total (linear) distance dragged\n        button: touch_data.button,\n        touch: touch_data.touch,\n        start_time: touch_data.start_time,\n        is_down_edge,\n        down_time: touch_data.down_time,\n      };\n    }\n  }\n  return null;\n}\n\nexport function dragDrop(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    // Maybe touch_data.dispatched_drag_over instead/as well?\n    if (!(button === ANY || button === touch_data.button) || touch_data.dispatched || !touch_data.drag_payload) {\n      continue;\n    }\n    if (!touch_data.up_edge) {\n      continue;\n    }\n    if (checkPos(touch_data.cur_pos, pos_param)) {\n      if (!param.peek) {\n        // Maybe touch_data.dispatched_drag_over as well?\n        touch_data.dispatched = true;\n      }\n      return { drag_payload: touch_data.drag_payload };\n    }\n  }\n  return null;\n}\n\nexport function dragOver(param) {\n  param = param || {};\n  let pos_param = mousePosParam(param);\n  let button = pos_param.button;\n\n  for (let touch_id in touches) {\n    let touch_data = touches[touch_id];\n    if (!(button === ANY || button === touch_data.button) ||\n      touch_data.dispatched || touch_data.dispatched_drag_over || // Maybe not .dispatched?\n      !touch_data.drag_payload\n    ) {\n      continue;\n    }\n    if (touch_data.state !== DOWN) {\n      continue;\n    }\n    if (checkPos(touch_data.cur_pos, pos_param)) {\n      // Separate 'dispatched' for dragOver (target) and drag (source) - they both need one dispatch per frame\n      if (!param.peek) {\n        touch_data.dispatched_drag_over = true;\n      }\n      camera2d.domToVirtual(cur_pos, touch_data.cur_pos);\n      return {\n        cur_pos,\n        drag_payload: touch_data.drag_payload\n      };\n    }\n  }\n  return null;\n}\n","// Portions Copyright 2020 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst engine = require('./engine.js');\nconst camera2d = require('./camera2d.js');\nconst in_event = require('./in_event.js');\nconst input = require('./input.js');\nconst ui = require('./ui.js');\n\nlet state_cache = {};\nlet good_url = /https?:\\/\\//;\n\n// Create an invisible A elem in the DOM so we get all of the good browsery\n// behavior for a link area.\nexport function link(param) {\n  let { x, y, w, h, url, internal, allow_modal } = param;\n  if (!url.match(good_url)) {\n    url = `${document.location.protocol}//${url}`;\n  }\n  let key = `${x}_${y}`;\n  let state = state_cache[key];\n  if (!state) {\n    state = state_cache[key] = { clicked: false };\n  }\n  let elem = ui.getElem(allow_modal, state.elem);\n  state.frame = engine.global_frame_index;\n  if (elem !== state.elem) {\n    state.elem = elem;\n    if (elem) {\n      // new DOM element, initialize\n      elem.textContent = '';\n      let a_elem = document.createElement('a');\n      a_elem.setAttribute('draggable', false);\n      a_elem.textContent = ' ';\n      a_elem.className = 'glovui_link noglov';\n      a_elem.setAttribute('target', '_blank');\n      a_elem.setAttribute('href', url);\n      state.url = url;\n      if (internal) {\n        a_elem.onclick = function (ev) {\n          ev.preventDefault();\n          state.clicked = true;\n          in_event.handle('mouseup', ev);\n        };\n      }\n      elem.appendChild(a_elem);\n      state.a_elem = a_elem;\n    }\n  }\n  if (elem) {\n    if (url !== state.url) {\n      state.a_elem.setAttribute('href', url);\n      state.url = url;\n    }\n\n    let pos = camera2d.htmlPos(x, y);\n    elem.style.left = `${pos[0]}%`;\n    elem.style.top = `${pos[1]}%`;\n    let size = camera2d.htmlSize(w, h);\n    elem.style.width = `${size[0]}%`;\n    elem.style.height = `${size[1]}%`;\n  }\n  let clicked = state.clicked;\n  state.clicked = false;\n  return clicked;\n}\n\nexport function linkText(param) {\n  let { style_link, style_link_hover, x, y, z, font_size, text, url } = param;\n  text = text || url;\n  z = z || Z.UI;\n  font_size = font_size || ui.font_height;\n  // Also: any parameter to link(), e.g. url\n  let w = ui.font.getStringWidth(style_link, font_size, text);\n  let h = font_size;\n  let mouseover = input.mouseOver({ x, y, w, h, peek: true }) && !input.mousePosIsTouch();\n  let style = mouseover ? style_link_hover : style_link;\n  ui.font.drawSized(style, x, y, z, font_size, text);\n  let underline_w = 1;\n  ui.drawLine(x, y + h - underline_w, x + w, y + h - underline_w, z - 0.5, underline_w, 0.99, style.color_vec4);\n  param.w = w;\n  param.h = h;\n  return link(param);\n}\n\nexport function linkTick() {\n  for (let key in state_cache) {\n    let state = state_cache[key];\n    if (state.frame !== engine.global_frame_index - 1) {\n      delete state_cache[key];\n    }\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint-env browser */\n\nexports.storage_prefix = 'demo';\n\nlet lsd = (function () {\n  try {\n    localStorage.test = 'test';\n    return localStorage;\n  } catch (e) {\n    return {};\n  }\n}());\nexport function get(key) {\n  key = `${exports.storage_prefix}_${key}`;\n  let ret = lsd[key];\n  if (ret === 'undefined') {\n    ret = undefined;\n  }\n  return ret;\n}\n\nexport function set(key, value) {\n  key = `${exports.storage_prefix}_${key}`;\n  if (value === undefined || value === null) {\n    delete lsd[key];\n  } else {\n    lsd[key] = value;\n  }\n}\n\nexport function setJSON(key, value) {\n  set(key, JSON.stringify(value));\n}\n\nexport function getJSON(key, def) {\n  let value = get(key);\n  if (value === undefined) {\n    return def;\n  }\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    // ignore\n  }\n  return def;\n}\n\nexport function clearAll(key_prefix) {\n  let prefix = new RegExp(`^${exports.storage_prefix}_${key_prefix || ''}`, 'u');\n  for (let key in lsd) {\n    if (key.match(prefix)) {\n      delete lsd[key];\n    }\n  }\n}\n\nexport function exportAll() {\n  let obj = {};\n  let prefix = new RegExp(`^${exports.storage_prefix}_(.*)`, 'u');\n  for (let key in lsd) {\n    let m = key.match(prefix);\n    if (m) {\n      let v = lsd[key];\n      if (v && v !== 'undefined') {\n        obj[m[1]] = v;\n      }\n    }\n  }\n  return JSON.stringify(obj);\n}\n\nexport function importAll(serialized) {\n  let obj = JSON.parse(serialized);\n  clearAll();\n  for (let key in obj) {\n    set(key, obj[key]);\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n// Some code from Turbulenz: Copyright (c) 2012-2013 Turbulenz Limited\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nexport function mat43() {\n  let r = new Float32Array(12);\n  r[0] = r[4] = r[8] = 1;\n  return r;\n}\n\nexport function m43identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  out[9] = 0;\n  out[10] = 0;\n  out[11] = 0;\n}\n\nexport function m43mul(out, a, b) {\n  let a0 = a[0];\n  let a1 = a[1];\n  let a2 = a[2];\n  let a3 = a[3];\n  let a4 = a[4];\n  let a5 = a[5];\n  let a6 = a[6];\n  let a7 = a[7];\n  let a8 = a[8];\n  let a9 = a[9];\n  let a10 = a[10];\n  let a11 = a[11];\n\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  let b3 = b[3];\n  let b4 = b[4];\n  let b5 = b[5];\n  let b6 = b[6];\n  let b7 = b[7];\n  let b8 = b[8];\n\n  out[0] = (b0 * a0 + b3 * a1 + b6 * a2);\n  out[1] = (b1 * a0 + b4 * a1 + b7 * a2);\n  out[2] = (b2 * a0 + b5 * a1 + b8 * a2);\n  out[3] = (b0 * a3 + b3 * a4 + b6 * a5);\n  out[4] = (b1 * a3 + b4 * a4 + b7 * a5);\n  out[5] = (b2 * a3 + b5 * a4 + b8 * a5);\n  out[6] = (b0 * a6 + b3 * a7 + b6 * a8);\n  out[7] = (b1 * a6 + b4 * a7 + b7 * a8);\n  out[8] = (b2 * a6 + b5 * a7 + b8 * a8);\n  out[9] = (b0 * a9 + b3 * a10 + b6 * a11 + b[9]);\n  out[10] = (b1 * a9 + b4 * a10 + b7 * a11 + b[10]);\n  out[11] = (b2 * a9 + b5 * a10 + b8 * a11 + b[11]);\n\n  return out;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint-env browser */\n\n/*\n  Convert models to GLB with:\n  node_modules\\.bin\\gltf-pipeline.cmd -t -i src/client/models/box.gltf -o src/client/models/box.glb\n  // The -t tells it not to embed the textures, but just leave the URIs\n */\n\nconst assert = require('assert');\nconst geom = require('./geom.js');\nconst glb_parser = require('./glb/parser.js');\nconst { ATTRIBUTE_TYPE_TO_COMPONENTS } = require('./glb/gltf-type-utils.js');\nconst renderer = require('./engine.js');\nconst shaders = require('./shaders.js');\nconst textures = require('./textures.js');\nconst { vec4 } = require('./vmath.js');\nconst { webFSGetFile } = require('./webfs.js');\n\nexport let load_count = 0;\n\nexport let models = {};\n\nexport let default_vshader;\nexport let default_fshader;\n\nfunction initShaders() {\n  default_vshader = shaders.create('glov/shaders/default.vp');\n  default_fshader = shaders.create('glov/shaders/default.fp');\n}\n\nfunction Model(url) {\n  this.url = url;\n  let idx = url.lastIndexOf('/');\n  if (idx !== -1) {\n    this.base_url = url.slice(0, idx + 1);\n  } else {\n    this.base_url = '';\n  }\n}\n\nModel.prototype.load = function () {\n  ++load_count;\n  let xhr = new XMLHttpRequest();\n  xhr.open('GET', this.url, true);\n  xhr.responseType = 'arraybuffer';\n  xhr.onload = () => {\n    --load_count;\n    try {\n      let array_buffer = xhr.response; // Note: not xhr.responseText\n      if ((xhr.status === 200 || xhr.status === 0) && array_buffer) {\n        this.parse(array_buffer);\n      }\n    } catch (e) {\n      window.onerror('Model loading error', 'models.js', 0, 0, e);\n    }\n  };\n  xhr.send(null);\n};\n\nconst skip_attr = {\n  'TANGENT': true,\n};\n\nModel.prototype.parse = function (glb_data) {\n  let glb = glb_parser.parse(glb_data);\n  if (!glb) {\n    return;\n  }\n  // Make Geoms for each primitives within each mesh\n  let glb_json = glb.getJSON();\n  let objs = [];\n  for (let ii = 0; ii < glb_json.meshes.length; ++ii) {\n    let mesh = glb_json.meshes[ii];\n    for (let jj = 0; jj < mesh.primitives.length; ++jj) {\n      let primitives = mesh.primitives[jj];\n      let material = glb_json.materials[primitives.material];\n      let texture = null;\n      if (material) {\n        // Just grabbing the base color texture, nothing else\n        let bct = (material.pbrMetallicRoughness || {}).baseColorTexture || {};\n        let texture_def = glb_json.textures && glb_json.textures[bct.index] || {};\n        let sampler_def = glb_json.samplers && glb_json.samplers[texture_def.sampler] || {};\n        let image = glb_json.images && glb_json.images[texture_def.source] || {};\n        if (image.uri) {\n          let params = {\n            url: `${this.base_url}${image.uri}`,\n            filter_mag: sampler_def.magFilter,\n            filter_min: sampler_def.minFilter,\n            wrap_s: sampler_def.wrapS,\n            wrap_t: sampler_def.wrapT,\n          };\n          texture = textures.load(params);\n        }\n      }\n      let format = [];\n      let buffers = [];\n      let bidx = [];\n      let total_size = 0;\n      let vert_count = 0;\n      for (let attr in primitives.attributes) {\n        if (skip_attr[attr]) {\n          continue;\n        }\n        assert(shaders.semantic[attr] !== undefined);\n        let accessor = glb_json.accessors[primitives.attributes[attr]];\n        assert.equal(accessor.componentType, 5126); // F32\n        let geom_format = gl.FLOAT;\n        let geom_count = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n        assert(geom_count);\n        let my_vert_count = accessor.count/* / geom_count*/;\n        if (!vert_count) {\n          vert_count = my_vert_count;\n        } else {\n          assert.equal(vert_count, my_vert_count);\n        }\n        format.push([shaders.semantic[attr], geom_format, geom_count]);\n        let buffer = glb.getBuffer(accessor);\n        buffers.push(buffer);\n        bidx.push(0);\n        total_size += buffer.length;\n      }\n      // Interleave\n      let verts = new Float32Array(total_size);\n      let idx = 0;\n      for (let vert = 0; vert < vert_count; ++vert) {\n        for (let attr = 0; attr < format.length; ++attr) {\n          for (let kk = 0; kk < format[attr][2]; ++kk) {\n            verts[idx++] = buffers[attr][bidx[attr]++];\n          }\n        }\n      }\n      // Get indices\n      let accessor = glb_json.accessors[primitives.indices];\n      assert(accessor); // must be an indexed primitive set\n      assert.equal(accessor.type, 'SCALAR');\n      let idxs = glb.getBuffer(accessor);\n      if (accessor.componentType === 5125) { // Uint32\n        assert(vert_count < 65536); // Fits in 16-bits\n        // Just convert to 16-bit\n        idxs = new Uint16Array(idxs);\n      } else {\n        assert.equal(accessor.componentType, 5123); // Uint16\n      }\n      objs.push({\n        geom: geom.create(format, verts, idxs, primitives.mode),\n        texture,\n      });\n    }\n  }\n  // TODO: Something with nodes to tie together and position the meshes\n  this.data = {\n    objs,\n    // glb, - Don't keep this, release it and any unreferenced data/buffers\n  };\n};\n\nModel.prototype.draw = function (mat) {\n  renderer.updateMatrices(mat); // before setting shader\n  shaders.bind(default_vshader, default_fshader, {\n    color: vec4(1, 1, 1, 1),\n  });\n  let objs = this.data.objs;\n  for (let ii = 0; ii < objs.length; ++ii) {\n    let obj = objs[ii];\n    if (obj.texture) {\n      textures.bind(0, obj.texture);\n    }\n    obj.geom.draw();\n  }\n};\n\n// Just draw the geometry, without any other binding\nModel.prototype.drawGeom = function () {\n  let objs = this.data.objs;\n  for (let ii = 0; ii < objs.length; ++ii) {\n    let obj = objs[ii];\n    obj.geom.draw();\n  }\n};\n\nexport function load(url) {\n  if (models[url]) {\n    return models[url];\n  }\n  let model = models[url] = new Model(url);\n  model.data = models.box.data; // stub until loaded\n  model.load();\n  return model;\n}\n\nexport function startup() {\n  initShaders();\n  let model_box = models.box = new Model('box');\n  model_box.parse(webFSGetFile('glov/models/box_textured_embed.glb').buffer);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst { filewatchStartup } = require('./filewatch.js');\nconst packet = require('../../common/packet.js');\nconst subscription_manager = require('./subscription_manager.js');\nconst WSClient = require('./wsclient.js').WSClient;\nconst wscommon = require('../../common/wscommon.js');\n\nlet client;\nlet subs;\n\nexport function init(params) {\n  params = params || {};\n  if (params.pver) {\n    wscommon.PROTOCOL_VERSION = params.pver;\n  }\n  if (String(document.location).match(/^https?:\\/\\/localhost/)) {\n    console.log('PacketDebug: ON');\n    packet.default_flags |= packet.PACKET_DEBUG;\n  }\n  client = new WSClient(params.path);\n  subs = subscription_manager.create(client);\n  subs.auto_create_user = Boolean(params.auto_create_user);\n  window.subs = subs; // for debugging\n  exports.subs = subs;\n  exports.client = client;\n  filewatchStartup(client);\n\n  if (params.engine) {\n    params.engine.addTickFunc((dt) => {\n      subs.tick(dt);\n    });\n  }\n}\n\nconst build_timestamp_string = new Date(Number(BUILD_TIMESTAMP))\n  .toISOString()\n  .replace('T', ' ')\n  .slice(0, -8);\nexport function buildString() {\n  return build_timestamp_string;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n//////////////////////////////////////////////////////////////////////////\n// Particle System Spec\n\n/*\n// Definitions\n// value = number or\n// value = [base, add_max] -> generates a number in the range [base, base + add_max)\nlet def_fire = {\n  particles: {\n    fire: {\n      blend: 'additive',\n      texture: 'fire.png',\n      color: [1,1,1,1], // multiplied by animation track, default 1,1,1,1, can be omitted\n      color_track: [ // just values, NOT random range\n        { t: 0.0, v: [1,0.4,0.4,1] },\n        { t: 0.7, v: [1,0,0,1] },\n        { t: 0.9, v: [0.2,0,0,1] },\n        { t: 1.0, v: [0,0,0,1] },\n      ],\n      size: [[32,16], [32,16]], // multiplied by animation track\n      size_track: [ // just values, NOT random range\n        { t: 0.0, v: [1,1] },\n        { t: 0.4, v: [0.5,0.5] },\n        { t: 0.7, v: [1,1] },\n        { t: 1.0, v: [1.5,1.5] },\n      ],\n      accel: [0,0],\n      rot: [0,360], // degrees\n      rot_vel: [10,2], // degrees per second\n      lifespan: [450,0], // milliseconds\n      kill_time_accel: 5,\n    },\n  },\n  emitters: {\n    fire: {\n      particle: 'fire',\n      // Random ranges affect each emitted particle:\n      pos: [[0,28], [0,28]],\n      vel: [0,0],\n      emit_rate: [60,20], // emissions per second\n      // Random ranges only calculated upon instantiation:\n      emit_time: [0,Infinity],\n      emit_initial: 10,\n    },\n  },\n  system_lifespan: Infinity, // must be manually killed\n};\n\n// Usage\nlet system = glov_engine.glov_particles.createSystem(def_fire, [50, 50, Z.PARTICLES]);\nsystem.updatePos(75, 75);\nsystem.killSoft(); // stops emitting and speeds up particles by kill_time_accel\nsystem.killHard(); // immediately stops drawing\n\n*/\n\n//////////////////////////////////////////////////////////////////////////\n// Implementation\n\nconst assert = require('assert');\nconst sprites = require('./sprites.js');\nconst textures = require('./textures.js');\nconst { vec2, v2copy, v2lerp, v2mul } = require('./vmath.js');\nconst { vec3, vec4, v3add, v4copy, v4lerp, v4mul } = require('./vmath.js');\n\nconst blend_map = {\n  alpha: sprites.BLEND_ALPHA,\n  additive: sprites.BLEND_ADDITIVE,\n};\n\nexport function preloadParticleData(particle_data) {\n  // Preload all referenced particle textures\n  for (let key in particle_data.defs) {\n    let def = particle_data.defs[key];\n    for (let part_name in def.particles) {\n      let part_def = def.particles[part_name];\n      textures.load({ url: `img/${part_def.texture}.png` });\n    }\n  }\n}\n\n// Expect all values to be a pair of [base, add_max]\nfunction normalizeValue(v) {\n  if (v instanceof Float32Array && v.length >= 2) {\n    return v;\n  } else if (typeof v === 'number') {\n    return vec2(v, 0);\n  } else if (Array.isArray(v) || v instanceof Float32Array) {\n    // already an array, convert to Vec2\n    return vec2(v[0] || 0, v[1] || 0);\n  } else {\n    return assert(false);\n  }\n}\n\nfunction normalizeValueVec(vec, length) {\n  assert(length);\n  assert(Array.isArray(vec));\n  let ret = new Array(length);\n  for (let ii = 0; ii < length; ++ii) {\n    ret[ii] = normalizeValue(vec[ii]);\n  }\n  return ret;\n}\n\nfunction normalizeParticle(def, particle_manager) {\n  if (!def.normalized) {\n    let norm = def.normalized = {\n      blend: blend_map[def.blend] || sprites.BLEND_ALPHA,\n      texture: textures.load({ url: def.texture ? `img/${def.texture}.png` : 'img/glov/util_circle.png' }),\n      color: normalizeValueVec(def.color || [1,1,1,1], 4),\n      color_track: null,\n      size: normalizeValueVec(def.size || [1,1], 2),\n      size_track: null,\n      accel: normalizeValueVec(def.accel || [0,0,0], 3),\n      rot: normalizeValue(def.rot || 0),\n      rot_vel: normalizeValue(def.rot || 0),\n      lifespan: normalizeValue(def.lifespan || 1000),\n      kill_time_accel: normalizeValue(def.kill_time_accel || 1),\n    };\n    assert(norm.kill_time_accel[0] >= 1); // cannot slow down on kill!\n    if (def.color_track && def.color_track.length) {\n      assert(def.color_track.length > 1);\n      norm.color_track = [];\n      for (let ii = 0; ii < def.color_track.length; ++ii) {\n        let e = def.color_track[ii];\n        assert(typeof e.t === 'number');\n        let arr = new Float32Array(5);\n        arr[0] = e.v[0];\n        arr[1] = e.v[1];\n        arr[2] = e.v[2];\n        arr[3] = e.v[3];\n        arr[4] = e.t;\n        norm.color_track.push(arr);\n      }\n    }\n    if (def.size_track && def.size_track.length) {\n      assert(def.size_track.length > 1);\n      norm.size_track = [];\n      for (let ii = 0; ii < def.size_track.length; ++ii) {\n        let e = def.size_track[ii];\n        assert(typeof e.t === 'number');\n        let arr = new Float32Array(3);\n        arr[0] = e.v[0];\n        arr[1] = e.v[1];\n        arr[2] = e.t;\n        norm.size_track.push(arr);\n      }\n    }\n  }\n  return def.normalized;\n}\n\nfunction findParticle(particles, name) {\n  assert(particles[name] !== undefined);\n  return particles[name];\n}\n\nfunction normalizeEmitter(def, part_map) {\n  if (!def.normalized) {\n    def.normalized = {\n      part_idx: findParticle(part_map, def.particle),\n      pos: normalizeValueVec(def.pos || [0,0,0], 3),\n      vel: normalizeValueVec(def.vel || [0,0,0], 3),\n      emit_rate: normalizeValue(def.emit_rate || 10),\n      emit_time: normalizeValueVec(def.emit_time || [0,Infinity], 2),\n      emit_initial: normalizeValue(def.emit_initial || 1),\n    };\n    // convert particles per second to ms per emission\n    let min = def.normalized.emit_rate[0];\n    let max = def.normalized.emit_rate[0] + def.normalized.emit_rate[1];\n    def.normalized.emit_rate[0] = 1000 / max;\n    def.normalized.emit_rate[1] = 1000 / min;\n    assert(def.normalized.emit_rate[0] > 1); // Not more than 1000 per second, that's ridic'.\n  }\n  return def.normalized;\n}\n\nfunction normalizeDef(def, particle_manager) {\n  if (!def.normalized) {\n    let norm = def.normalized = {\n      system_lifespan: normalizeValue(def.system_lifespan || Infinity),\n      particles: [],\n      emitters: [],\n    };\n    let part_map = {};\n    for (let key in def.particles) {\n      part_map[key] = norm.particles.length;\n      norm.particles.push(normalizeParticle(def.particles[key], particle_manager));\n    }\n    for (let key in def.emitters) {\n      norm.emitters.push(normalizeEmitter(def.emitters[key], part_map));\n    }\n  }\n  return def.normalized;\n}\n\nfunction instValue(v) {\n  return v[0] + Math.random() * v[1];\n}\nfunction instValueVec(v) {\n  let ret = new Float32Array(v.length);\n  for (let ii = 0; ii < v.length; ++ii) {\n    ret[ii] = instValue(v[ii]);\n  }\n  return ret;\n}\n\nlet temp_color = vec4();\nlet temp_color2 = vec4();\nlet temp_size = vec2();\nlet temp_size2 = vec2();\n// let temp_pos = v3allocZero();\n\nclass ParticleSystem {\n  constructor(parent, def_in, pos) {\n    assert(pos.length === 3);\n    this.parent = parent;\n    this.def = normalizeDef(def_in, parent);\n    this.system_lifespan = instValue(this.def.system_lifespan);\n    assert(this.system_lifespan > 0);\n    this.age = 0;\n    this.kill_hard = false;\n    this.kill_soft = false;\n    this.pos = vec3(pos[0], pos[1], pos[2]);\n    this.part_sets = [];\n    for (let ii = 0; ii < this.def.particles.length; ++ii) {\n      let def = this.def.particles[ii];\n      let part_set = {\n        def,\n        parts: [],\n      };\n      this.part_sets.push(part_set);\n    }\n    this.emitters = [];\n    // Instantiate emitters\n    for (let ii = 0; ii < this.def.emitters.length; ++ii) {\n      let def = this.def.emitters[ii];\n      let emitter = {\n        def,\n        emit_time: instValueVec(def.emit_time),\n        countdown: 0,\n        started: false,\n        stopped: false,\n      };\n      this.emitters.push(emitter);\n    }\n    // do initial tick for things that have an emit_time[0] of 0 and have an emit_initial\n    this.tick(0);\n  }\n\n  tickParticle(part, dt) { // eslint-disable-line class-methods-use-this\n    let def = part.def;\n    part.age += dt;\n    let age_norm = part.age / part.lifespan;\n    if (age_norm >= 1) {\n      return true;\n    }\n\n    // Pos, vel - incrementally computed\n    let dts = dt / 1000;\n    part.pos[0] += part.vel[0] * dts;\n    part.pos[1] += part.vel[1] * dts;\n    part.pos[2] += part.vel[2] * dts;\n    part.vel[0] += part.accel[0] * dts;\n    part.vel[1] += part.accel[1] * dts;\n    part.vel[2] += part.accel[2] * dts;\n\n    // Color, size, rot - explicitly computed\n    v4copy(temp_color, part.color, temp_color);\n    if (def.color_track) {\n      if (age_norm < def.color_track[0][4]) {\n        v4mul(temp_color, temp_color, def.color_track[0]);\n      } else if (age_norm >= def.color_track[def.color_track.length - 1][4]) {\n        v4mul(temp_color, temp_color, def.color_track[def.color_track.length - 1]);\n      } else {\n        for (let ii = 0; ii < def.color_track.length - 1; ++ii) {\n          if (age_norm >= def.color_track[ii][4] && age_norm < def.color_track[ii + 1][4]) {\n            let weight = (age_norm - def.color_track[ii][4]) / (def.color_track[ii + 1][4] - def.color_track[ii][4]);\n            v4lerp(temp_color2, weight, def.color_track[ii], def.color_track[ii + 1]);\n            v4mul(temp_color, temp_color, temp_color2);\n            break;\n          }\n        }\n      }\n    }\n\n    v2copy(temp_size, part.size);\n    if (def.size_track) {\n      if (age_norm < def.size_track[0][4]) {\n        v2mul(temp_size, temp_size, def.size_track[0]);\n      } else if (age_norm >= def.size_track[def.size_track.length - 1][4]) {\n        v2mul(temp_size, temp_size, def.size_track[def.size_track.length - 1]);\n      } else {\n        for (let ii = 0; ii < def.size_track.length - 1; ++ii) {\n          if (age_norm >= def.size_track[ii][4] && age_norm < def.size_track[ii + 1][4]) {\n            let weight = (age_norm - def.size_track[ii][4]) / (def.size_track[ii + 1][4] - def.size_track[ii][4]);\n            v2lerp(temp_size2, weight, def.size_track[ii], def.size_track[ii + 1]);\n            v2mul(temp_size, temp_size, temp_size2);\n            break;\n          }\n        }\n      }\n    }\n\n    // TODO: let rot = part.rot + part.age * part.rot_vel;\n\n    // TODO: draw using:\n    //   rot\n    let w = part.size[0];\n    let h = part.size[1];\n    let x = part.pos[0] - w/2;\n    let y = part.pos[1] - h/2;\n    let z = part.pos[2];\n    sprites.queueraw4([def.texture],\n      x, y, x, y + h, x + w, y + h, x + w, y, z, 0, 0, 1, 1,\n      temp_color, null, null, def.blend);\n\n    return false;\n  }\n\n  tickPartSet(dt_orig, part_set) {\n    //let def = part_set.def;\n    let parts = part_set.parts;\n    for (let ii = parts.length - 1; ii >= 0; --ii) {\n      let part = parts[ii];\n      let dt = this.kill_soft ? dt_orig * part.kill_time_accel : dt_orig;\n      if (this.tickParticle(part, dt)) {\n        parts[ii] = parts[parts.length - 1];\n        parts.pop();\n      }\n    }\n  }\n\n  emitParticle(init_dt, emitter) {\n    let emitter_def = emitter.def;\n    let part_set = this.part_sets[emitter_def.part_idx];\n    let def = part_set.def;\n    let pos = instValueVec(emitter_def.pos, 3);\n    v3add(pos, pos, this.pos);\n    // PERFTODO: Make the whole Particle just a data[] Float32Array\n    let part = {\n      def,\n      pos,\n      color: instValueVec(def.color, 4),\n      size: instValueVec(def.size, 4),\n      vel: instValueVec(emitter_def.vel, 3),\n      accel: instValueVec(def.accel, 3),\n      rot: instValue(def.rot),\n      rot_vel: instValue(def.rot_vel),\n      lifespan: instValue(def.lifespan),\n      kill_time_accel: instValue(def.kill_time_accel),\n      age: 0,\n    };\n    if (!this.tickParticle(part, init_dt)) {\n      part_set.parts.push(part);\n    }\n  }\n\n  tickEmitter(dt, emitter) {\n    let def = emitter.def;\n    // check for initial emission\n    if (!emitter.started && this.age >= emitter.emit_time[0]) {\n      emitter.started = true;\n      // ignore time before we started emitting\n      dt = this.age - emitter.emit_time[0];\n      let num = instValue(def.emit_initial);\n      for (let ii = 0; ii < num; ++ii) {\n        this.emitParticle(dt, emitter);\n      }\n      emitter.countdown = instValue(def.emit_rate);\n    }\n    if (emitter.started && !emitter.stopped) {\n      // should we stop?\n      let remaining_dt = dt;\n      let emit_dt = dt;\n      if (this.age >= emitter.emit_time[1]) {\n        emitter.stopped = true;\n        // Do not emit during time after we stopped\n        emit_dt -= this.age - emitter.emit_time[1];\n      }\n      // Emit dt's worth of particles\n      while (emit_dt >= emitter.countdown) {\n        emit_dt -= emitter.countdown;\n        remaining_dt -= emitter.countdown;\n        emitter.countdown = instValue(def.emit_rate);\n        this.emitParticle(remaining_dt, emitter);\n      }\n      emitter.countdown -= emit_dt;\n    }\n  }\n\n  tick(dt) {\n    if (this.kill_hard) {\n      return true;\n    }\n    // tick existing particles\n    for (let ii = this.part_sets.length - 1; ii >= 0; --ii) {\n      this.tickPartSet(dt, this.part_sets[ii]);\n    }\n    // advance time and spawn new ones (with partial ticks)\n    this.age += dt;\n    for (let ii = 0; ii < this.emitters.length; ++ii) {\n      this.tickEmitter(dt, this.emitters[ii]);\n    }\n\n    return this.age >= this.system_lifespan; // kill if past lifespan\n  }\n}\n\nclass ParticleManager {\n  constructor() {\n    this.systems = [];\n  }\n\n  createSystem(def, pos) {\n    let system = new ParticleSystem(this, def, pos);\n    this.systems.push(system);\n    return system;\n  }\n\n  tick(dt) {\n    for (let ii = this.systems.length - 1; ii >= 0; --ii) {\n      if (this.systems[ii].tick(dt)) {\n        this.systems[ii] = this.systems[this.systems.length - 1];\n        this.systems.pop();\n      }\n    }\n  }\n}\n\nexport function create() {\n  return new ParticleManager();\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst camera2d = require('./camera2d.js');\nconst { cmd_parse } = require('./cmds.js');\nconst engine = require('./engine.js');\nconst glov_font = require('./font.js');\nconst input = require('./input.js');\nconst { max } = Math;\nconst settings = require('./settings.js');\nconst ui = require('./ui.js');\nconst { vec4, v3copy } = require('./vmath.js');\n\nlet metrics = [];\n\nconst METRIC_PAD = 2;\n\nlet bg_default = vec4(0,0,0,0.5);\nlet bg_mouse_over = vec4(0,0,0,0.75);\nlet bg_fade = vec4();\n\n// referenced in engine.js\nsettings.register({\n  show_metrics: {\n    default_value: 1,\n    type: cmd_parse.TYPE_INT,\n    range: [0,1],\n  },\n  show_fps: {\n    label: 'Show FPS',\n    default_value: 1,\n    type: cmd_parse.TYPE_INT,\n    range: [0,3],\n  },\n  fps_graph: {\n    label: 'FPS Graph',\n    default_value: 0,\n    type: cmd_parse.TYPE_INT,\n    range: [0,1],\n  },\n});\n\ncmd_parse.register({\n  cmd: 'fps',\n  help: 'Toggles FPS display',\n  func: function (str, resp_func) {\n    if (settings.show_fps && settings.show_metrics || str === '0') {\n      settings.set('show_fps', 0);\n    } else {\n      settings.set('show_fps', 1);\n      settings.set('show_metrics', 1);\n    }\n    resp_func();\n  },\n});\n\nlet fps_style = glov_font.style({\n  outline_width: 2, outline_color: 0x00000080,\n  color: 0xFFFFFFff,\n});\n\nexport function addMetric(metric) {\n  if (metric.show_graph) {\n    metric.num_lines = metric.colors.length;\n    metric.history_size = metric.data.history.length / metric.num_lines;\n  }\n  metric.num_labels = Object.keys(metric.labels).length;\n  if (metric.interactable === undefined) {\n    metric.interactable = metric.num_labels > 1 || metric.show_graph;\n  }\n  metrics.push(metric);\n}\n\nfunction showMetric(y, metric) {\n  let font = engine.font;\n  let pad = METRIC_PAD;\n  let METRIC_VALUE_WIDTH = ui.font_height * 2.5;\n  let x = camera2d.x1Real() - METRIC_VALUE_WIDTH - pad;\n  let y0 = y;\n  y += pad;\n  let line_height = ui.font_height;\n  let max_label_w = 0;\n  let max_labels = settings[metric.show_stat];\n  let drew_any = false;\n  let alpha = 1;\n  for (let label in metric.labels) {\n    let value = metric.labels[label]();\n    if (value) {\n      let style = fps_style;\n      if (value.alpha) {\n        alpha = value.alpha;\n        value = value.value;\n        style = glov_font.styleAlpha(fps_style, alpha);\n      }\n      let label_w = font.drawSizedAligned(style, x, y, Z.FPSMETER + 1, line_height,\n        glov_font.ALIGN.HRIGHT, 0, 0, label);\n      max_label_w = max(max_label_w, label_w);\n      font.drawSizedAligned(style, x, y, Z.FPSMETER + 1, line_height,\n        glov_font.ALIGN.HFIT, METRIC_VALUE_WIDTH, 0, value);\n      y += line_height;\n      drew_any = true;\n    }\n    if (!--max_labels) {\n      break;\n    }\n  }\n  let w = METRIC_VALUE_WIDTH + max_label_w + METRIC_PAD;\n  x -= max_label_w + METRIC_PAD;\n\n  if (!drew_any) {\n    return y - pad;\n  }\n\n  y += pad;\n  let bg = bg_default;\n  let pos_param = {\n    x: x - pad,\n    y: y0,\n    w: w + pad * 2,\n    h: y - y0,\n  };\n  if (metric.interactable) {\n    if (input.mouseUpEdge(pos_param)) {\n      if (metric.num_labels > 1 && settings[metric.show_stat] <= 1) {\n        settings.set(metric.show_stat, metric.num_labels);\n      } else if (metric.show_graph && !settings[metric.show_graph]) {\n        settings.set(metric.show_graph, 1);\n      } else {\n        if (metric.show_graph) {\n          settings.set(metric.show_graph, 0);\n        }\n        settings.set(metric.show_stat, 1);\n      }\n    }\n    if (input.mouseOver(pos_param)) {\n      bg = bg_mouse_over;\n    }\n  }\n  if (alpha !== 1) {\n    bg_fade[3] = bg[3] * alpha;\n    bg = v3copy(bg_fade, bg);\n  }\n  ui.drawRect(pos_param.x, pos_param.y, pos_param.x + pos_param.w, y, Z.FPSMETER, bg);\n  return y;\n}\n\nfunction showMetricGraph(y, metric) {\n  const small = engine.game_height < 300;\n  const LINE_WIDTH = small ? 1 : 3;\n  const LINE_PAD = small ? 0 : 1;\n  const LINE_HEIGHT = small ? 64 : 128;\n  const NUM_LINES = metric.history_size - 1;\n  let w = (LINE_WIDTH + LINE_PAD) * NUM_LINES;\n  let x = camera2d.x1Real() - w;\n  let h = LINE_HEIGHT + LINE_PAD * 2;\n  let z = Z.FPSMETER;\n  ui.drawRect(x, y - h, x + w, y, z++, bg_default);\n  x += LINE_PAD;\n  y -= LINE_PAD;\n  let history_index = metric.data.index;\n  let line_scale = LINE_HEIGHT / metric.line_scale_top;\n  for (let ii = 0; ii < NUM_LINES; ii++) {\n    let line_index = ((ii + history_index + 1) % metric.history_size) * metric.num_lines;\n    let data = metric.data.history;\n    let bar_max = 0;\n    for (let jj = 0; jj < metric.num_lines; jj++) {\n      let line_jj = data[line_index + jj];\n      let bar_min;\n      if (metric.bars_stack) {\n        bar_min = bar_max;\n        bar_max += line_jj;\n      } else {\n        // bars overlap, figure out how big this bar should be relative to next smallest\n        let lesser = 0;\n        for (let kk = 0; kk < metric.num_lines; kk++) {\n          if (kk === jj) {\n            continue;\n          }\n          let line_kk = data[line_index + kk];\n          if ((line_kk < line_jj || line_kk === line_jj && kk < jj) && line_kk > lesser) {\n            lesser = line_kk;\n          }\n        }\n        bar_min = lesser;\n        bar_max = line_jj;\n      }\n      let color = metric.colors[jj];\n      ui.drawRect(x, y - bar_max * line_scale, x + LINE_WIDTH, y - bar_min * line_scale, z, color);\n    }\n    x += LINE_WIDTH + LINE_PAD;\n  }\n  z += NUM_LINES;\n  y -= LINE_HEIGHT + LINE_PAD;\n  return y;\n}\n\nexport function draw() {\n  camera2d.setAspectFixed(engine.game_width, engine.game_height);\n  let y = camera2d.y0Real();\n  let y_graph = camera2d.y1Real();\n  for (let ii = 0; ii < metrics.length; ++ii) {\n    let metric = metrics[ii];\n    if (settings[metric.show_stat]) {\n      y = showMetric(y, metric);\n      y += METRIC_PAD;\n    }\n    if (settings[metric.show_graph]) {\n      y_graph = showMetricGraph(y_graph, metric);\n      y_graph -= METRIC_PAD;\n    }\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nlet user_want_locked = false;\nlet elem;\nlet on_ptr_lock;\n\nexport function isLocked() {\n  return user_want_locked; // Either it's locked, or there's an async attempt to lock it outstanding\n}\n\nfunction pointerLog(msg) {\n  console.log(`PointerLock: ${msg}`); // TODO: Disable this after things settle\n}\n\nexport function exit() {\n  pointerLog('Lock exit requested');\n  user_want_locked = false;\n  document.exitPointerLock();\n}\n\nexport function enter(when) {\n  user_want_locked = true;\n  on_ptr_lock();\n  pointerLog(`Trying pointer lock in response to ${when}`);\n  elem.requestPointerLock();\n}\n\nfunction onPointerLockChange() {\n  if (document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement) {\n    pointerLog('Lock successful');\n    if (!user_want_locked) {\n      pointerLog('User canceled lock');\n      document.exitPointerLock();\n    }\n  } else {\n    if (user_want_locked) {\n      pointerLog('Lock lost');\n      user_want_locked = false;\n    }\n  }\n}\n\nfunction onPointerLockError(e) {\n  pointerLog('Error');\n  user_want_locked = false;\n}\n\nexport function startup(_elem, _on_ptr_lock) {\n  elem = _elem;\n  on_ptr_lock = _on_ptr_lock;\n\n  elem.requestPointerLock = elem.requestPointerLock || elem.mozRequestPointerLock ||\n    elem.webkitRequestPointerLock || function () { /* nop */ };\n  document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock ||\n    document.webkitExitPointerLock || function () { /* nop */ };\n\n  document.addEventListener('pointerlockchange', onPointerLockChange, false);\n  document.addEventListener('mozpointerlockchange', onPointerLockChange, false);\n  document.addEventListener('webkitpointerlockchange', onPointerLockChange, false);\n\n  document.addEventListener('pointerlockerror', onPointerLockError, false);\n  document.addEventListener('mozpointerlockerror', onPointerLockError, false);\n  document.addEventListener('webkitpointerlockerror', onPointerLockError, false);\n}\n","/* eslint no-extend-native:off,no-invalid-this:off */\n\n// TypedArray.slice, fill, join, sort, etc - not supported on IE, some older Safari, older Android\nlet typedarrays = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array];\n\nif (!Uint8Array.prototype.slice) {\n  typedarrays.forEach(function (ArrayType) {\n    Object.defineProperty(ArrayType.prototype, 'slice', {\n      value: function (begin, end) {\n        if (end === undefined) {\n          end = this.length;\n        }\n        if (end < 0) {\n          end = this.length - end;\n        }\n        begin = begin || 0;\n        if (begin >= this.length) {\n          begin = this.length - 1;\n        }\n        if (end > this.length) {\n          end = this.length;\n        }\n        if (end < begin) {\n          end = begin;\n        }\n        let len = end - begin;\n        let ret = new ArrayType(len);\n        for (let ii = begin; ii < end; ++ii) {\n          ret[ii] = this[ii];\n        }\n        return ret;\n      }\n    });\n  });\n}\n\nfunction cmpDefault(a, b) {\n  return a - b;\n}\nlet replacements = {\n  join: function (delim) {\n    return Array.prototype.join.call(this, delim);\n  },\n  fill: function (value, begin, end) {\n    if (end === undefined) {\n      end = this.length;\n    }\n    for (let ii = begin || 0; ii < end; ++ii) {\n      this[ii] = value;\n    }\n    return this;\n  },\n  sort: function (cmp) {\n    Array.prototype.sort.call(this, cmp || cmpDefault);\n  },\n};\n\nfor (let key in replacements) {\n  if (!Uint8Array.prototype[key]) {\n    typedarrays.forEach(function (ArrayType) {\n      Object.defineProperty(ArrayType.prototype, key, {\n        value: replacements[key],\n      });\n    });\n  }\n}\n\nif (!String.prototype.endsWith) {\n  Object.defineProperty(String.prototype, 'endsWith', {\n    value: function (test) {\n      return this.slice(-test.length) === test;\n    },\n  });\n  Object.defineProperty(String.prototype, 'startsWith', {\n    value: function (test) {\n      return this.slice(0, test.length) === test;\n    },\n  });\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n// Alea PRNG\n// Based on code from Johannes Baagøe <baagoe@baagoe.com>, 2010\n// From https://github.com/coverslide/node-alea/blob/master/alea.js, MIT Licensed\n// From http://baagoe.com/en/RandomMusings/javascript/\n\nexport function mashString(data) {\n  let n = 0xefc8249d;\n  for (let i = 0; i < data.length; i++) {\n    n += data.charCodeAt(i);\n    let h = 0.02519603282416938 * n;\n    n = h >>> 0;\n    h -= n;\n    h *= n;\n    n = h >>> 0;\n    h -= n;\n    n += h * 0x100000000; // 2^32\n  }\n  return n >>> 0;\n  // return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n}\n\nfunction Mash() {\n  this.n = 0xc06c5fc8; // 0xefc8249d;\n}\nMash.prototype.mash = function (data) {\n  let n = this.n + data;\n  let h = 0.02519603282416938 * n;\n  n = h >>> 0;\n  h -= n;\n  h *= n;\n  n = h >>> 0;\n  h -= n;\n  n += h * 0x100000000; // 2^32\n  this.n = n;\n  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n};\n\nfunction Alea(seed) {\n  this.reseed(seed);\n}\nAlea.prototype.reseed = function (seed) {\n  // this.s0/s1/s2 are floating point between 0 and 1\n  // this.c is a 32-bit int\n  this.c = 1;\n  let mash = new Mash();\n  // Hard-coded results of initial mash(' ') found in original implementation\n  this.s0 = 0.3014581324532628;\n  this.s1 = 0.2643220406025648;\n  this.s2 = 0.7516536582261324;\n\n  this.s0 -= mash.mash(seed);\n  if (this.s0 < 0) {\n    this.s0 += 1;\n  }\n  this.s1 -= mash.mash(seed);\n  if (this.s1 < 0) {\n    this.s1 += 1;\n  }\n  this.s2 -= mash.mash(seed);\n  if (this.s2 < 0) {\n    this.s2 += 1;\n  }\n};\nAlea.prototype.step = function () {\n  let t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\n  this.s0 = this.s1;\n  this.s1 = this.s2;\n  return (this.s2 = t - (this.c = t | 0));\n};\nAlea.prototype.uint32 = function () {\n  return this.step() * 0x100000000; // 2^32\n};\nAlea.prototype.fract53 = function () {\n  return this.step() +\n    (this.step() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n};\nAlea.prototype.random = Alea.prototype.step;\nAlea.prototype.range = function (range) {\n  return (this.step() * range) | 0;\n};\nAlea.prototype.floatBetween = function (a, b) {\n  return a + (b - a) * this.random();\n};\n\n// Note: import/export probably needs more precision than F32 or JSON provide\n// Alea.prototype.exportState = function () {\n//   return [this.s0, this.s1, this.s2, this.c];\n// };\n// Alea.prototype.importState = function (i) {\n//   this.s0 = i[0];\n//   this.s1 = i[1];\n//   this.s2 = i[2];\n//   this.c = i[3];\n// };\n\nexport function randCreate(seed) {\n  return new Alea(seed);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst { titleCase } = require('../../common/util.js');\nconst { cmd_parse } = require('./cmds.js');\n\nexports.true = true; // for perf.js\n\nexport function get(key) {\n  return exports[key];\n}\n\nexport function set(key, value) {\n  if (exports[key] !== value) {\n    cmd_parse.handle(null, `${key} ${value}`, null); // uses default cmd_parse handler\n  }\n}\n\nexport function register(defs) {\n  Object.keys(defs).forEach(function (key) {\n    let def = defs[key];\n    exports[key] = def.default_value;\n    cmd_parse.registerValue(key, {\n      type: def.type,\n      label: def.label || titleCase(key.replace(/_/g, ' ')),\n      range: def.range,\n      get: () => exports[key],\n      set: (v) => (exports[key] = v),\n      store: true,\n      ver: def.ver,\n      help: def.help,\n      usage: def.usage,\n    });\n  });\n}\n\nregister({\n  show_metrics: {\n    default_value: 1,\n    type: cmd_parse.TYPE_INT,\n    range: [0,1],\n  },\n  max_fps: {\n    label: 'Max FPS',\n    default_value: 0,\n    type: cmd_parse.TYPE_FLOAT,\n  },\n});\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst engine = require('./engine.js');\nconst { filewatchOn } = require('./filewatch.js');\nconst { matchAll } = require('../../common/util.js');\nconst { texturesUnloadDynamic } = require('./textures.js');\nconst { webFSGetFile } = require('./webfs.js');\n\nlet last_id = 0;\n\nlet bound_prog = null;\n\nexport const semantic = {\n  'ATTR0': 0,\n  'POSITION': 0,\n  'ATTR1': 1,\n  'COLOR': 1,\n  'COLOR_0': 1,\n  'ATTR2': 2,\n  'TEXCOORD': 2,\n  'TEXCOORD_0': 2,\n  'ATTR3': 3,\n  'NORMAL': 3,\n  'ATTR4': 4,\n  'TEXCOORD_1': 4,\n};\n\nexport let globals;\nlet defines;\n\nlet error_fp;\nlet error_vp;\n\nlet shaders = [];\n\nconst vp_attr_regex = /attribute [^ ]+ ([^ ;]+);/g;\nconst uniform_regex = /uniform (?:(?:low|medium|high)p )?((?:(?:vec|mat)\\d(?:x\\d)?|float) [^ ;]+);/g;\nconst sampler_regex = /uniform sampler(?:2D|Cube) ([^ ;]+);/g;\nconst include_regex = /\\n#include \"([^\"]+)\"/g;\n\nconst type_size = {\n  float: 1,\n  vec2: 2*1,\n  vec3: 3*1,\n  vec4: 4*1,\n  mat3: 3*3,\n  mat4: 4*4,\n};\n\nlet includes = {};\n\nfunction loadInclude(key) {\n  let text = webFSGetFile(includes[key].filename, 'text');\n  includes[key].text = `\\n// from include \"${key}\":\\n${text}\\n`;\n}\n\nexport function addInclude(key, filename) {\n  assert(!includes[key]);\n  includes[key] = { filename };\n  loadInclude(key);\n}\n\nlet report_queued = false;\nlet shader_errors;\nfunction reportShaderError(err) {\n  function doReport() {\n    assert(false, `Shader error(s):\\n    ${shader_errors.join('\\n    ')}`);\n    shader_errors = null;\n  }\n  if (!report_queued) {\n    setTimeout(doReport, 1000);\n    report_queued = true;\n    shader_errors = [];\n  }\n  shader_errors.push(err);\n}\n\nfunction parseIncludes(text) {\n  let supplied_uniforms = {};\n  text.replace(uniform_regex, function (str, key) {\n    supplied_uniforms[key] = true;\n  });\n  text = text.replace(include_regex, function (str, filename) {\n    let replacement = includes[filename];\n    if (!replacement) {\n      console.error(`Could not evaluate ${str}`);\n      return str;\n    }\n    replacement = replacement.text;\n    // Remove duplicate uniforms\n    replacement = replacement.replace(uniform_regex, function (str2, key) {\n      if (supplied_uniforms[key]) {\n        return `// [removed ${key}]`;\n      }\n      supplied_uniforms[key] = true;\n      return str2;\n    });\n    return replacement;\n  });\n  return text;\n}\n\nconst webgl2_header = [\n  '#version 300 es',\n  '#define WEBGL2',\n].join('\\n');\nconst webgl2_header_fp = [\n  webgl2_header,\n  '#define varying in',\n  'out lowp vec4 fragColor;',\n  '#define gl_FragColor fragColor',\n  '#define texture2D texture',\n  '#define textureCube texture',\n  ''\n].join('\\n');\nconst webgl2_header_vp = [\n  webgl2_header,\n  '#define varying out',\n  '#define attribute in',\n  ''\n].join('\\n');\n\nfunction Shader(params) {\n  let { filename } = params;\n  assert.equal(typeof filename, 'string');\n  let type = filename.endsWith('.fp') ? gl.FRAGMENT_SHADER : filename.endsWith('.vp') ? gl.VERTEX_SHADER : 0;\n  assert(type);\n  this.type = type;\n  this.filename = filename;\n  this.shader = gl.createShader(type);\n  this.id = ++last_id;\n  if (type === gl.VERTEX_SHADER) {\n    this.programs = {};\n  }\n  shaders.push(this);\n  this.compile();\n}\n\nShader.prototype.compile = function () {\n  let { type, filename } = this;\n  let header = '';\n  let text = webFSGetFile(filename, 'text');\n  if (engine.webgl2 && text.indexOf('#pragma WebGL2') !== -1) {\n    header = type === gl.VERTEX_SHADER ? webgl2_header_vp : webgl2_header_fp;\n  }\n  text = `${header}${defines}${text}`;\n  text = parseIncludes(text);\n  text = text.replace(/#pragma WebGL2?/g, '');\n  if (type === gl.VERTEX_SHADER) {\n    this.attributes = matchAll(text, vp_attr_regex);\n    // Ensure they are known names so we can give them indices\n    // Add to semantic[] above as needed\n    this.attributes.forEach((v) => assert(semantic[v] !== undefined));\n  } else {\n    this.samplers = matchAll(text, sampler_regex);\n    // Ensure all samplers end in a unique number\n    let found = [];\n    this.samplers.forEach((v) => {\n      let num = Number(v.slice(-1));\n      assert(!isNaN(num));\n      assert(!found[num]);\n      found[num] = true;\n    });\n  }\n  this.uniforms = matchAll(text, uniform_regex);\n  // Ensure a known type\n  this.uniforms.forEach((v) => {\n    let type_name = v.split(' ')[0];\n    assert(type_size[type_name]);\n  });\n  gl.shaderSource(this.shader, text);\n  gl.compileShader(this.shader);\n\n  if (!gl.getShaderParameter(this.shader, gl.COMPILE_STATUS)) {\n    let error_text = gl.getShaderInfoLog(this.shader);\n    if (error_text) { // sometimes null on iOS\n      error_text = error_text.replace(/\\0/g, '').trim();\n    }\n    console.error(`Error compiling ${filename}: ${error_text}`);\n    reportShaderError(`${filename}: ${error_text}`);\n    // eslint-disable-next-line newline-per-chained-call\n    console.log(text.split('\\n').map((line, idx) => `${idx+1}: ${line}`).join('\\n'));\n  }\n};\n\nexport function create(filename) {\n  if (typeof filename === 'object') {\n    return new Shader(filename);\n  }\n  return new Shader({ filename });\n}\n\nfunction uniformSetValue(unif) {\n  switch (unif.width) { // eslint-disable-line default-case\n    case 1:\n      gl.uniform1fv(unif.location, unif.value);\n      break;\n    case 2:\n      gl.uniform2fv(unif.location, unif.value);\n      break;\n    case 3:\n      gl.uniform3fv(unif.location, unif.value);\n      break;\n    case 4:\n      gl.uniform4fv(unif.location, unif.value);\n      break;\n    case 9:\n      gl.uniformMatrix3fv(unif.location, false, unif.value);\n      break;\n    case 16:\n      gl.uniformMatrix4fv(unif.location, false, unif.value);\n      break;\n  }\n}\n\nfunction link(vp, fp) {\n  let prog = vp.programs[fp.id] = {\n    handle: gl.createProgram(),\n    uniforms: null,\n  };\n  if (!prog.handle) {\n    assert(false, `gl.createProgram() returned ${prog.handle}${gl.createProgram() ? ', retry would succeed' : ''}`);\n  }\n  gl.attachShader(prog.handle, vp.shader);\n  gl.attachShader(prog.handle, fp.shader);\n  // call this for all relevant semantic\n  for (let ii = 0; ii < vp.attributes.length; ++ii) {\n    gl.bindAttribLocation(prog.handle, semantic[vp.attributes[ii]], vp.attributes[ii]);\n  }\n  gl.linkProgram(prog.handle);\n\n  prog.valid = gl.getProgramParameter(prog.handle, gl.LINK_STATUS);\n  if (!prog.valid) {\n    reportShaderError(`Shader link error (${vp.filename} & ${fp.filename}): ${gl.getProgramInfoLog(prog.handle)}`);\n    console.error(`Shader link error: ${gl.getProgramInfoLog(prog.handle)}`);\n  }\n\n  gl.useProgram(prog.handle);\n  bound_prog = prog;\n\n  let uniforms = vp.uniforms.slice(0);\n  for (let ii = 0; ii < fp.uniforms.length; ++ii) {\n    let name = fp.uniforms[ii];\n    if (uniforms.indexOf(name) === -1) {\n      uniforms.push(name);\n    }\n  }\n  prog.uniforms = uniforms.map((v) => {\n    v = v.split(' ');\n    let type = v[0];\n    let name = v[1];\n    let count = 1;\n    let m = name.match(/([^[]+)\\[(\\d+)\\]/);\n    if (m) {\n      name = m[1];\n      count = Number(m[2]);\n    }\n    let location = gl.getUniformLocation(prog.handle, name);\n    if (location === null) {\n      // Not in either shader, (commented out?), remove (via filter below)\n      return null;\n    }\n    let width = type_size[type];\n    let size = width * count;\n    let glob = globals[name];\n    let value = new Float32Array(size);\n    // set initial value\n    let unif = {\n      name,\n      size,\n      width,\n      count,\n      value,\n      location,\n      glob,\n    };\n    uniformSetValue(unif);\n    return unif;\n  }).filter((v) => v);\n\n  for (let ii = 0; ii < fp.samplers.length; ++ii) {\n    let name = fp.samplers[ii];\n    let num = Number(name.slice(-1));\n    let location = gl.getUniformLocation(prog.handle, name);\n    if (location !== null) {\n      gl.uniform1i(location, num);\n    }\n  }\n  return prog;\n}\n\nexport function bind(vp, fp, params) {\n  let prog = vp.programs[fp.id];\n  if (!prog) {\n    prog = link(vp, fp);\n  }\n  if (!prog.valid) {\n    prog = link(vp, error_fp);\n    if (!prog.valid) {\n      prog = link(error_vp, error_fp);\n    }\n    vp.programs[fp.id] = prog;\n  }\n  if (prog !== bound_prog) {\n    bound_prog = prog;\n    gl.useProgram(prog.handle);\n  }\n  for (let ii = 0; ii < prog.uniforms.length; ++ii) {\n    let unif = prog.uniforms[ii];\n    let value = params[unif.name] || unif.glob;\n    if (!value) {\n      continue;\n    }\n    let diff = false;\n    for (let jj = 0; jj < unif.size; ++jj) {\n      if (value[jj] !== unif.value[jj]) {\n        diff = true;\n        break;\n      }\n    }\n    if (diff) {\n      for (let jj = 0; jj < unif.size; ++jj) {\n        unif.value[jj] = value[jj];\n      }\n      uniformSetValue(unif);\n    }\n  }\n}\n\nconst reserved = { WEBGL2: 1 };\nexport function addReservedDefine(key) {\n  reserved[key] = 1;\n}\nlet internal_defines = {};\nfunction applyDefines() {\n  defines = Object.keys(engine.defines).filter((v) => !reserved[v])\n    .concat(Object.keys(internal_defines))\n    .map((v) => `#define ${v}\\n`)\n    .join('');\n}\n\nfunction shaderReload() {\n  if (shaders.length) {\n    window.debugmsg('', true);\n    gl.useProgram(null);\n    for (let ii = 0; ii < shaders.length; ++ii) {\n      let programs = shaders[ii].programs;\n      if (programs) {\n        for (let id in programs) {\n          gl.deleteProgram(programs[id].handle);\n        }\n        shaders[ii].programs = {};\n      }\n    }\n    for (let ii = 0; ii < shaders.length; ++ii) {\n      shaders[ii].compile();\n    }\n    texturesUnloadDynamic();\n  }\n}\n\nexport function handleDefinesChanged() {\n  applyDefines();\n  shaderReload();\n}\n\nexport function setInternalDefines(new_values) {\n  for (let key in new_values) {\n    if (new_values[key]) {\n      internal_defines[key] = new_values[key];\n    } else {\n      delete internal_defines[key];\n    }\n  }\n  handleDefinesChanged();\n}\n\nfunction onShaderChange(filename) {\n  for (let key in includes) {\n    loadInclude(key);\n  }\n  shaderReload();\n}\n\nexport function startup(_globals) {\n  applyDefines();\n  globals = _globals;\n\n  error_fp = create('glov/shaders/error.fp');\n  error_vp = create('glov/shaders/error.vp');\n\n  filewatchOn('.fp', onShaderChange);\n  filewatchOn('.vp', onShaderChange);\n}\n\nexport function addGlobal(key, vec) {\n  assert(!globals[key]);\n  globals[key] = vec;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint callback-return:off */\n\nexport const FADE_DEFAULT = 0;\nexport const FADE_OUT = 1;\nexport const FADE_IN = 2;\nexport const FADE = FADE_OUT + FADE_IN;\n\nconst assert = require('assert');\nconst { cmd_parse } = require('./cmds.js');\nconst { filewatchOn } = require('./filewatch.js');\nconst { Howl, Howler } = require('@jimbly/howler/src/howler.core.js');\nconst { abs, floor, max, min, random } = Math;\nconst settings = require('./settings.js');\nconst urlhash = require('./urlhash.js');\nconst { defaults, ridx } = require('../../common/util.js');\n\nconst DEFAULT_FADE_RATE = 0.001;\n\nlet sounds = {};\nlet num_loading = 0;\n\n// Howler.usingWebAudio = false; // Disable WebAudio for testing HTML5 fallbacks\n\nconst default_params = {\n  ext_list: ['mp3', 'wav'], // (recommended) try loading .mp3 versions first, then fallback to .wav\n  //  also covers all browsers: ['webm', 'mp3']\n  fade_rate: DEFAULT_FADE_RATE,\n};\nlet sound_params;\n\nlet last_played = {};\nlet global_timer = 0;\nlet fades = [];\nlet music;\n\nsettings.register({\n  volume: {\n    default_value: 1,\n    type: cmd_parse.TYPE_FLOAT,\n    range: [0,1],\n  },\n});\n\nsettings.register({\n  sound: {\n    default_value: 1,\n    type: cmd_parse.TYPE_INT,\n    range: [0,1],\n  },\n});\n\nsettings.register({\n  music: {\n    default_value: 1,\n    type: cmd_parse.TYPE_INT,\n    range: [0,1],\n  },\n});\n\nexport function soundLoad(base, opts, cb) {\n  opts = opts || {};\n  if (Array.isArray(base)) {\n    assert(!cb);\n    for (let ii = 0; ii < base.length; ++ii) {\n      soundLoad(base[ii], opts);\n    }\n    return;\n  }\n  let key = base;\n  if (sounds[key]) {\n    if (cb) {\n      cb();\n    }\n    return;\n  }\n  let m = base.match(/^(.*)\\.(mp3|ogg|wav|webm)$/u);\n  let preferred_ext;\n  if (m) {\n    base = m[1];\n    preferred_ext = m[2];\n  }\n  let src = `sounds/${base}`;\n  let srcs = [];\n  let suffix = '';\n  if (opts.for_reload) {\n    suffix = `?rl=${Date.now()}`;\n  }\n  if (preferred_ext) {\n    srcs.push(`${urlhash.getURLBase()}${src}.${preferred_ext}${suffix}`);\n  }\n  for (let ii = 0; ii < sound_params.ext_list.length; ++ii) {\n    let ext = sound_params.ext_list[ii];\n    if (ext !== preferred_ext) {\n      srcs.push(`${urlhash.getURLBase()}${src}.${ext}${suffix}`);\n    }\n  }\n  // Try loading desired sound types one at a time.\n  // Cannot rely on Howler's built-in support for this because it only continues\n  //   through the list on *some* load errors, not all :(.\n  function tryLoad(idx) {\n    if (idx === srcs.length) {\n      console.error(`Error loading sound ${base}: All fallbacks exhausted, giving up`);\n      if (cb) {\n        cb('Error loading sound');\n      }\n      return;\n    }\n    ++num_loading;\n    let once = false;\n    let sound = new Howl({\n      src: srcs.slice(idx),\n      html5: Boolean(opts.streaming),\n      loop: Boolean(opts.loop),\n      volume: 0,\n      onload: function () {\n        if (!once) {\n          --num_loading;\n          once = true;\n          sound.glov_load_opts = opts;\n          sounds[key] = sound;\n          if (cb) {\n            cb(null);\n          }\n        }\n      },\n      onloaderror: function (id, err, extra) {\n        if (idx === srcs.length - 1) {\n          console.error(`Error loading sound ${srcs[idx]}: ${err}`);\n        } else {\n          console.log(`Error loading sound ${srcs[idx]}: ${err}, trying fallback...`);\n        }\n        if (!once) {\n          --num_loading;\n          once = true;\n          tryLoad(idx + 1);\n        }\n      },\n    });\n  }\n  tryLoad(0);\n}\n\nfunction soundReload(filename) {\n  let sound_name = filename.match(/^sounds\\/([^.]+)\\.\\w+$/);\n  sound_name = sound_name && sound_name[1];\n  if (!sound_name) {\n    return;\n  }\n  if (!sounds[sound_name]) {\n    console.log(`Reload trigged for non-existent sound: ${filename}`);\n    return;\n  }\n  let opts = sounds[sound_name].glov_load_opts;\n  opts.for_reload = true;\n  delete sounds[sound_name];\n  soundLoad(sound_name, opts);\n}\n\nexport function soundStartup(params) {\n  sound_params = defaults(params || {}, default_params);\n\n  // Music\n  music = []; // 0 is current, 1 is previous (fading out)\n  for (let ii = 0; ii < 2; ++ii) {\n    music.push({\n      sound: null,\n      id: 0,\n      current_volume: 0,\n      target_volume: 0,\n      sys_volume: 0,\n      need_play: false,\n    });\n  }\n  filewatchOn('.mp3', soundReload);\n  filewatchOn('.ogg', soundReload);\n  filewatchOn('.wav', soundReload);\n  filewatchOn('.webm', soundReload);\n}\n\nexport function soundResume() {\n  // Handled internally by Howler, leaving hooks in for now, though\n  // Maybe more reliable than `Howler.safeToPlay`...\n}\n\nexport function soundResumed() {\n  return !Howler.noAudio && Howler.safeToPlay;\n}\n\nexport function soundTick(dt) {\n  global_timer += dt;\n  if (!soundResumed()) {\n    return;\n  }\n  // Do music fading\n  // Cannot rely on Howler's fading because starting a fade when one is in progress\n  //   messes things up, as well causes snaps in volume :(\n  let max_fade = dt * sound_params.fade_rate;\n  for (let ii = 0; ii < music.length; ++ii) {\n    let mus = music[ii];\n    if (!mus.sound) {\n      continue;\n    }\n    let target = settings.music ? mus.target_volume : 0;\n    if (mus.current_volume !== target) {\n      let delta = target - mus.current_volume;\n      let fade_amt = min(abs(delta), max_fade);\n      if (delta < 0) {\n        mus.current_volume = max(target, mus.current_volume - fade_amt);\n      } else {\n        mus.current_volume = min(target, mus.current_volume + fade_amt);\n      }\n      if (!mus.target_volume && !mus.current_volume) {\n        if (!mus.need_play) {\n          mus.sound.stop(mus.id);\n        }\n        mus.sound = null;\n      }\n    }\n    if (mus.sound) {\n      let sys_volume = mus.current_volume * settings.volume;\n      if (mus.need_play) {\n        mus.need_play= false;\n        mus.id = mus.sound.play();\n        mus.sys_volume = -1;\n      }\n      if (mus.sys_volume !== sys_volume) {\n        mus.sound.volume(sys_volume, mus.id);\n        mus.sys_volume = sys_volume;\n      }\n    }\n  }\n\n  for (let ii = fades.length - 1; ii >= 0; --ii) {\n    let fade = fades[ii];\n    fade.volume = max(0, fade.volume - max_fade);\n    fade.sound.volume(fade.volume * settings.volume, fade.id);\n    if (!fade.volume) {\n      fade.sound.stop(fade.id);\n      ridx(fades, ii);\n    }\n  }\n}\n\nexport function soundPlay(soundname, volume, as_music) {\n  volume = volume || 1;\n  if (!as_music && !settings.sound || as_music && !settings.music) {\n    return null;\n  }\n  if (!soundResumed()) {\n    return null;\n  }\n  if (Array.isArray(soundname)) {\n    soundname = soundname[floor(random() * soundname.length)];\n  }\n  let sound = sounds[soundname];\n  if (!sound) {\n    return null;\n  }\n  let last_played_time = last_played[soundname] || -9e9;\n  if (global_timer - last_played_time < 45) {\n    return null;\n  }\n\n  let id = sound.play(undefined, volume * settings.volume);\n  // sound.volume(volume * settings.volume, id);\n  last_played[soundname] = global_timer;\n  return {\n    stop: sound.stop.bind(sound, id),\n    playing: sound.playing.bind(sound, id), // not reliable if it hasn't started yet? :(\n    fadeOut: (time) => {\n      fades.push({\n        volume,\n        sound,\n        id,\n        time,\n      });\n    },\n  };\n}\n\nexport function soundPlayMusic(soundname, volume, transition) {\n  if (!settings.music) {\n    return;\n  }\n  if (volume === undefined) {\n    volume = 1;\n  }\n  transition = transition || FADE_DEFAULT;\n  soundLoad(soundname, { streaming: true, loop: true }, (err) => {\n    assert(!err);\n    let sound = sounds[soundname];\n    assert(sound);\n    if (music[0].sound === sound) {\n      // Same sound, just adjust volume, if required\n      music[0].target_volume = volume;\n      if (!transition) {\n        if (!volume) {\n          sound.stop(music[0].id);\n          music[0].sound = null;\n        } else {\n          let sys_volume = music[0].sys_volume = volume * settings.volume;\n          sound.volume(sys_volume, music[0].id);\n        }\n      }\n      return;\n    }\n    // fade out previous music, if any\n    if (music[0].current_volume) {\n      if (transition & FADE_OUT) {\n        // swap to position 1, start fadeout\n        let temp = music[1];\n        music[1] = music[0];\n        music[0] = temp;\n        music[1].target_volume = 0;\n      }\n    }\n    if (music[0].sound) {\n      music[0].sound.stop(music[0].id);\n    }\n    music[0].sound = sound;\n    music[0].target_volume = volume;\n    let start_vol = (transition & FADE_IN) ? 0 : volume;\n    music[0].current_volume = start_vol;\n    if (soundResumed()) {\n      let sys_volume = start_vol * settings.volume;\n      music[0].id = sound.play(undefined, sys_volume);\n      // sound.volume(sys_volume, music[0].id);\n      music[0].sys_volume = sys_volume;\n      music[0].need_play = false;\n    } else {\n      music[0].need_play = true;\n    }\n  });\n}\n\nexport function soundLoading() {\n  return num_loading;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n// Some code from Turbulenz: Copyright (c) 2012-2013 Turbulenz Limited\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst engine = require('./engine.js');\nconst geom = require('./geom.js');\nconst { cos, max, min, round, sin } = Math;\nconst textures = require('./textures.js');\nconst shaders = require('./shaders.js');\nconst { nextHighestPowerOfTwo } = require('../../common/util.js');\nconst { vec2, vec4 } = require('./vmath.js');\n\nexport const BLEND_ALPHA = 0;\nexport const BLEND_ADDITIVE = 1;\n\nlet sprite_vshader;\nlet sprite_fshader;\nlet sprite_dual_fshader;\nlet clip_space = vec4();\nlet sprite_shader_params = {\n  clip_space\n};\nlet last_uid = 0;\n\nlet sprite_queue = [];\n\nlet sprite_freelist = [];\n\nlet sprite_queue_stack = null;\nexport function spriteQueuePush() {\n  assert(!sprite_queue_stack);\n  sprite_queue_stack = sprite_queue;\n  sprite_queue = [];\n}\nexport function spriteQueuePop() {\n  assert(sprite_queue_stack);\n  assert(!sprite_queue.length);\n  sprite_queue = sprite_queue_stack;\n  sprite_queue_stack = null;\n}\n\nfunction SpriteData() {\n  // x1 y1 x2 y2 x3 y3 x4 y4 - vertices [0,8)\n  // cr cg cb ca u1 v1 u2 v2 - normalized color + texture [8,16)\n  // data for GL queuing\n  this.data = new Float32Array(16);\n  // data for sorting/binding/etc\n  this.texs = null;\n  this.shader = null;\n  this.shader_params = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.blend = 0; // BLEND_ALPHA\n  this.uid = 0;\n}\n\nfunction spriteDataAlloc() {\n  if (sprite_freelist.length) {\n    return sprite_freelist.pop();\n  }\n  return new SpriteData();\n}\n\nfunction cmpSprite(a, b) {\n  if (a.z !== b.z) {\n    return a.z - b.z;\n  }\n  if (a.y !== b.y) {\n    return a.y - b.y;\n  }\n  if (a.x !== b.x) {\n    return a.x - b.x;\n  }\n  return a.uid - b.uid;\n}\n\nexport function queuefn(z, fn) {\n  assert(isFinite(z));\n  sprite_queue.push({\n    fn,\n    x: 0,\n    y: 0,\n    z,\n    uid: ++last_uid,\n  });\n}\n\n// coordinates must be in counter-clockwise winding order\nexport function queueraw4(\n  texs, x0, y0, x1, y1, x2, y2, x3, y3, z,\n  u0, v0, u1, v1,\n  color, shader, shader_params, blend\n) {\n  assert(isFinite(z));\n  let elem = spriteDataAlloc();\n  let data = elem.data;\n  // x1 y1 x2 y2 x3 y3 x4 y4 - vertices [0,8)\n  // cr cg cb ca u1 v1 u2 v2 - normalized color + texture [8,16)\n  // Minor perf improvement: convert by clip_space here (still just a single MAD\n  //   if pre-calculated in the camera) and remove it from the shader.\n  data[0] = (x0 - camera2d.data[0]) * camera2d.data[4];\n  data[1] = (y0 - camera2d.data[1]) * camera2d.data[5];\n  data[2] = (x1 - camera2d.data[0]) * camera2d.data[4];\n  data[3] = (y1 - camera2d.data[1]) * camera2d.data[5];\n  data[4] = (x2 - camera2d.data[0]) * camera2d.data[4];\n  data[5] = (y2 - camera2d.data[1]) * camera2d.data[5];\n  data[6] = (x3 - camera2d.data[0]) * camera2d.data[4];\n  data[7] = (y3 - camera2d.data[1]) * camera2d.data[5];\n  data[8] = color[0];\n  data[9] = color[1];\n  data[10] = color[2];\n  data[11] = color[3];\n  data[12] = u0;\n  data[13] = v0;\n  data[14] = u1;\n  data[15] = v1;\n\n  elem.texs = texs;\n  elem.x = data[0];\n  elem.y = data[1];\n  elem.z = z;\n  elem.shader = shader || null;\n  if (shader_params) {\n    shader_params.clip_space = sprite_shader_params.clip_space;\n    elem.shader_params = shader_params;\n  } else {\n    elem.shader_params = null;\n  }\n  elem.blend = blend || 0; // BLEND_ALPHA\n  //elem.bucket = bucket || this.default_bucket;\n  //elem.tech_params = tech_params || null;\n  elem.uid = ++last_uid;\n  sprite_queue.push(elem);\n  return elem;\n}\n\nexport function queueraw(\n  texs, x, y, z, w, h,\n  u0, v0, u1, v1,\n  color, shader, shader_params, blend\n) {\n  return queueraw4(texs,\n    x, y,\n    x, y + h,\n    x + w, y + h,\n    x + w, y,\n    z,\n    u0, v0, u1, v1,\n    color, shader, shader_params, blend);\n}\n\nexport function queuesprite(sprite, x, y, z, w, h, rot, uvs, color, shader, shader_params, nozoom, pixel_perfect) {\n  assert(isFinite(z));\n  let elem = spriteDataAlloc();\n  elem.texs = sprite.texs;\n  x = (x - camera2d.data[0]) * camera2d.data[4];\n  y = (y - camera2d.data[1]) * camera2d.data[5];\n  elem.z = z;\n  w *= camera2d.data[4];\n  h *= camera2d.data[5];\n  if (pixel_perfect) {\n    x |= 0;\n    y |= 0;\n    w |= 0;\n    h |= 0;\n  }\n  elem.x = x;\n  elem.y = y;\n  color = color || sprite.color;\n  let data = elem.data;\n  if (!rot) {\n    let x1 = x - sprite.origin[0] * w;\n    let y1 = y - sprite.origin[1] * h;\n    let x2 = x1 + w;\n    let y2 = y1 + h;\n    data[0] = x1;\n    data[1] = y1;\n    data[2] = x1;\n    data[3] = y2;\n    data[4] = x2;\n    data[5] = y2;\n    data[6] = x2;\n    data[7] = y1;\n  } else {\n    let dx = sprite.origin[0] * w;\n    let dy = sprite.origin[1] * h;\n\n    let cosr = cos(rot);\n    let sinr = sin(rot);\n\n    let x1 = x - cosr * dx + sinr * dy;\n    let y1 = y - sinr * dx - cosr * dy;\n    let ch = cosr * h;\n    let cw = cosr * w;\n    let sh = sinr * h;\n    let sw = sinr * w;\n\n    data[0] = x1;\n    data[1] = y1;\n    data[2] = x1 - sh;\n    data[3] = y1 + ch;\n    data[4] = x1 + cw - sh;\n    data[5] = y1 + sw + ch;\n    data[6] = x1 + cw;\n    data[7] = y1 + sw;\n  }\n\n  data[8] = color[0];\n  data[9] = color[1];\n  data[10] = color[2];\n  data[11] = color[3];\n\n  let ubias = 0;\n  let vbias = 0;\n  let tex = elem.texs[0];\n  if (!nozoom && !tex.nozoom) {\n    // Bias the texture coordinates depending on the minification/magnification\n    //   level so we do not get pixels from neighboring frames bleeding in\n    // Use min here (was max in libGlov), to solve tooltip edges being wrong in strict pixely\n    // Use max here to solve box buttons not lining up, but instead using nozoom in drawBox/drawHBox,\n    //   but, that only works for magnification - need the max here for minification!\n    let zoom_level = max(\n      (uvs[2] - uvs[0]) * tex.width / w,\n      (uvs[3] - uvs[1]) * tex.height / h,\n    ); // in texels per pixel\n    if (zoom_level < 1) { // magnification\n      if (tex.filter_mag === gl.LINEAR) {\n        // Need to bias by half a texel, so we're doing absolutely no blending with the neighboring texel\n        ubias = vbias = 0.5;\n      } else if (tex.filter_mag === gl.NEAREST && engine.antialias) {\n        // When antialiasing is on, even nearest sampling samples from adjacent texels, do slight bias\n        // Want to bias by one *pixel's* worth\n        ubias = vbias = zoom_level / 2;\n      }\n    } else if (zoom_level > 1) { // minification\n      // need to apply this bias even with nearest filtering, not exactly sure why\n      let mipped_texels = zoom_level / 2;\n      ubias = vbias = 0.5 + mipped_texels;\n\n    }\n    if (uvs[0] > uvs[2]) {\n      ubias *= -1;\n    }\n    if (uvs[1] > uvs[3]) {\n      vbias *= -1;\n    }\n  }\n\n  data[12] = uvs[0] + ubias / tex.width;\n  data[13] = uvs[1] + vbias / tex.height;\n  data[14] = uvs[2] - ubias / tex.width;\n  data[15] = uvs[3] - vbias / tex.height;\n\n  elem.uid = ++last_uid;\n  elem.shader = shader || null;\n  elem.blend = 0; // BLEND_ALPHA\n\n  if (shader_params) {\n    shader_params.clip_space = sprite_shader_params.clip_space;\n    elem.shader_params = shader_params;\n  } else {\n    elem.shader_params = null;\n  }\n  sprite_queue.push(elem);\n}\n\nexport function clip(z_start, z_end, x, y, w, h) {\n  let xy = vec2();\n  camera2d.virtualToCanvas(xy, [x, y]);\n  let wh = vec2();\n  camera2d.virtualToCanvas(wh, [x + w, y + h]);\n  xy[0] = round(xy[0]);\n  xy[1] = round(xy[1]);\n  wh[0] = round(wh[0]) - xy[0];\n  wh[1] = round(wh[1]) - xy[1];\n\n  // let gd_w = engine.render_width || engine.width;\n  let gd_h = engine.render_height || engine.height;\n  let scissor = [xy[0], gd_h - (xy[1] + wh[1]), wh[0], wh[1]];\n  queuefn(z_start - 0.01, () => {\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(scissor[0], scissor[1], scissor[2], scissor[3]);\n  });\n  queuefn(z_end - 0.01, () => {\n    gl.disable(gl.SCISSOR_TEST);\n  });\n}\n\nfunction diffTextures(texsa, texsb) {\n  if (texsa.length !== texsb.length) {\n    return true;\n  }\n  for (let ii = 0; ii < texsa.length; ++ii) {\n    if (texsa[ii] !== texsb[ii]) {\n      return true;\n    }\n  }\n  return false;\n}\n\nlet batch_state;\nlet sprite_geom;\nlet sprite_buffer; // Float32Array with 8 entries per vert\nlet sprite_buffer_len = 0; // in verts\nlet sprite_buffer_batch_start = 0;\nlet sprite_buffer_idx = 0; // in verts\nlet last_blend_mode;\nlet last_bound_shader;\nconst MAX_VERT_COUNT = 65536;\nlet batches = [];\n\nfunction commit() {\n  if (sprite_buffer_idx === sprite_buffer_batch_start) {\n    return;\n  }\n  batches.push({\n    state: batch_state,\n    start: sprite_buffer_batch_start,\n    end: sprite_buffer_idx,\n  });\n  sprite_buffer_batch_start = sprite_buffer_idx;\n}\n\nfunction commitAndFlush() {\n  commit();\n  if (!batches.length) {\n    return;\n  }\n  assert(sprite_buffer_idx);\n  sprite_geom.update(sprite_buffer, sprite_buffer_idx);\n  sprite_geom.bind();\n\n  for (let ii = 0; ii < batches.length; ++ii) {\n    let batch = batches[ii];\n    let { state, start, end } = batch;\n    if (last_bound_shader !== state.shader || state.shader_params) {\n      shaders.bind(sprite_vshader,\n        state.shader || sprite_fshader,\n        state.shader_params || sprite_shader_params);\n      last_bound_shader = state.shader;\n    }\n    if (last_blend_mode !== state.blend) {\n      last_blend_mode = state.blend;\n      if (last_blend_mode === BLEND_ADDITIVE) {\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n      } else {\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      }\n    }\n    textures.bindArray(state.texs);\n    gl.drawElements(sprite_geom.mode, (end - start) * 3 / 2, gl.UNSIGNED_SHORT, start * 3);\n  }\n\n  batches.length = 0;\n  sprite_buffer_idx = 0;\n  sprite_buffer_batch_start = 0;\n}\n\nfunction bufferSpriteData(data) {\n  let index = sprite_buffer_idx * 8;\n  sprite_buffer_idx += 4;\n\n  let c1 = data[8];\n  let c2 = data[9];\n  let c3 = data[10];\n  let c4 = data[11];\n  let u1 = data[12];\n  let v1 = data[13];\n  let u2 = data[14];\n  let v2 = data[15];\n\n  sprite_buffer[index] = data[0];\n  sprite_buffer[index + 1] = data[1];\n  sprite_buffer[index + 2] = c1;\n  sprite_buffer[index + 3] = c2;\n  sprite_buffer[index + 4] = c3;\n  sprite_buffer[index + 5] = c4;\n  sprite_buffer[index + 6] = u1;\n  sprite_buffer[index + 7] = v1;\n\n  sprite_buffer[index + 8] = data[2];\n  sprite_buffer[index + 9] = data[3];\n  sprite_buffer[index + 10] = c1;\n  sprite_buffer[index + 11] = c2;\n  sprite_buffer[index + 12] = c3;\n  sprite_buffer[index + 13] = c4;\n  sprite_buffer[index + 14] = u1;\n  sprite_buffer[index + 15] = v2;\n\n  sprite_buffer[index + 16] = data[4];\n  sprite_buffer[index + 17] = data[5];\n  sprite_buffer[index + 18] = c1;\n  sprite_buffer[index + 19] = c2;\n  sprite_buffer[index + 20] = c3;\n  sprite_buffer[index + 21] = c4;\n  sprite_buffer[index + 22] = u2;\n  sprite_buffer[index + 23] = v2;\n\n  sprite_buffer[index + 24] = data[6];\n  sprite_buffer[index + 25] = data[7];\n  sprite_buffer[index + 26] = c1;\n  sprite_buffer[index + 27] = c2;\n  sprite_buffer[index + 28] = c3;\n  sprite_buffer[index + 29] = c4;\n  sprite_buffer[index + 30] = u2;\n  sprite_buffer[index + 31] = v1;\n}\n\nexport function draw() {\n  if (!sprite_queue.length) {\n    return;\n  }\n  gl.disable(gl.DEPTH_TEST);\n  gl.depthMask(false);\n  gl.enable(gl.BLEND);\n\n  clip_space[0] = 2 / engine.viewport[2];\n  clip_space[1] = -2 / engine.viewport[3];\n\n  last_blend_mode = -1;\n  last_bound_shader = -1;\n\n  if (!sprite_geom) {\n    sprite_geom = geom.create([\n      [shaders.semantic.POSITION, gl.FLOAT, 2, false],\n      [shaders.semantic.COLOR, gl.FLOAT, 4, false],\n      [shaders.semantic.TEXCOORD, gl.FLOAT, 2, false],\n    ], [], null, geom.QUADS);\n    sprite_buffer = new Float32Array(1024);\n    sprite_buffer_len = sprite_buffer.length / 8;\n  }\n\n  sprite_queue.sort(cmpSprite);\n\n  batch_state = null;\n  assert.equal(sprite_buffer_idx, 0);\n  assert.equal(sprite_buffer_batch_start, 0);\n  assert.equal(batches.length, 0);\n  for (let ii = 0; ii < sprite_queue.length; ++ii) {\n    let elem = sprite_queue[ii];\n    if (elem.fn) {\n      commitAndFlush();\n      batch_state = null;\n      last_bound_shader = -1;\n      elem.fn();\n    } else {\n      if (!batch_state ||\n        diffTextures(elem.texs, batch_state.texs) ||\n        elem.shader !== batch_state.shader ||\n        elem.shader_params !== batch_state.shader_params ||\n        elem.blend !== batch_state.blend\n      ) {\n        commit();\n        batch_state = elem;\n      }\n      if (sprite_buffer_idx + 4 > sprite_buffer_len) {\n        commitAndFlush();\n        // batch_state left alone\n        if (sprite_buffer_len !== MAX_VERT_COUNT) {\n          let new_length = min((sprite_buffer_len * 1.25 + 3) & ~3, MAX_VERT_COUNT); // eslint-disable-line no-bitwise\n          sprite_buffer_len = new_length;\n          sprite_buffer = new Float32Array(new_length * 8);\n        }\n      }\n\n      bufferSpriteData(elem.data);\n      sprite_freelist.push(elem);\n    }\n  }\n  commitAndFlush();\n\n  sprite_queue.length = 0;\n  if (last_blend_mode !== BLEND_ALPHA) {\n    // always reset to this\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n  }\n}\n\nexport function buildRects(ws, hs) {\n  let rects = [];\n  let total_w = 0;\n  for (let ii = 0; ii < ws.length; ++ii) {\n    total_w += ws[ii];\n  }\n  let total_h = 0;\n  for (let ii = 0; ii < hs.length; ++ii) {\n    total_h += hs[ii];\n  }\n  let tex_w = nextHighestPowerOfTwo(total_w);\n  let tex_h = nextHighestPowerOfTwo(total_h);\n  let wh = [];\n  for (let ii = 0; ii < ws.length; ++ii) {\n    wh.push(ws[ii] / total_h);\n  }\n  let hw = [];\n  for (let ii = 0; ii < hs.length; ++ii) {\n    hw.push(hs[ii] / total_w);\n  }\n  let aspect = [];\n  let non_square = false;\n  let y = 0;\n  for (let jj = 0; jj < hs.length; ++jj) {\n    let x = 0;\n    for (let ii = 0; ii < ws.length; ++ii) {\n      let r = vec4(x / tex_w, y / tex_h,\n        (x + ws[ii]) / tex_w, (y + hs[jj]) / tex_h);\n      rects.push(r);\n      let asp = ws[ii] / hs[jj];\n      if (asp !== 1) {\n        non_square = true;\n      }\n      aspect.push(asp);\n      x += ws[ii];\n    }\n    y += hs[jj];\n  }\n  return {\n    widths: ws,\n    heights: hs,\n    wh,\n    hw,\n    rects,\n    aspect: non_square ? aspect : null,\n    total_w,\n    total_h,\n  };\n}\n\nfunction Sprite(params) {\n  if (params.texs) {\n    this.texs = params.texs;\n  } else {\n    this.texs = [];\n    if (params.tex) {\n      this.texs.push(params.tex);\n    } else if (params.layers) {\n      assert(params.name);\n      this.texs = [];\n      for (let ii = 0; ii < params.layers; ++ii) {\n        this.texs.push(textures.load({\n          url: `img/${params.name}_${ii}.png`,\n          filter_min: params.filter_min,\n          filter_mag: params.filter_mag,\n          wrap_s: params.wrap_s,\n          wrap_t: params.wrap_t,\n        }));\n      }\n    } else if (params.name) {\n      this.texs.push(textures.load({\n        url: `img/${params.name}.png`,\n        filter_min: params.filter_min,\n        filter_mag: params.filter_mag,\n        wrap_s: params.wrap_s,\n        wrap_t: params.wrap_t,\n      }));\n    } else {\n      assert(params.url);\n      this.texs.push(textures.load(params));\n    }\n  }\n\n  this.origin = params.origin || vec2(0, 0); // [0,1] range\n  this.size = params.size || vec2(1, 1);\n  this.color = params.color || vec4(1,1,1,1);\n  this.uvs = params.uvs || vec4(0, 0, 1, 1);\n  if (!params.uvs) {\n    // Fix up non-power-of-two textures\n    this.texs[0].onLoad((tex) => {\n      this.uvs[2] = tex.src_width / tex.width;\n      this.uvs[3] = tex.src_height / tex.height;\n    });\n  }\n\n  if (params.ws) {\n    this.uidata = buildRects(params.ws, params.hs);\n  }\n  this.shader = params.shader || null;\n}\n\n// params:\n//   required: x, y\n//   optional: z, w, h, uvs, color, nozoom, pixel_perfect\nSprite.prototype.draw = function (params) {\n  if (params.w === 0 || params.h === 0) {\n    return;\n  }\n  let w = (params.w || 1) * this.size[0];\n  let h = (params.h || 1) * this.size[1];\n  let uvs = (typeof params.frame === 'number') ? this.uidata.rects[params.frame] : (params.uvs || this.uvs);\n  queuesprite(this, params.x, params.y, params.z || Z.UI, w, h, params.rot, uvs, params.color || this.color,\n    params.shader || this.shader, params.shader_params, params.nozoom, params.pixel_perfect);\n};\n\nSprite.prototype.drawDualTint = function (params) {\n  params.shader = sprite_dual_fshader;\n  params.shader_params = {\n    color1: params.color1,\n  };\n  this.draw(params);\n};\n\nexport function create(params) {\n  return new Sprite(params);\n}\n\nexport function startup() {\n  clip_space[2] = -1;\n  clip_space[3] = 1;\n  sprite_vshader = shaders.create('glov/shaders/sprite.vp');\n  sprite_fshader = shaders.create('glov/shaders/sprite.fp');\n  sprite_dual_fshader = shaders.create('glov/shaders/sprite_dual.fp');\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst { cmd_parse } = require('./cmds.js');\nconst dot_prop = require('dot-prop');\nconst EventEmitter = require('../../common/tiny-events.js');\nconst local_storage = require('./local_storage.js');\nconst md5 = require('../../common/md5.js');\nconst { isPacket } = require('../../common/packet.js');\nconst util = require('../../common/util.js');\n\n// relevant events:\n//   .on('channel_data', cb(data [, mod_key, mod_value]));\n\nfunction ClientChannelWorker(subs, channel_id) {\n  EventEmitter.call(this);\n  this.subs = subs;\n  this.channel_id = channel_id;\n  this.subscriptions = 0;\n  this.subscribe_failed = false;\n  this.got_subscribe = false;\n  this.handlers = {};\n  this.data = {};\n  this.onMsg('channel_data', this.handleChannelData.bind(this));\n  this.onMsg('apply_channel_data', this.handleApplyChannelData.bind(this));\n}\nutil.inherits(ClientChannelWorker, EventEmitter);\n\n// cb(data)\nClientChannelWorker.prototype.onSubscribe = function (cb) {\n  assert(this.subscriptions || this.autosubscribed);\n  this.on('subscribe', cb);\n  if (this.got_subscribe) {\n    cb(this.data); // eslint-disable-line callback-return\n  }\n};\n\n// cb(data)\nClientChannelWorker.prototype.onceSubscribe = function (cb) {\n  assert(this.subscriptions || this.autosubscribed);\n  if (this.got_subscribe) {\n    cb(this.data); // eslint-disable-line callback-return\n  } else {\n    this.once('subscribe', cb);\n  }\n};\n\n\nClientChannelWorker.prototype.handleChannelData = function (data, resp_func) {\n  console.log(`got channel_data(${this.channel_id}):  ${JSON.stringify(data)}`);\n  this.data = data;\n  this.emit('channel_data', this.data);\n  this.got_subscribe = true;\n  this.emit('subscribe', this.data);\n\n  // Get command list upon first connect\n  let channel_type = this.channel_id.split('.')[0];\n  let cmd_list = this.subs.cmds_list_by_worker;\n  if (!cmd_list[channel_type]) {\n    cmd_list[channel_type] = {};\n    this.send('cmdparse', 'cmd_list', {}, function (err, resp) {\n      if (err) { // already unsubscribed?\n        console.error(`Error getting cmd_list for ${channel_type}`);\n        delete cmd_list[channel_type];\n      } else if (resp.found) {\n        cmd_list[channel_type] = resp;\n        cmd_parse.addServerCommands(resp.resp);\n      }\n    });\n  }\n\n  resp_func();\n};\n\nClientChannelWorker.prototype.handleApplyChannelData = function (data, resp_func) {\n  // already logged in handleChannelMessage\n  // if (!data.q) {\n  //   console.log(`got channel data mod: ${JSON.stringify(data)}`);\n  // }\n  if (data.value === undefined) {\n    dot_prop.delete(this.data, data.key);\n  } else {\n    dot_prop.set(this.data, data.key, data.value);\n  }\n  this.emit('channel_data', this.data, data.key, data.value);\n  resp_func();\n};\n\nClientChannelWorker.prototype.getChannelData = function (key, default_value) {\n  return dot_prop.get(this.data, key, default_value);\n};\n\nClientChannelWorker.prototype.setChannelData = function (key, value, skip_predict, resp_func) {\n  if (!skip_predict) {\n    dot_prop.set(this.data, key, value);\n  }\n  let q = value && value.q || undefined;\n  let pak = this.subs.client.wsPak('set_channel_data');\n  pak.writeAnsiString(this.channel_id);\n  pak.writeBool(q);\n  pak.writeAnsiString(key);\n  pak.writeJSON(value);\n  pak.send(resp_func);\n};\n\nClientChannelWorker.prototype.removeMsgHandler = function (msg, cb) {\n  assert(this.handlers[msg] === cb);\n  delete this.handlers[msg];\n};\n\nClientChannelWorker.prototype.onMsg = function (msg, cb) {\n  assert(!this.handlers[msg] || this.handlers[msg] === cb);\n  this.handlers[msg] = cb;\n};\n\nClientChannelWorker.prototype.pak = function (msg) {\n  let pak = this.subs.client.wsPak('channel_msg');\n  pak.writeAnsiString(this.channel_id);\n  pak.writeAnsiString(msg);\n  // pak.writeInt(flags);\n  return pak;\n};\n\nClientChannelWorker.prototype.send = function (msg, data, opts, resp_func) {\n  assert(typeof opts !== 'function');\n  this.subs.client.send('channel_msg', {\n    channel_id: this.channel_id,\n    msg, data,\n    broadcast: opts && opts.broadcast || undefined,\n    silent_error: (opts && opts.silent_error) ? 1 : undefined,\n  }, resp_func);\n};\n\nfunction SubscriptionManager(client) {\n  EventEmitter.call(this);\n  this.client = client;\n  this.channels = {};\n  this.logged_in = false;\n  this.login_credentials = null;\n  this.logged_in_username = null;\n  this.was_logged_in = false;\n  this.logging_in = false;\n  this.logging_out = false;\n  this.auto_create_user = false;\n  this.cmds_list_by_worker = {};\n\n  this.first_connect = true;\n  this.server_time = 0;\n  this.server_time_interp = 0;\n  client.onMsg('connect', this.handleConnect.bind(this));\n  client.onMsg('channel_msg', this.handleChannelMessage.bind(this));\n  client.onMsg('server_time', this.handleServerTime.bind(this));\n  client.onMsg('admin_msg', this.handleAdminMsg.bind(this));\n}\nutil.inherits(SubscriptionManager, EventEmitter);\n\nSubscriptionManager.prototype.onceConnected = function (cb) {\n  if (this.client.connected) {\n    return void cb();\n  }\n  this.once('connect', cb);\n};\n\nSubscriptionManager.prototype.handleAdminMsg = function (data) {\n  console.error(data);\n  this.emit('admin_msg', data);\n};\n\nSubscriptionManager.prototype.handleConnect = function () {\n  let reconnect = false;\n  if (this.first_connect) {\n    this.first_connect = false;\n  } else {\n    reconnect = true;\n  }\n\n  if (!this.client.connected || this.client.socket.readyState !== 1) { // WebSocket.OPEN\n    // we got disconnected while trying to log in, we'll retry after reconnection\n    return;\n  }\n\n  let subs = this;\n  function resub() {\n    // (re-)subscribe to all channels\n    for (let channel_id in subs.channels) {\n      let channel = subs.channels[channel_id];\n      if (channel.subscriptions) {\n        subs.client.send('subscribe', channel_id, function (err) {\n          if (err) {\n            channel.subscribe_failed = true;\n            console.error(`Error subscribing to ${channel_id}: ${err}`);\n            channel.emit('subscribe_fail', err);\n          }\n        });\n      }\n    }\n    subs.emit('connect', reconnect);\n  }\n\n  if (this.was_logged_in) {\n    // Try to re-connect to existing login\n    this.loginInternal(this.login_credentials, function (err) {\n      if (err && err === 'ERR_DISCONNECTED') {\n        // we got disconnected while trying to log in, we'll retry after reconnection\n      } else if (err) {\n        // Error logging in upon re-connection, no good way to handle this?\n        // TODO: Show some message to the user and prompt them to refresh?  Stay in \"disconnected\" state?\n        assert(false);\n      } else {\n        resub();\n      }\n    });\n  } else {\n    // Try auto-login\n    if (window.FBInstant) {\n      this.loginFacebook(function () {\n        // ignore error on auto-login\n      });\n    } else if (local_storage.get('name') && local_storage.get('password')) {\n      this.login(local_storage.get('name'), local_storage.get('password'), function () {\n        // ignore error on auto-login\n      });\n    }\n\n    resub();\n  }\n\n};\n\nSubscriptionManager.prototype.handleChannelMessage = function (pak, resp_func) {\n  assert(isPacket(pak));\n  let channel_id = pak.readAnsiString();\n  let msg = pak.readAnsiString();\n  let is_packet = pak.readBool();\n  let data = is_packet ? pak : pak.readJSON();\n  if (!data || !data.q) {\n    let debug_msg;\n    if (!is_packet) {\n      debug_msg = JSON.stringify(data);\n    } else if (typeof data.contents === 'function') {\n      debug_msg = data.contents();\n    } else {\n      debug_msg = '(pak)';\n    }\n    console.log(`got channel_msg(${channel_id}) ${msg}: ${debug_msg}`);\n  }\n  let channel = this.getChannel(channel_id);\n  if (!channel.handlers[msg]) {\n    console.error(`no handler for channel_msg(${channel_id}) ${msg}: ${JSON.stringify(data)}`);\n    return;\n  }\n  channel.handlers[msg](data, resp_func);\n};\n\nSubscriptionManager.prototype.handleServerTime = function (pak) {\n  this.server_time = pak.readInt();\n  if (this.server_time < this.server_time_interp && this.server_time > this.server_time_interp - 250) {\n    // slight time travel backwards, this one packet must have been delayed,\n    // since we once got a packet quicker. Just ignore this, interpolate from\n    // where we were before\n    // TODO: If the server had a short stall (less than 250ms) we might be\n    // ahead from now on!  Slowly interp back to the specified time\n    // (run speed at 90% until it matches?, same thing for catching up to\n    // small jumps ahead)\n  } else {\n    this.server_time_interp = this.server_time;\n  }\n};\n\nSubscriptionManager.prototype.getServerTime = function () {\n  // Interpolated server time as of start of last tick\n  return this.server_time_interp;\n};\n\nSubscriptionManager.prototype.tick = function (dt) {\n  this.server_time_interp += dt;\n};\n\nSubscriptionManager.prototype.subscribe = function (channel_id) {\n  this.getChannel(channel_id, true);\n};\n\nSubscriptionManager.prototype.getChannel = function (channel_id, do_subscribe) {\n  let channel = this.channels[channel_id];\n  if (!channel) {\n    channel = this.channels[channel_id] = new ClientChannelWorker(this, channel_id);\n  }\n  if (do_subscribe) {\n    channel.subscriptions++;\n    if (this.client.connected && channel.subscriptions === 1) {\n      channel.subscribe_failed = false;\n      this.client.send('subscribe', channel_id, function (err) {\n        if (err) {\n          channel.subscribe_failed = true;\n          console.error(`Error subscribing to ${channel_id}: ${err}`);\n          channel.emit('subscribe_fail', err);\n        }\n      });\n    }\n  }\n  return channel;\n};\n\nSubscriptionManager.prototype.getUserId = function () {\n  return this.loggedIn();\n};\n\nSubscriptionManager.prototype.getMyUserChannel = function () {\n  let user_id = this.loggedIn();\n  if (!user_id) {\n    return null;\n  }\n  let channel = this.getChannel(`user.${user_id}`);\n  if (!this.logging_out) {\n    channel.autosubscribed = true;\n  }\n  return channel;\n};\n\nSubscriptionManager.prototype.unsubscribe = function (channel_id) {\n  let channel = this.channels[channel_id];\n  assert(channel);\n  assert(channel.subscriptions);\n  channel.subscriptions--;\n  if (!channel.subscriptions) {\n    channel.got_subscribe = false;\n  }\n  if (this.client.connected && !channel.subscriptions && !channel.subscribe_failed) {\n    this.client.send('unsubscribe', channel_id);\n  }\n};\n\nSubscriptionManager.prototype.onLogin = function (cb) {\n  this.getMyUserChannel();\n  this.on('login', cb);\n  if (this.logged_in) {\n    return void cb();\n  }\n};\n\nSubscriptionManager.prototype.loggedIn = function () {\n  return this.logged_in ? this.logged_in_username || 'missing_name' : false;\n};\n\nSubscriptionManager.prototype.handleLoginResponse = function (resp_func, err, resp) {\n  this.logging_in = false;\n  if (!err) {\n    this.logged_in_username = resp.user_id;\n    this.logged_in_display_name = resp.display_name;\n    this.logged_in = true;\n    this.was_logged_in = true;\n    this.getMyUserChannel();\n    this.emit('login');\n  } else {\n    this.emit('login_fail', err);\n  }\n  resp_func(err);\n};\n\nSubscriptionManager.prototype.loginInternal = function (login_credentials, resp_func) {\n  if (this.logging_in) {\n    return void resp_func('Login already in progress');\n  }\n  this.logging_in = true;\n  this.logged_in = false;\n  this.client.send('login', {\n    user_id: login_credentials.user_id,\n    password: md5(this.client.secret + login_credentials.password),\n  }, this.handleLoginResponse.bind(this, resp_func));\n};\n\nSubscriptionManager.prototype.userCreateInternal = function (params, resp_func) {\n  if (this.logging_in) {\n    return resp_func('Login already in progress');\n  }\n  this.logging_in = true;\n  this.logged_in = false;\n  return this.client.send('user_create', params, this.handleLoginResponse.bind(this, resp_func));\n};\n\nfunction hashedPassword(user_id, password) {\n  if (password.split('$$')[0] === 'prehashed') {\n    password = password.split('$$')[1];\n  } else {\n    password = md5(md5(user_id.toLowerCase()) + password);\n  }\n  return password;\n}\n\n\nSubscriptionManager.prototype.login = function (username, password, resp_func) {\n  username = (username || '').trim();\n  if (!username) {\n    return resp_func('Missing username');\n  }\n  password = (password || '').trim();\n  if (!password) {\n    return resp_func('Missing password');\n  }\n  let hashed_password = hashedPassword(username, password);\n  if (hashed_password !== password) {\n    local_storage.set('password', `prehashed$$${hashed_password}`);\n  }\n  this.login_credentials = { user_id: username, password: hashed_password };\n  if (!this.auto_create_user) {\n    // Just return result directly\n    return this.loginInternal(this.login_credentials, resp_func);\n  }\n  return this.loginInternal(this.login_credentials, (err, data) => {\n    if (!err || err !== 'ERR_USER_NOT_FOUND') {\n      return void resp_func(err, data);\n    }\n    // user not found, auto-create\n    this.userCreate({\n      user_id: username,\n      password,\n      password_confirm: password,\n      email: 'autocreate@glovjs.org',\n    }, resp_func);\n  });\n};\n\nSubscriptionManager.prototype.loginFacebook = function (resp_func) { // FRVR\n  this.login_credentials = { fb: true };\n  return this.loginInternal(this.login_credentials, resp_func);\n};\n\nSubscriptionManager.prototype.userCreate = function (params, resp_func) {\n  params.user_id = (params.user_id || '').trim();\n  if (!params.user_id) {\n    return resp_func('Missing username');\n  }\n  params.password = (params.password || '').trim();\n  if (!params.password) {\n    return resp_func('Missing password');\n  }\n  params.password_confirm = (params.password_confirm || '').trim();\n  if (!this.auto_create_user && !params.password_confirm) {\n    return resp_func('Missing password confirmation');\n  }\n  params.email = (params.email || '').trim();\n  if (!this.auto_create_user && !params.email) {\n    return resp_func('Missing email');\n  }\n  params.display_name = (params.display_name || '').trim();\n  let hashed_password = hashedPassword(params.user_id, params.password);\n  if (hashed_password !== params.password) {\n    local_storage.set('password', `prehashed$$${hashed_password}`);\n  }\n  let hashed_password_confirm = hashedPassword(params.user_id, params.password_confirm);\n  if (hashed_password !== hashed_password_confirm) {\n    return resp_func('Passwords do not match');\n  }\n  this.login_credentials = { user_id: params.user_id, password: hashed_password };\n  return this.userCreateInternal({\n    display_name: params.display_name || params.user_id,\n    user_id: params.user_id,\n    email: params.email,\n    password: hashed_password,\n  }, resp_func);\n};\n\n\nSubscriptionManager.prototype.logout = function () {\n  assert(this.logged_in);\n  assert(!this.logging_in);\n  assert(!this.logging_out);\n  // Don't know how to gracefully handle logging out with subscriptions currently, assert we have none\n  for (let channel_id in this.channels) {\n    let channel = this.channels[channel_id];\n    assert(!channel.subscriptions, `Remaining active subscription for ${channel_id}`);\n    if (channel.autosubscribed) {\n      channel.autosubscribed = false;\n    }\n  }\n\n  this.logging_out = true;\n  this.client.send('logout', null, (err) => {\n    this.logging_out = false;\n    if (!err) {\n      local_storage.set('password', undefined);\n      this.logged_in = false;\n      this.logged_in_username = null;\n      this.was_logged_in = false;\n      this.login_credentials = null;\n      this.emit('logout');\n    }\n  });\n};\n\nSubscriptionManager.prototype.serverLog = function (type, data) {\n  this.client.send('log', { type, data });\n};\n\nSubscriptionManager.prototype.sendCmdParse = function (command, resp_func) {\n  let self = this;\n  let channel_ids = Object.keys(self.channels);\n  let idx = 0;\n  let last_error = 'Unknown command';\n  function tryNext() {\n    let channel_id;\n    let channel;\n    do {\n      channel_id = channel_ids[idx++];\n      channel = self.channels[channel_id];\n    } while (channel_id && (!channel || !(channel.subscriptions || channel.autosubscribed)));\n    if (!channel_id) {\n      self.serverLog('cmd_parse_unknown', command);\n      return resp_func(last_error);\n    }\n    return channel.send('cmdparse', command, { silent_error: 1 },\n      function (err, resp) {\n        if (err || resp && resp.found) {\n          return resp_func(err, resp ? resp.resp : null);\n        }\n        // otherwise, was not found\n        if (resp && resp.err) {\n          last_error = resp.err;\n        }\n        return self.onceConnected(tryNext);\n      }\n    );\n  }\n  self.onceConnected(tryNext);\n};\n\nexport function create(client) {\n  return new SubscriptionManager(client);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint-env browser */\n\nconst assert = require('assert');\nconst engine = require('./engine.js');\nconst { filewatchOn } = require('./filewatch.js');\nconst local_storage = require('./local_storage.js');\nconst urlhash = require('./urlhash.js');\nconst { callEach, isPowerOfTwo, nextHighestPowerOfTwo, ridx } = require('../../common/util.js');\n\nconst TEX_UNLOAD_TIME = 5 * 60 * 1000; // for textures loaded (each frame) with auto_unload: true\n\nexport let textures = {};\nexport let load_count = 0;\nlet aniso = 4;\nlet max_aniso = 0;\nlet aniso_enum;\n\nlet default_filter_min;\nlet default_filter_mag;\n\nconst cube_faces = [\n  { target: 'TEXTURE_CUBE_MAP_NEGATIVE_X', pos: [0,1] },\n  { target: 'TEXTURE_CUBE_MAP_POSITIVE_X', pos: [0,0] },\n  { target: 'TEXTURE_CUBE_MAP_NEGATIVE_Y', pos: [1,0] },\n  { target: 'TEXTURE_CUBE_MAP_POSITIVE_Y', pos: [1,1] },\n  { target: 'TEXTURE_CUBE_MAP_NEGATIVE_Z', pos: [2,0] },\n  { target: 'TEXTURE_CUBE_MAP_POSITIVE_Z', pos: [2,1] },\n];\n\nexport const format = {\n  R8: { count: 1 },\n  RGB8: { count: 3 },\n  RGBA8: { count: 4 },\n};\n\nexport function defaultFilters(min, mag) {\n  default_filter_min = min;\n  default_filter_mag = mag;\n}\n\nlet bound_unit = null;\nlet bound_tex = [];\n\nlet handle_loading;\nlet handle_error;\n\nlet global_timer;\n\nfunction setUnit(unit) {\n  if (unit !== bound_unit) {\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    bound_unit = unit;\n  }\n}\n\nfunction bindHandle(unit, target, handle) {\n  if (bound_tex[unit] !== handle) {\n    setUnit(unit);\n    gl.bindTexture(target, handle);\n    bound_tex[unit] = handle;\n  }\n}\n\nfunction unbindAll(target) {\n  for (let unit = 0; unit < bound_tex.length; ++unit) {\n    setUnit(unit);\n    gl.bindTexture(target, target === gl.TEXTURE_2D ? handle_loading : null);\n    bound_tex[unit] = null;\n  }\n}\n\nexport function bind(unit, tex) {\n  tex.last_use = global_timer;\n  // May or may not change the unit\n  bindHandle(unit, tex.target, tex.eff_handle);\n}\n\n// hot path inlined for perf\nexport function bindArray(texs) {\n  for (let ii = 0; ii < texs.length; ++ii) {\n    let tex = texs[ii];\n    tex.last_use = global_timer;\n    let handle = tex.eff_handle;\n    if (bound_tex[ii] !== handle) {\n      if (ii !== bound_unit) {\n        gl.activeTexture(gl.TEXTURE0 + ii);\n        bound_unit = ii;\n      }\n      gl.bindTexture(tex.target, handle);\n      bound_tex[ii] = handle;\n    }\n  }\n}\n\nexport function isArrayBound(texs) {\n  for (let ii = 0; ii < texs.length; ++ii) {\n    let tex = texs[ii];\n    let handle = tex.eff_handle;\n    if (bound_tex[ii] !== handle) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet auto_unload_textures = [];\n\nfunction Texture(params) {\n  this.name = params.name;\n  this.loaded = false;\n  this.load_fail = false;\n  this.target = params.target || gl.TEXTURE_2D;\n  this.is_array = this.target === gl.TEXTURE_2D_ARRAY;\n  this.is_cube = this.target === gl.TEXTURE_CUBE_MAP;\n  this.handle = gl.createTexture();\n  this.eff_handle = handle_loading;\n  this.setSamplerState(params);\n  this.src_width = this.src_height = 1;\n  this.width = this.height = 1;\n  this.nozoom = params.nozoom || false;\n  this.on_load = [];\n  this.gpu_mem = 0;\n  this.soft_error = params.soft_error || false;\n  this.last_use = global_timer;\n  this.auto_unload = params.auto_unload || false;\n  if (this.auto_unload) {\n    auto_unload_textures.push(this);\n  }\n\n  this.format = params.format || format.RGBA8;\n\n  if (params.data) {\n    let err = this.updateData(params.width, params.height, params.data);\n    assert(!err, err);\n  } else {\n    // texture is not valid, do not leave bound\n    unbindAll(this.target);\n    if (params.url) {\n      this.url = params.url;\n      this.loadURL(params.url);\n    }\n  }\n}\n\nTexture.prototype.updateGPUMem = function () {\n  let new_size = this.width * this.height * this.format.count;\n  if (this.mipmaps) {\n    new_size *= 1.5;\n  }\n  let diff = new_size - this.gpu_mem;\n  engine.perf_state.gpu_mem.tex += diff;\n  this.gpu_mem = diff;\n};\n\nTexture.prototype.setSamplerState = function (params) {\n  let target = this.target;\n  setUnit(0);\n  bound_tex[0] = null; // Force a re-bind, no matter what\n  bindHandle(0, target, this.handle);\n\n  this.filter_min = params.filter_min || default_filter_min;\n  this.filter_mag = params.filter_mag || default_filter_mag;\n  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, this.filter_min);\n  gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, this.filter_mag);\n  this.wrap_s = params.wrap_s || gl.REPEAT;\n  this.wrap_t = params.wrap_t || gl.REPEAT;\n  gl.texParameteri(target, gl.TEXTURE_WRAP_S, this.wrap_s);\n  gl.texParameteri(target, gl.TEXTURE_WRAP_T, this.wrap_t);\n\n  this.mipmaps = this.filter_min >= 0x2700 && this.filter_min <= 0x2703; // Probably gl.LINEAR_MIPMAP_LINEAR\n\n  if (max_aniso) {\n    if (this.mipmaps && params.filter_mag !== gl.NEAREST) {\n      gl.texParameterf(gl.TEXTURE_2D, aniso_enum, aniso);\n    } else {\n      gl.texParameterf(gl.TEXTURE_2D, aniso_enum, 1);\n    }\n  }\n};\n\nTexture.prototype.updateData = function updateData(w, h, data) {\n  assert(!this.destroyed);\n  setUnit(0);\n  bound_tex[0] = null; // Force a re-bind, no matter what\n  bindHandle(0, this.target, this.handle);\n  this.last_use = global_timer;\n  this.src_width = w;\n  this.src_height = h;\n  this.width = w;\n  this.height = h;\n  gl.getError(); // clear the error flag if there is one\n  // Resize NP2 if this is not being used for a texture array, and it is not explicitly allowed (non-mipmapped, wrapped)\n  let np2 = (!isPowerOfTwo(w) || !isPowerOfTwo(h)) && !this.is_array && !this.is_cube &&\n    !(!this.mipmaps && this.wrap_s === gl.CLAMP_TO_EDGE && this.wrap_t === gl.CLAMP_TO_EDGE);\n  if (np2) {\n    this.width = nextHighestPowerOfTwo(w);\n    this.height = nextHighestPowerOfTwo(h);\n    gl.texImage2D(this.target, 0, this.format.internal_type, this.width, this.height, 0,\n      this.format.internal_type, this.format.gl_type, null);\n  }\n  if (data instanceof Uint8Array) {\n    assert(data.length >= w * h * this.format.count);\n    assert(!this.is_cube);\n    if (this.is_array) {\n      let num_images = h / w; // assume square\n      gl.texImage3D(this.target, 0, this.format.internal_type, w, w,\n        num_images, 0, this.format.internal_type, this.format.gl_type, data);\n    } else if (np2) {\n      // Could do multiple upload thing like below, but smarter, but we really shouldn't be doing this for\n      // in-process generated images!\n      gl.texSubImage2D(this.target, 0, 0, 0, w, h, this.format.internal_type, this.format.gl_type, data);\n    } else {\n      gl.texImage2D(this.target, 0, this.format.internal_type, w, h, 0,\n        this.format.internal_type, this.format.gl_type, data);\n    }\n  } else {\n    assert(data.width); // instanceof Image fails with ublock AdBlocker; also, this is either an Image or Canvas\n    if (this.is_cube) {\n      assert.equal(w * 2, h * 3);\n      let tex_size = h / 2;\n      let canvas = document.createElement('canvas');\n      canvas.width = tex_size;\n      canvas.height = tex_size;\n      let ctx = canvas.getContext('2d');\n      for (let ii = 0; ii < cube_faces.length; ++ii) {\n        let face = cube_faces[ii];\n        ctx.drawImage(data, face.pos[0] * tex_size, face.pos[1] * tex_size, tex_size, tex_size,\n          0, 0, tex_size, tex_size);\n        gl.texImage2D(gl[face.target], 0, this.format.internal_type, this.format.internal_type, this.format.gl_type,\n          canvas);\n      }\n    } else if (this.is_array) {\n      let num_images = h / w;\n      gl.texImage3D(this.target, 0, this.format.internal_type, w, w,\n        num_images, 0, this.format.internal_type, this.format.gl_type, data);\n\n      if (gl.getError()) {\n        // Fix for Samsung devices (Chris's and Galaxy S8 on CrossBrowserTesting)\n        // Also fixes locally on Chrome when using a 8K source texture (was 896x57344),\n        //  perhaps some auto-scaling is going on in the gl.texImage3D call if required?\n        // Try drawing to canvas first\n        let canvas = document.createElement('canvas');\n        canvas.width = w;\n        canvas.height = h;\n        let ctx = canvas.getContext('2d');\n        ctx.drawImage(data, 0, 0);\n        gl.texImage3D(this.target, 0, this.format.internal_type, w, w,\n          num_images, 0, this.format.internal_type, this.format.gl_type, canvas);\n      }\n\n    } else if (np2) {\n      // Pad up to power of two\n      // Duplicate right and bottom pixel row by sending image 3 times\n      if (w !== this.width) {\n        gl.texSubImage2D(this.target, 0, 1, 0, this.format.internal_type, this.format.gl_type, data);\n      }\n      if (h !== this.height) {\n        gl.texSubImage2D(this.target, 0, 0, 1, this.format.internal_type, this.format.gl_type, data);\n      }\n      gl.texSubImage2D(this.target, 0, 0, 0, this.format.internal_type, this.format.gl_type, data);\n    } else {\n      gl.texImage2D(this.target, 0, this.format.internal_type, this.format.internal_type, this.format.gl_type, data);\n    }\n  }\n  let gl_err = gl.getError();\n  if (gl_err) {\n    return gl_err;\n  }\n  if (this.mipmaps) {\n    gl.generateMipmap(this.target);\n    assert(!gl.getError());\n  }\n  this.updateGPUMem();\n  this.eff_handle = this.handle;\n  this.loaded = true;\n\n  callEach(this.on_load, this.on_load = null, this);\n\n  return 0;\n};\n\nTexture.prototype.onLoad = function (cb) {\n  if (this.loaded) {\n    cb(this); // eslint-disable-line callback-return\n  } else {\n    this.on_load.push(cb);\n  }\n};\n\nlet texture_base_url = '';\nexport function getExternalTextureURL(url) {\n  if (!url.match(/^.{2,7}:/)) {\n    url = `${texture_base_url||urlhash.getURLBase()}${url}`;\n  }\n  return url;\n}\nexport function setExternalTextureBaseURL(base_url) {\n  texture_base_url = base_url;\n}\n\nconst TEX_RETRY_COUNT = 4;\nTexture.prototype.loadURL = function loadURL(url, filter) {\n  let tex = this;\n  assert(!tex.destroyed);\n\n  // When our browser's location has been changed from 'site.com/foo/' to\n  //  'site.com/foo/bar/7' our relative image URLs are still relative to the\n  //  base.  Maybe should set some meta tag to do this instead?\n  if (!url.match(/^.{2,7}:/)) {\n    url = `${urlhash.getURLBase()}${url}`;\n  }\n\n  let load_gen = tex.load_gen = (tex.load_gen || 0) + 1;\n  function tryLoad(next) {\n    let did_next = false;\n    function done(img) {\n      if (!did_next) {\n        did_next = true;\n        return void next(img);\n      }\n    }\n\n    let img = new Image();\n    img.onload = function () {\n      done(img);\n    };\n    function fail() {\n      done(null);\n    }\n    img.onerror = fail;\n    img.crossOrigin = 'anonymous';\n    img.src = url;\n  }\n\n  ++load_count;\n  let retries = 0;\n  function handleLoad(img) {\n    if (tex.load_gen !== load_gen || tex.destroyed) {\n      // someone else requested this texture to be loaded!  Or, it was already unloaded\n      --load_count;\n      return;\n    }\n    let err_details = '';\n    if (img) {\n      tex.format = format.RGBA8;\n      if (filter) {\n        img = filter(tex, img);\n      }\n      let err = tex.updateData(img.width, img.height, img);\n      if (err) {\n        err_details = `: GLError(${err})`;\n        // Samsung TV gets 1282 on texture arrays\n        // Samsung Galaxy S6 gets 1281 on texture arrays\n        // Note: Any failed image load (partial read of a bad png, etc) also results in 1281!\n        if (tex.is_array && (String(err) === '1282' || String(err) === '1281') && engine.webgl2 && !engine.DEBUG) {\n          local_storage.setJSON('webgl2_disable', {\n            ua: navigator.userAgent,\n            ts: Date.now(),\n          });\n          console.error(`Error loading array texture \"${url}\"${err_details}, reloading without WebGL2..`);\n          engine.reloadSafe();\n          return;\n        }\n        if (!tex.for_reload) {\n          retries = TEX_RETRY_COUNT; // do not retry this\n        }\n      } else {\n        --load_count;\n        return;\n      }\n    }\n    let err = `Error loading texture \"${url}\"${err_details}`;\n    retries++;\n    if (retries > TEX_RETRY_COUNT) {\n      --load_count;\n      tex.eff_handle = handle_error;\n      tex.load_fail = true;\n      console.error(`${err}${err_details ? '' : ', retries failed'}`);\n      if (tex.soft_error) {\n        tex.err = 'Load failed';\n      } else {\n        assert(false, err);\n      }\n      return;\n    }\n    console.error(`${err}, retrying... `);\n    setTimeout(tryLoad.bind(null, handleLoad), 100 * retries * retries);\n  }\n  tryLoad(handleLoad);\n};\n\nTexture.prototype.copyTexImage = function (x, y, w, h) {\n  assert(!this.destroyed);\n  assert(w && h);\n  bindHandle(0, this.target, this.handle);\n  gl.copyTexImage2D(this.target, 0, gl.RGB, x, y, w, h, 0);\n  this.last_use = global_timer;\n  this.src_width = this.width = w;\n  this.src_height = this.height = h;\n  this.updateGPUMem();\n};\n\nTexture.prototype.destroy = function () {\n  if (this.destroyed) {\n    return;\n  }\n  assert(this.name);\n  let auto_unload = this.auto_unload;\n  if (auto_unload) {\n    this.auto_unload = null;\n    let idx = auto_unload_textures.indexOf(this);\n    assert(idx !== -1);\n    ridx(auto_unload_textures, idx);\n  }\n  delete textures[this.name];\n  unbindAll(this.target);\n  gl.deleteTexture(this.handle);\n  this.width = this.height = 0;\n  this.updateGPUMem();\n  this.destroyed = true;\n  if (typeof auto_unload === 'function') {\n    auto_unload();\n  }\n};\n\nfunction create(params) {\n  assert(params.name);\n  let texture = new Texture(params);\n  textures[params.name] = texture;\n  return texture;\n}\n\nlet last_temporary_id = 0;\nexport function createForCapture(unique_name, auto_unload) {\n  let name = unique_name || `screen_temporary_tex_${++last_temporary_id}`;\n  assert(!textures[name]);\n  let texture = create({\n    filter_min: gl.NEAREST,\n    filter_mag: gl.NEAREST,\n    wrap_s: gl.CLAMP_TO_EDGE,\n    wrap_t: gl.CLAMP_TO_EDGE,\n    format: format.RGB8,\n    name,\n    auto_unload,\n  });\n  texture.loaded = true;\n  texture.eff_handle = texture.handle;\n  return texture;\n}\n\nexport function load(params) {\n  let key = params.name = params.name || params.url;\n  assert(key);\n  let tex = textures[key];\n  if (!tex) {\n    tex = create(params);\n  }\n  tex.last_use = global_timer;\n  return tex;\n}\n\nexport function cname(key) {\n  let idx = key.lastIndexOf('/');\n  if (idx !== -1) {\n    key = key.slice(idx+1);\n  }\n  idx = key.indexOf('.');\n  if (idx !== -1) {\n    key = key.slice(0, idx);\n  }\n  return key.toLowerCase();\n}\nexport function findTexForReplacement(search_key) {\n  search_key = cname(search_key);\n  for (let key in textures) {\n    let compare_key = cname(key);\n    if (compare_key === search_key) {\n      return textures[key];\n    }\n  }\n  return null;\n}\n\nlet tick_next_tex = 0;\nexport function texturesTick() {\n  global_timer = engine.global_timer;\n  let len = auto_unload_textures.length;\n  if (!len) {\n    return;\n  }\n  if (tick_next_tex >= len) {\n    tick_next_tex = 0;\n  }\n  let tex = auto_unload_textures[tick_next_tex];\n  if (tex.last_use < global_timer - TEX_UNLOAD_TIME) {\n    console.log(`Unloading texture ${tex.name}`);\n    tex.destroy();\n  } else {\n    ++tick_next_tex;\n  }\n}\n\nexport function texturesUnloadDynamic() {\n  while (auto_unload_textures.length) {\n    auto_unload_textures[0].destroy();\n  }\n}\n\nfunction textureReload(filename) {\n  let tex = textures[filename];\n  if (tex && tex.url) {\n    tex.for_reload = true;\n    tex.loadURL(`${tex.url}?rl=${Date.now()}`);\n    return true;\n  }\n  return false;\n}\n\nexport function startup() {\n\n  default_filter_min = gl.LINEAR_MIPMAP_LINEAR;\n  default_filter_mag = gl.LINEAR;\n\n  format.R8.internal_type = gl.LUMINANCE;\n  format.R8.gl_type = gl.UNSIGNED_BYTE;\n  format.RGB8.internal_type = gl.RGB;\n  format.RGB8.gl_type = gl.UNSIGNED_BYTE;\n  format.RGBA8.internal_type = gl.RGBA;\n  format.RGBA8.gl_type = gl.UNSIGNED_BYTE;\n\n  let ext_anisotropic = (\n    gl.getExtension('EXT_texture_filter_anisotropic') ||\n    gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n    gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic')\n  );\n  if (ext_anisotropic) {\n    aniso_enum = ext_anisotropic.TEXTURE_MAX_ANISOTROPY_EXT;\n    aniso = max_aniso = gl.getParameter(ext_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n  }\n\n  handle_error = load({\n    name: 'error',\n    width: 2, height: 2,\n    nozoom: true,\n    format: format.RGBA8,\n    filter_mag: gl.NEAREST,\n    data: new Uint8Array([\n      255, 20, 147, 255,\n      255, 0, 0, 255,\n      255, 255, 255, 255,\n      255, 20, 147, 255\n    ]),\n  }).handle;\n\n  handle_loading = load({\n    name: 'loading',\n    width: 2, height: 2,\n    nozoom: true,\n    format: format.RGBA8,\n    data: new Uint8Array([\n      127, 127, 127, 255,\n      0, 0, 0, 255,\n      64, 64, 64, 255,\n      127, 127, 127, 255,\n    ]),\n  }).handle;\n\n  load({\n    name: 'white',\n    width: 2, height: 2,\n    nozoom: true,\n    format: format.RGBA8,\n    data: new Uint8Array([\n      255, 255, 255, 255,\n      255, 255, 255, 255,\n      255, 255, 255, 255,\n      255, 255, 255, 255,\n    ]),\n  });\n\n  load({\n    name: 'invisible',\n    width: 2, height: 2,\n    nozoom: true,\n    format: format.RGBA8,\n    data: new Uint8Array([\n      0, 0, 0, 0,\n      0, 0, 0, 0,\n      0, 0, 0, 0,\n      0, 0, 0, 0,\n    ]),\n  });\n\n  filewatchOn('.png', textureReload);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst glov_engine = require('./engine.js');\nconst { floor, min, pow, random } = Math;\nconst sprites = require('./sprites.js');\nconst shaders = require('./shaders.js');\nconst textures = require('./textures.js');\nconst glov_ui = require('./ui.js');\nconst { easeOut } = require('../../common/util.js');\nconst { unit_vec, vec4 } = require('./vmath.js');\n\nlet transitions = [];\n\nexport const IMMEDIATE = 'immediate';\n\nexport const REMOVE = 'remove';\nexport const CONTINUE = 'continue';\n\nconst shader_data = {\n  transition_pixelate: {\n    fp: 'glov/shaders/transition_pixelate.fp',\n  },\n};\n\nfunction getShader(key) {\n  let elem = shader_data[key];\n  if (!elem.shader) {\n    elem.shader = shaders.create(elem.fp);\n  }\n  return elem.shader;\n}\n\nclass GlovTransition {\n  constructor(z, func) {\n    this.z = z;\n    this.capture = null;\n    this.func = func;\n    this.accum_time = 0;\n  }\n}\n\nfunction transitionCapture(trans) {\n  assert(!trans.capture);\n  trans.capture = textures.createForCapture();\n  glov_engine.captureFramebuffer(trans.capture);\n}\n\nexport function queue(z, fn) {\n  let immediate = false;\n  if (z === IMMEDIATE) {\n    immediate = true;\n    z = Z.TRANSITION_FINAL;\n  }\n\n  for (let ii = 0; ii < transitions.length; ++ii) {\n    let trans = transitions[ii];\n    if (trans.z === z) {\n      // same Z\n      assert(trans.capture);\n      if (!trans.capture) {\n        // two transitions at the same Z on one frame!  ignore second\n        return false;\n      }\n    }\n  }\n  let trans = new GlovTransition(z, fn);\n  transitions.push(trans);\n\n  if (immediate) {\n    transitionCapture(trans);\n  }\n  return true;\n}\n\nfunction destroyTexture(tex) {\n  tex.destroy();\n}\n\nexport function render(dt) {\n  dt = min(dt, 100); // debug: clamp frame times\n  for (let trans_idx = 0; trans_idx < transitions.length; ++trans_idx) {\n    let trans = transitions[trans_idx];\n    trans.accum_time += dt;\n    if (!trans.capture) {\n      // queue up a capture past the specified Z, so transitions rendering at that Z (plus a handful) get captured\n      sprites.queuefn(trans.z + Z.TRANSITION_RANGE, transitionCapture.bind(null, trans));\n    } else if (trans.capture) {\n      // call the function and give them the Z\n      // If not the last one, want it to end now!\n      let force_end = trans_idx < transitions.length - 1;\n      let ret = trans.func(trans.z, trans.capture, trans.accum_time, force_end);\n      if (ret === REMOVE) {\n        setTimeout(destroyTexture.bind(null, trans.capture), 0);\n        transitions.splice(trans_idx, 1);\n        trans_idx--;\n      }\n    }\n  }\n}\n\nexport function active() {\n  return transitions.length;\n}\n\nfunction glovTransitionFadeFunc(fade_time, z, initial, ms_since_start, force_end) {\n  let progress = min(ms_since_start / fade_time, 1);\n  let alpha = (1 - easeOut(progress, 2));\n  let color = vec4(1, 1, 1, alpha);\n  camera2d.setNormalized();\n  sprites.queueraw4([initial],\n    0, 0, 0, 1,\n    1, 1, 1, 0,\n    z,\n    0, 1, 1, 0,\n    color);\n\n  if (force_end || progress === 1) {\n    return REMOVE;\n  }\n  return CONTINUE;\n}\n\n\n/*\n  // Doesn't work because we need more than just 2 UV values in the queue call\nfunction glovTransitionWipeFunc(wipe_time, wipe_angle, z, tex, ms_since_start, force_end) {\n  let progress = min(ms_since_start / wipe_time, 1);\n\n  camera2d.setNormalized();\n\n  let uvs = [[0,1], [1,0]];\n\n  let points = [{}, {}, {}, {}];\n  for (let ii = 0; ii < 4; ii++) {\n    let x = (ii === 1 || ii === 2) ? 1 : 0;\n    let y = (ii >= 2) ? 1 : 0;\n    points[ii].x = x;\n    points[ii].y = y;\n  }\n\n  while (wipe_angle > PI) {\n    wipe_angle -= (2 * PI);\n  }\n  while (wipe_angle < -PI) {\n    wipe_angle += (2 * PI);\n  }\n\n  // TODO: if anyone ever uses this, change 0 degrees to be up, not right, to match other things?\n  if (wipe_angle >= -PI_4 && wipe_angle <= PI_4) {\n    // horizontal wipe from left to right\n    let x0 = progress * 2; // rightmost x\n    let x1 = x0 - sin(abs(wipe_angle)) / SQRT1_2; // leftmost x\n    if (wipe_angle < 0) {\n      points[0].x = x1;\n      points[3].x = x0;\n    } else {\n      points[0].x = x0;\n      points[3].x = x1;\n    }\n    points[1].x = points[2].x = 2;\n  } else if (wipe_angle >= PI_2 + PI_4 || wipe_angle <= -PI_2 - PI_4) {\n    // horizontal wipe from right to left\n    let x0 = 1 - progress * 2; // leftmost x\n    let x1 = x0 + sin(abs(wipe_angle)) / SQRT1_2; // rightmost x,\n    if (wipe_angle < 0) {\n      points[1].x = x1;\n      points[2].x = x0;\n    } else {\n      points[1].x = x0;\n      points[2].x = x1;\n    }\n    points[0].x = points[3].x = -1;\n  } else if (wipe_angle > PI_4 && wipe_angle <= PI_2 + PI_4) {\n    // vertical wipe, top to bottom\n    let y0 = progress * 2; // bottommost y\n    let offs = cos(wipe_angle) / SQRT1_2;\n    let y1 = y0 - abs(offs); // topmost y,\n    if (offs > 0) {\n      points[0].y = y0;\n      points[1].y = y1;\n    } else {\n      points[0].y = y1;\n      points[1].y = y0;\n    }\n    points[2].y = points[3].y = 2;\n  } else {\n    // vertical wipe, bottom to top\n    let y0 = 1 - progress * 2; // topmost y\n    let offs = cos(wipe_angle) / SQRT1_2;\n    let y1 = y0 + abs(offs); // bottommost y,\n    if (offs > 0) {\n      points[2].y = y1;\n      points[3].y = y0;\n    } else {\n      points[2].y = y0;\n      points[3].y = y1;\n    }\n    points[0].y = points[1].y = -1;\n  }\n  // interp UVs based on points\n  points[0].u = lerp(points[0].x, uvs[0][0], uvs[1][0]);\n  points[1].u = lerp(points[1].x, uvs[0][0], uvs[1][0]);\n  points[2].u = lerp(points[2].x, uvs[0][0], uvs[1][0]);\n  points[3].u = lerp(points[3].x, uvs[0][0], uvs[1][0]);\n  points[0].v = lerp(points[0].y, uvs[0][1], uvs[1][1]);\n  points[1].v = lerp(points[1].y, uvs[0][1], uvs[1][1]);\n  points[2].v = lerp(points[2].y, uvs[0][1], uvs[1][1]);\n  points[3].v = lerp(points[3].y, uvs[0][1], uvs[1][1]);\n\n  sprites.queueraw4([tex],\n    points[0].x, points[0].y, points[3].x, points[3].y,\n    points[2].x, points[2].y, points[1].x, points[1].y,\n    z,\n    points[0].u, points[0].v, points[2].u, points[2].v,\n    unit_vec, 'alpha_nearest');\n\n  if (force_end || progress === 1) {\n    return REMOVE;\n  }\n  return CONTINUE;\n}\n\n*/\n\nfunction glovTransitionSplitScreenFunc(time, border_width, slide_window, z, tex, ms_since_start, force_end) {\n  let border_color = vec4(1, 1, 1, 1);\n  let progress = easeOut(min(ms_since_start / time, 1), 2);\n  camera2d.setNormalized();\n\n  let uvs = [[0,1], [1,0]];\n\n  let xoffs = progress;\n  let v_half = uvs[0][1] + (uvs[1][1] - uvs[0][1]) / 2;\n  if (slide_window) { // slide window\n    sprites.queueraw([tex], 0, 0, z, 1 - xoffs, 1 / 2,\n      0, uvs[0][1], uvs[1][0] * (1 - progress), v_half,\n      unit_vec);\n    sprites.queueraw([tex], 0 + xoffs, 1 / 2, z, 1 - xoffs, 1 / 2,\n      uvs[1][0] * progress, v_half, uvs[1][0], uvs[1][1],\n      unit_vec);\n  } else { // slide image\n    sprites.queueraw([tex], 0 - xoffs, 0, z, 1, 1 / 2,\n      uvs[0][0], uvs[0][1], uvs[1][0], v_half,\n      unit_vec);\n    sprites.queueraw([tex], 0 + xoffs, 1 / 2, z, 1, 1 / 2,\n      uvs[0][0], v_half, uvs[1][0], uvs[1][1],\n      unit_vec);\n  }\n  let border_grow_progress = min(progress * 4, 1);\n  border_color[3] = border_grow_progress;\n  border_width *= border_grow_progress;\n  // TODO: Would look better if the horizontal border grew from the middle out, so the overlapping bit is identical\n  // on both sides\n  glov_ui.drawRect(0, 0.5 - border_width, 1 - xoffs, 0.5, z + 1, border_color);\n  glov_ui.drawRect(1 - xoffs - border_width, 0, 1 - xoffs, 0.5, z + 1, border_color);\n  glov_ui.drawRect(xoffs, 0.5, 1, 0.5 + border_width, z + 1, border_color);\n  glov_ui.drawRect(xoffs, 0.5, xoffs + border_width, 1, z + 1, border_color);\n\n  if (force_end || progress === 1) {\n    return REMOVE;\n  }\n  return CONTINUE;\n}\n\nconst render_scale = 1;\nlet transition_pixelate_texture;\n\nfunction transitionPixelateCapture() {\n  if (!transition_pixelate_texture) {\n    transition_pixelate_texture = textures.createForCapture();\n  }\n  glov_engine.captureFramebuffer(transition_pixelate_texture);\n}\n\nfunction glovTransitionPixelateFunc(time, z, tex, ms_since_start, force_end) {\n  //ms_since_start %= time;\n  //let viewport = glov_engine.graphics_device.getViewport();\n  //let gd_width = viewport[2];\n  let gd_width = glov_engine.width;\n  let progress = min(ms_since_start / time, 1);\n  camera2d.setNormalized();\n\n  if (progress > 0.5) {\n    sprites.queuefn(z, transitionPixelateCapture);\n    if (transition_pixelate_texture) {\n      tex = transition_pixelate_texture;\n    }\n  }\n\n  let partial_progress = (progress > 0.5 ? 1 - progress : progress) * 2;\n  // Use power of two scalings, but then scale relative to a 1024px virtual screen, so the biggest\n  //  pixel is about the same percentage of the screen regardless of resolution.\n  let pixel_scale = pow(2, floor(partial_progress * 8.9)) / 1024 * gd_width * render_scale;\n\n  let param0 = vec4(tex.width / pixel_scale, tex.height / pixel_scale,\n    pixel_scale / tex.width, pixel_scale / tex.height);\n  let param1 = vec4(0.5 / tex.width, 0.5 / tex.height,\n    (tex.texSizeX - 1) / tex.width, (tex.texSizeY - 1) / tex.height);\n\n\n  sprites.queueraw([tex], 0, 0, z + 1, 1, 1,\n    0, 1, 1, 0,\n    unit_vec, getShader('transition_pixelate'), {\n      param0,\n      param1,\n    });\n\n  if (force_end || progress === 1) {\n    if (transition_pixelate_texture) {\n      setTimeout(destroyTexture.bind(null, transition_pixelate_texture), 0);\n    }\n    transition_pixelate_texture = null;\n    return REMOVE;\n  }\n  return CONTINUE;\n}\n\nexport function fade(fade_time) {\n  return glovTransitionFadeFunc.bind(null, fade_time);\n}\n\n// export function wipe(wipe_time, wipe_angle) {\n//   return glovTransitionWipeFunc.bind(null, wipe_time, wipe_angle);\n// }\n\n// border_width in camera-relative size\nexport function splitScreen(time, border_width, slide_window) {\n  border_width /= camera2d.w(); // convert to normalized units\n  return glovTransitionSplitScreenFunc.bind(null, time, border_width, slide_window);\n}\n\nexport function pixelate(fade_time) {\n  return glovTransitionPixelateFunc.bind(null, fade_time);\n}\n\n// export function logoZoom(time, logo) {\n//   return glovTransitionLogoZoomFunc.bind(null, time, logo);\n// }\n\nexport function randomTransition(fade_time_scale) {\n  fade_time_scale = fade_time_scale || 1;\n  let idx = floor(random() * 3);\n  switch (idx) {\n    case 0:\n      return fade(500 * fade_time_scale);\n    case 1:\n      return splitScreen(250 * fade_time_scale, 2, false);\n    case 2:\n      return pixelate(750 * fade_time_scale);\n    // case 3:\n    //   return wipe(250 * fade_time_scale, random() * 2 * PI);\n    // case 4:\n    //   if (!logo) {\n    //     GlovTextureLoadOptions options;\n    //     options.clamp_s = options.clamp_t = true;\n    //     logo = GlovTextures::loadtex(\"data/SampleLogoTransition.png\", &options);\n    //   }\n    //   glovTransitionQueue(Z_TRANSITION_FINAL, glovTransitionLogoZoom(500, logo));\n    //   break;\n    default:\n      assert(0);\n  }\n  return null;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-underscore-dangle:off */\n\nwindow.Z = window.Z || {};\nZ.BORDERS = Z.BORDERS || 90;\nZ.UI = Z.UI || 100;\nZ.MODAL = Z.MODAL || 1000;\nZ.TOOLTIP = Z.TOOLTIP || 2000;\nZ.DEBUG = Z.DEBUG || 9800;\n\n// very high, but can still add integers\nZ.TRANSITION_FINAL = Z.TRANSITION_FINAL || 9900;\n// how much Z range can be used for rendering transitions - the capture happens at z + Z_TRANSITION_RANGE\nZ.TRANSITION_RANGE = Z.TRANSITION_RANGE || 10;\n\nZ.FPSMETER = Z.FPSMETER || 10000;\n\nconst assert = require('assert');\nconst camera2d = require('./camera2d.js');\nconst glov_edit_box = require('./edit_box.js');\nconst effects = require('./effects.js');\nconst glov_engine = require('./engine.js');\nconst glov_font = require('./font.js');\nconst glov_input = require('./input.js');\nconst { linkTick } = require('./link.js');\nconst { abs, max, min, round, sqrt } = Math;\nconst { soundLoad, soundPlay } = require('./sound.js');\nconst glov_sprites = require('./sprites.js');\nconst textures = require('./textures.js');\nconst { clamp, clone, lerp, merge } = require('../../common/util.js');\nconst { mat43, m43identity, m43mul } = require('./mat43.js');\nconst { vec2, vec4, v4scale } = require('./vmath.js');\n\nconst MODAL_DARKEN = 0.75;\nlet KEYS;\nlet PAD;\n\nconst menu_fade_params_default = {\n  blur: [0.125, 0.865],\n  saturation: [0.5, 0.1],\n  brightness: [1, 1 - MODAL_DARKEN],\n  fallback_darken: vec4(0, 0, 0, MODAL_DARKEN),\n  z: Z.MODAL,\n};\n\nexport function focuslog(...args) {\n  // console.log(`focuslog(${glov_engine.global_frame_index}): `, ...args);\n}\n\nexport function makeColorSet(color) {\n  let ret = {\n    regular: vec4(),\n    rollover: vec4(),\n    down: vec4(),\n    disabled: vec4(),\n  };\n  v4scale(ret.regular, color, 1);\n  v4scale(ret.rollover, color, 0.8); // because we do not have specific graphics\n  v4scale(ret.down, color, 0.7);\n  v4scale(ret.disabled, color, 0.4);\n  for (let field in ret) {\n    ret[field][3] = color[3];\n  }\n  return ret;\n}\n\nfunction doBlurEffect(factor, params) {\n  factor = lerp(factor, params.blur[0], params.blur[1]);\n  if (factor) {\n    effects.applyGaussianBlur({\n      source: glov_engine.captureFramebuffer(),\n      blur: factor,\n      // min_size: 128,\n    });\n  }\n}\n\nlet desaturate_xform = mat43();\nlet desaturate_tmp = mat43();\nfunction doDesaturateEffect(factor, params) {\n  let saturation = lerp(factor, params.saturation[0], params.saturation[1]);\n  let brightness = lerp(factor, params.brightness[0], params.brightness[1]);\n  if (saturation === 1 && brightness === 1) {\n    return;\n  }\n  m43identity(desaturate_xform);\n\n  effects.saturationMatrix(desaturate_tmp, saturation);\n  m43mul(desaturate_xform, desaturate_xform, desaturate_tmp);\n\n  effects.brightnessScaleMatrix(desaturate_tmp, brightness);\n  m43mul(desaturate_xform, desaturate_xform, desaturate_tmp);\n\n  // if ((hue % (Math.PI * 2)) !== 0) {\n  //   effects.hueMatrix(tmp, hue);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (contrast !== 1) {\n  //   effects.contrastMatrix(tmp, contrast);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (brightness !== 0) {\n  //   effects.brightnessMatrix(tmp, brightness);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (additiveRGB[0] !== 0 || additiveRGB[1] !== 0 || additiveRGB[2] !== 0) {\n  //   effects.additiveMatrix(tmp, additiveRGB);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (grayscale) {\n  //   effects.grayScaleMatrix(tmp);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (negative) {\n  //   effects.negativeMatrix(tmp);\n  //   m43mul(xform, xform, tmp);\n  // }\n  // if (sepia) {\n  //   effects.sepiaMatrix(tmp);\n  //   m43mul(xform, xform, tmp);\n  // }\n  effects.applyColorMatrix({\n    colorMatrix: desaturate_xform,\n    source: glov_engine.captureFramebuffer(),\n  });\n}\n\n// overrideable default parameters\nexport let button_height = 32;\nexport let font_height = 24;\nexport let button_width = 200;\nexport let modal_button_width = 100;\nexport let button_img_size = button_height;\nexport let modal_width = 600;\nexport let modal_y0 = 200;\nexport let modal_title_scale = 1.2;\nexport let modal_pad = 16;\nexport let panel_pixel_scale = 32 / 13; // button_height / button pixel resolution\nexport let tooltip_panel_pixel_scale = panel_pixel_scale;\nexport let tooltip_width = 400;\nexport let tooltip_pad = 8;\n\nexport let font_style_focused = glov_font.style(null, {\n  color: 0x000000ff,\n  outline_width: 2,\n  outline_color: 0xFFFFFFff,\n});\nexport let font_style_normal = glov_font.styleColored(null, 0x000000ff);\n\nexport let font;\nexport let sprites = {};\n\nexport let color_button = makeColorSet([1,1,1,1]);\nexport let color_panel = vec4(1, 1, 0.75, 1);\nexport let modal_font_style = glov_font.styleColored(null, 0x000000ff);\n\nlet sounds = {};\nexport let button_mouseover = false; // for callers to poll the very last button\nexport let button_focused = false; // for callers to poll the very last button\nexport let button_click = null; // on click, for callers to poll which mouse button, etc\nexport let touch_changed_focus = false; // did a touch even this frame change focus?\n// For tracking global mouseover state\nlet last_frame_button_mouseover = false;\nlet frame_button_mouseover = false;\n\nlet modal_dialog = null;\nlet modal_stealing_focus = false;\nexport let menu_up = false; // Boolean to be set by app to impact behavior, similar to a modal\nlet menu_fade_params = merge({}, menu_fade_params_default);\nlet menu_up_time = 0;\n\nexports.this_frame_edit_boxes = [];\nlet last_frame_edit_boxes = [];\nlet dom_elems = [];\nlet dom_elems_issued = 0;\n\n// for modal dialogs\nlet button_keys;\n\nlet focused_last_frame;\nlet focused_this_frame;\nlet focused_key_not;\nlet focused_key;\nlet focused_key_prev1;\nlet focused_key_prev2;\n\nlet pad_focus_left;\nlet pad_focus_right;\n\nexport function loadUISprite(name, ws, hs, overrides, only_override) {\n  let override = overrides && overrides[name];\n  if (override === null) {\n    // skip it, assume not used\n  } else if (override) {\n    sprites[name] = glov_sprites.create({\n      name: override[0],\n      ws: override[1],\n      hs: override[2],\n    });\n  } else if (!only_override) {\n    sprites[name] = glov_sprites.create({\n      name: `ui/${name}`,\n      ws,\n      hs,\n    });\n  }\n}\n\nexport function startup(param) {\n  font = param.font;\n  let overrides = param.ui_sprites;\n  KEYS = glov_input.KEYS;\n  PAD = glov_input.PAD;\n  if (param.pad_focus_dpad) {\n    pad_focus_left = PAD.LEFT;\n    pad_focus_right = PAD.RIGHT;\n  } else {\n    pad_focus_left = PAD.LEFT_BUMPER;\n    pad_focus_right = PAD.RIGHT_BUMPER;\n  }\n\n  loadUISprite('button', [4, 5, 4], [13], overrides);\n  sprites.button_regular = sprites.button;\n  loadUISprite('button_rollover', [4, 5, 4], [13], overrides, true);\n  loadUISprite('button_down', [4, 5, 4], [13], overrides);\n  loadUISprite('button_disabled', [4, 5, 4], [13], overrides);\n  loadUISprite('panel', [3, 2, 3], [3, 10, 3], overrides);\n  loadUISprite('menu_entry', [4, 5, 4], [13], overrides);\n  loadUISprite('menu_selected', [4, 5, 4], [13], overrides);\n  loadUISprite('menu_down', [4, 5, 4], [13], overrides);\n  loadUISprite('menu_header', [4, 5, 12], [13], overrides);\n  loadUISprite('slider', [6, 2, 6], [13], overrides);\n  // loadUISprite('slider_notch', [3], [13], overrides);\n  loadUISprite('slider_handle', [9], [13], overrides);\n\n  sprites.white = glov_sprites.create({ url: 'white' });\n\n  button_keys = {\n    ok: { key: [KEYS.O], pad: [PAD.X], low_key: [KEYS.ESC] },\n    cancel: { key: [KEYS.ESC], pad: [PAD.B, PAD.Y] },\n  };\n  button_keys.yes = clone(button_keys.ok);\n  button_keys.yes.key.push(KEYS.Y);\n  button_keys.no = clone(button_keys.cancel);\n  button_keys.no.key.push(KEYS.N);\n}\n\nlet dynamic_text_elem;\nlet per_frame_dom_alloc = [0,0,0,0,0,0,0];\nexport function getElem(allow_modal, last_elem) {\n  if (modal_dialog && !allow_modal) {\n    return null;\n  }\n  if (dom_elems_issued >= dom_elems.length || !last_elem) {\n    let elem = document.createElement('div');\n    if (glov_engine.DEBUG && !glov_engine.resizing()) {\n      per_frame_dom_alloc[glov_engine.global_frame_index % per_frame_dom_alloc.length] = 1;\n      let sum = 0;\n      for (let ii = 0; ii < per_frame_dom_alloc.length; ++ii) {\n        sum += per_frame_dom_alloc[ii];\n      }\n      assert(sum < per_frame_dom_alloc.length);\n    }\n    elem.setAttribute('class', 'glovui_dynamic');\n    if (!dynamic_text_elem) {\n      dynamic_text_elem = document.getElementById('dynamic_text');\n    }\n    dynamic_text_elem.appendChild(elem);\n    dom_elems.push(elem);\n    last_elem = elem;\n  }\n  if (dom_elems[dom_elems_issued] !== last_elem) {\n    for (let ii = dom_elems_issued + 1; ii < dom_elems.length; ++ii) {\n      if (dom_elems[ii] === last_elem) {\n        dom_elems[ii] = dom_elems[dom_elems_issued];\n        dom_elems[dom_elems_issued] = last_elem;\n      }\n    }\n  }\n  let elem = dom_elems[dom_elems_issued];\n  dom_elems_issued++;\n  return elem;\n}\n\nexport function bindSounds(_sounds) {\n  sounds = _sounds;\n  for (let key in sounds) {\n    soundLoad(sounds[key]);\n  }\n}\n\nexport function drawHBox(coords, s, color) {\n  let uidata = s.uidata;\n  let ws = [uidata.wh[0] * coords.h, 0, uidata.wh[2] * coords.h];\n  let x = coords.x;\n  ws[1] = max(0, coords.w - ws[0] - ws[2]);\n  for (let ii = 0; ii < ws.length; ++ii) {\n    let my_w = ws[ii];\n    s.draw({\n      x,\n      y: coords.y,\n      z: coords.z,\n      color,\n      w: my_w,\n      h: coords.h,\n      uvs: uidata.rects[ii],\n      // nozoom: true, // nozoom since different parts of the box get zoomed differently\n    });\n    x += my_w;\n  }\n}\n\nexport function drawVBox(coords, s, color) {\n  let uidata = s.uidata;\n  let hs = [uidata.hw[0] * coords.w, 0, uidata.hw[2] * coords.w];\n  let y = coords.y;\n  hs[1] = max(0, coords.h - hs[0] - hs[2]);\n  for (let ii = 0; ii < hs.length; ++ii) {\n    let my_h = hs[ii];\n    s.draw({\n      x: coords.x,\n      y,\n      z: coords.z,\n      color,\n      w: coords.w,\n      h: my_h,\n      uvs: uidata.rects[ii],\n      // nozoom: true, // nozoom since different parts of the box get zoomed differently\n    });\n    y += my_h;\n  }\n}\n\nexport function drawBox(coords, s, pixel_scale, color) {\n  let uidata = s.uidata;\n  let scale = pixel_scale;\n  let ws = [uidata.widths[0] * scale, 0, uidata.widths[2] * scale];\n  ws[1] = max(0, coords.w - ws[0] - ws[2]);\n  let hs = [uidata.heights[0] * scale, 0, uidata.heights[2] * scale];\n  hs[1] = max(0, coords.h - hs[0] - hs[2]);\n  let x = coords.x;\n  for (let ii = 0; ii < ws.length; ++ii) {\n    let my_w = ws[ii];\n    if (my_w) {\n      let y = coords.y;\n      for (let jj = 0; jj < hs.length; ++jj) {\n        let my_h = hs[jj];\n        if (my_h) {\n          s.draw({\n            x, y, z: coords.z,\n            color,\n            w: my_w,\n            h: my_h,\n            uvs: uidata.rects[jj * 3 + ii],\n            nozoom: true, // nozoom since different parts of the box get zoomed differently\n          });\n          y += my_h;\n        }\n      }\n      x += my_w;\n    }\n  }\n}\n\nexport function playUISound(name, volume) {\n  if (name === 'select') {\n    name = 'button_click';\n  }\n  if (sounds[name]) {\n    soundPlay(sounds[name], volume);\n  }\n}\n\nexport function setMouseOver(key, quiet) {\n  if (last_frame_button_mouseover !== key && frame_button_mouseover !== key && !quiet) {\n    playUISound('rollover');\n  }\n  frame_button_mouseover = key;\n  button_mouseover = true;\n}\n\nexport function focusSteal(key) {\n  if (key !== focused_key) {\n    focuslog('focusSteal ', key);\n  }\n  focused_this_frame = true;\n  focused_key = key;\n}\n\nexport function focusCanvas() {\n  focusSteal('canvas');\n}\n\nexport function isFocusedPeek(key) {\n  return focused_key === key;\n}\nexport function isFocused(key) {\n  if (key !== focused_key_prev2) {\n    focused_key_prev1 = focused_key_prev2;\n    focused_key_prev2 = key;\n  }\n  if (key === focused_key || key !== focused_key_not && !focused_this_frame &&\n    !focused_last_frame\n  ) {\n    if (key !== focused_key) {\n      focuslog('isFocused->focusSteal');\n    }\n    focusSteal(key);\n    return true;\n  }\n  return false;\n}\n\nexport function focusNext(key) {\n  focuslog('focusNext ', key);\n  playUISound('rollover');\n  focused_key = null;\n  focused_last_frame = focused_this_frame = false;\n  focused_key_not = key;\n  // Eat input events so a pair of keys (e.g. SDLK_DOWN and SDLK_CONTROLLER_DOWN)\n  // don't get consumed by two separate widgets\n  glov_input.eatAllInput();\n}\n\nexport function focusPrev(key) {\n  focuslog('focusPrev ', key);\n  playUISound('rollover');\n  if (key === focused_key_prev2) {\n    focusSteal(focused_key_prev1);\n  } else {\n    focusSteal(focused_key_prev2);\n  }\n  glov_input.eatAllInput();\n}\n\nexport function focusCheck(key) {\n  if (modal_stealing_focus) {\n    // hidden by modal, etc\n    return false;\n  }\n  // Returns true even if focusing previous element, since for this frame, we are still effectively focused!\n  let focused = isFocused(key);\n  if (focused) {\n    if (glov_input.keyDownEdge(KEYS.TAB)) {\n      if (glov_input.keyDown(KEYS.SHIFT)) {\n        focusPrev(key);\n      } else {\n        focusNext(key);\n        focused = false;\n      }\n    }\n    if (glov_input.padButtonDownEdge(pad_focus_right)) {\n      focusNext(key);\n      focused = false;\n    }\n    if (glov_input.padButtonDownEdge(pad_focus_left)) {\n      focusPrev(key);\n    }\n  }\n  return focused;\n}\n\nexport function panel(param) {\n  assert(typeof param.x === 'number');\n  assert(typeof param.y === 'number');\n  assert(typeof param.w === 'number');\n  assert(typeof param.h === 'number');\n  param.z = param.z || (Z.UI - 1);\n  let color = param.color || color_panel;\n  drawBox(param, sprites.panel, param.pixel_scale || panel_pixel_scale, color);\n  glov_input.click(param);\n  glov_input.mouseOver(param);\n}\n\nexport function drawTooltip(param) {\n  assert(typeof param.x === 'number');\n  assert(typeof param.y === 'number');\n  assert(typeof param.tooltip === 'string');\n\n  let tooltip_w = param.tooltip_width || tooltip_width;\n  let x = param.x;\n  if (x + tooltip_w > camera2d.x1()) {\n    x = camera2d.x1() - tooltip_w;\n  }\n  let z = param.z || Z.TOOLTIP;\n  let tooltip_y0 = param.y;\n  let eff_tooltip_pad = param.tooltip_pad || tooltip_pad;\n  let w = tooltip_w - eff_tooltip_pad * 2;\n  if (param.tooltip_above) {\n    tooltip_y0 -= font_height * font.numLines(modal_font_style, w, 0, font_height, param.tooltip) + eff_tooltip_pad * 2;\n  }\n  let y = tooltip_y0 + eff_tooltip_pad;\n  y += font.drawSizedWrapped(modal_font_style,\n    x + eff_tooltip_pad, y, z+1, w, 0, font_height,\n    param.tooltip);\n  y += eff_tooltip_pad;\n  let pixel_scale = param.pixel_scale || tooltip_panel_pixel_scale;\n\n  panel({\n    x,\n    y: tooltip_y0,\n    z,\n    w: tooltip_w,\n    h: y - tooltip_y0,\n    pixel_scale,\n  });\n}\n\n// eslint-disable-next-line complexity\nexport function buttonShared(param) {\n  let state = 'regular';\n  let ret = false;\n  if (param.draw_only) {\n    return { ret, state };\n  }\n  let key = param.key || `${param.x}_${param.y}`;\n  let rollover_quiet = param.rollover_quiet;\n  let focused = !param.disabled && !param.no_focus && focusCheck(key);\n  let key_opts = param.in_event_cb ? { in_event_cb: param.in_event_cb } : null;\n  button_mouseover = false;\n  if (param.disabled) {\n    glov_input.mouseOver(param); // Still eat mouse events\n    state = 'disabled';\n  } else if (param.drag_target && (ret = glov_input.dragDrop(param))) {\n    console.log('dragDrop');\n    if (!param.no_touch_mouseover || !glov_input.mousePosIsTouch()) {\n      setMouseOver(key, rollover_quiet);\n    }\n    if (!param.no_focus) {\n      focusSteal(key);\n      focused = true;\n    }\n  } else if ((button_click = glov_input.click(param)) ||\n    param.long_press && (button_click = glov_input.longPress(param))\n  ) {\n    if (!param.no_touch_mouseover || !glov_input.mousePosIsTouch()) {\n      setMouseOver(key, rollover_quiet);\n    }\n    if (param.touch_twice && glov_input.mousePosIsTouch() && !focused) {\n      // Just focus, show tooltip\n      touch_changed_focus = true;\n    } else {\n      ret = true;\n    }\n    if (!param.no_focus) {\n      focusSteal(key);\n      focused = true;\n    }\n  } else if (param.drag_target && glov_input.dragOver(param)) {\n    // Set this even if param.no_touch_mouse_over is set\n    setMouseOver(key, rollover_quiet);\n    state = glov_input.mouseDown() ? 'down' : 'rollover';\n  } else if (param.drag_over && glov_input.dragOver(param)) {\n    // do nothing\n  } else if (glov_input.mouseOver(param)) {\n    if (param.no_touch_mouseover && glov_input.mousePosIsTouch()) {\n      // do not set mouseover\n    } else if (param.touch_twice && !focused && glov_input.mousePosIsTouch()) {\n      // do not set mouseover\n    } else {\n      setMouseOver(key, rollover_quiet);\n      state = glov_input.mouseDown() ? 'down' : 'rollover';\n    }\n  }\n  button_focused = focused;\n  if (focused) {\n    if (glov_input.keyDownEdge(KEYS.SPACE, key_opts) || glov_input.keyDownEdge(KEYS.RETURN, key_opts) ||\n      glov_input.padButtonDownEdge(PAD.A)\n    ) {\n      ret = true;\n    }\n  }\n  if (ret) {\n    state = 'down';\n    playUISound('button_click');\n  }\n  if (button_mouseover && param.tooltip) {\n    drawTooltip({\n      x: param.x,\n      y: param.tooltip_above ? param.y - 2 : param.y + param.h + 2,\n      tooltip_above: param.tooltip_above,\n      tooltip: param.tooltip,\n      tooltip_width: param.tooltip_width,\n    });\n  }\n  param.z += param.z_bias && param.z_bias[state] || 0;\n  return { ret, state, focused };\n}\n\nexport let button_last_color;\nexport function buttonTextDraw(param, state, focused) {\n  let colors = param.colors || color_button;\n  let color = button_last_color = colors[state];\n  let base_name = param.base_name || 'button';\n  let sprite_name = `${base_name}_${state}`;\n  let sprite = sprites[sprite_name];\n  // Note: was if (sprite) color = colors.regular for specific-sprite matches\n  if (!sprite) {\n    sprite = sprites[base_name];\n  }\n\n  drawHBox(param, sprite, color);\n  let hpad = min(param.font_height * 0.25, param.w * 0.1);\n  font.drawSizedAligned(\n    focused ? font_style_focused : font_style_normal,\n    param.x + hpad, param.y, param.z + 0.1,\n    // eslint-disable-next-line no-bitwise\n    param.font_height, glov_font.ALIGN.HCENTERFIT | glov_font.ALIGN.VCENTER, param.w - hpad * 2, param.h, param.text);\n}\n\nexport function buttonText(param) {\n  // required params\n  assert(typeof param.x === 'number');\n  assert(typeof param.y === 'number');\n  assert(typeof param.text === 'string');\n  // optional params\n  param.z = param.z || Z.UI;\n  param.w = param.w || button_width;\n  param.h = param.h || button_height;\n  param.font_height = param.font_height || font_height;\n\n  let { ret, state, focused } = buttonShared(param);\n  buttonTextDraw(param, state, focused);\n  return ret;\n}\n\nexport function buttonImage(param) {\n  // required params\n  assert(typeof param.x === 'number');\n  assert(typeof param.y === 'number');\n  assert(param.img && param.img.draw); // should be a sprite\n  // optional params\n  param.z = param.z || Z.UI;\n  param.w = param.w || button_img_size;\n  param.h = param.h || param.w || button_img_size;\n  param.shrink = param.shrink || 0.75;\n  //param.img_rect; null -> full image\n  let uvs = param.img_rect;\n  if (typeof param.frame === 'number') {\n    uvs = param.img.uidata.rects[param.frame];\n  }\n\n  let { ret, state } = buttonShared(param);\n  let colors = param.colors || color_button;\n  let color = button_last_color = colors[state];\n  if (!param.no_bg) {\n    let base_name = param.base_name || 'button';\n    let sprite_name = `${base_name}_${state}`;\n    let sprite = sprites[sprite_name];\n    if (!sprite) {\n      sprite = sprites[base_name];\n    }\n\n    drawHBox(param, sprite, color);\n  }\n  let img_origin = param.img.origin;\n  let img_w = param.img.size[0];\n  let img_h = param.img.size[1];\n  let aspect = img_w / img_h;\n  if (typeof param.frame === 'number') {\n    aspect = param.img.uidata.aspect ? param.img.uidata.aspect[param.frame] : 1;\n  }\n  let largest_w_horiz = param.w * param.shrink;\n  let largest_w_vert = param.h * param.shrink * aspect;\n  img_w = min(largest_w_horiz, largest_w_vert);\n  img_h = img_w / aspect;\n  let pad_top = (param.h - img_h) / 2;\n  let draw_param = {\n    x: param.x + (param.left_align ? pad_top : (param.w - img_w) / 2) + img_origin[0] * img_w,\n    y: param.y + pad_top + img_origin[1] * img_h,\n    z: param.z + 0.1,\n    color: param.color1 && param.color ? param.color : color, // use explicit tint if doing dual-tinting\n    color1: param.color1,\n    w: img_w / param.img.size[0],\n    h: img_h / param.img.size[1],\n    uvs,\n    rot: param.rotation,\n  };\n  if (param.flip) {\n    let { x, w } = draw_param;\n    draw_param.x = x + w;\n    draw_param.w = -w;\n  }\n  if (param.color1) {\n    param.img.drawDualTint(draw_param);\n  } else {\n    param.img.draw(draw_param);\n  }\n  return ret;\n}\n\nexport function print(style, x, y, z, text) {\n  return font.drawSized(style, x, y, z, font_height, text);\n}\n\n// Note: modal dialogs not really compatible with HTML overlay on top of the canvas!\nexport function modalDialog(param) {\n  assert(!param.title || typeof param.title === 'string');\n  assert(!param.text || typeof param.text === 'string');\n  assert(!param.buttons || typeof param.buttons === 'object');\n  // assert(Object.keys(param.buttons).length);\n\n  modal_dialog = param;\n}\n\nexport function modalDialogClear() {\n  modal_dialog = null;\n}\n\nlet dom_requirement = vec2(24,24);\nlet virtual_size = vec2();\nfunction modalDialogRun() {\n  camera2d.domDeltaToVirtual(virtual_size, dom_requirement);\n  let fullscreen_mode = false;\n  let eff_font_height = modal_dialog.font_height || font_height;\n  let eff_button_height = button_height;\n  let pad = modal_pad;\n  let vpad = modal_pad * 0.5;\n  let general_scale = 1;\n  if (virtual_size[0] > 0.1 * camera2d.h() && camera2d.w() > camera2d.h() * 2) {\n    // If a 24-pt font is more than 10% of the camera height, we're probably super-wide-screen\n    // on a mobile device due to keyboard being visible\n    fullscreen_mode = true;\n    eff_button_height = eff_font_height;\n    vpad = pad = 4;\n\n    let old_h = camera2d.h();\n    camera2d.push();\n    camera2d.setAspectFixed2(1, eff_font_height * (modal_title_scale + 2) + pad * 4.5);\n    general_scale = camera2d.h() / old_h;\n  }\n\n  let { buttons, click_anywhere } = modal_dialog;\n  let keys = Object.keys(buttons || {});\n\n  const game_width = camera2d.x1() - camera2d.x0();\n  const eff_modal_width = fullscreen_mode ? game_width : (modal_dialog.width || modal_width);\n  let eff_button_width = modal_dialog.button_width || modal_button_width;\n  let max_total_button_width = eff_modal_width * 2 / 3;\n  eff_button_width = min(eff_button_width, max_total_button_width / keys.length);\n  const text_w = eff_modal_width - pad * 2;\n  const x0 = camera2d.x0() + round((game_width - eff_modal_width) / 2);\n  let x = x0 + pad;\n  const y0 = fullscreen_mode ? 0 : (modal_dialog.y0 || modal_y0);\n  let y = y0 + pad;\n\n  if (glov_input.pointerLocked()) {\n    glov_input.pointerLockExit();\n  }\n\n  if (modal_dialog.title) {\n    if (fullscreen_mode) {\n      font.drawSizedAligned(modal_font_style, x, y, Z.MODAL, eff_font_height * modal_title_scale,\n        glov_font.ALIGN.HFIT, text_w, 0, modal_dialog.title);\n      y += eff_font_height * modal_title_scale;\n    } else {\n      y += font.drawSizedWrapped(modal_font_style,\n        x, y, Z.MODAL, text_w, 0, eff_font_height * modal_title_scale,\n        modal_dialog.title);\n    }\n    y += round(vpad * 1.5);\n  }\n\n  if (modal_dialog.text) {\n    if (fullscreen_mode) {\n      font.drawSizedAligned(modal_font_style, x, y, Z.MODAL, eff_font_height,\n        glov_font.ALIGN.HFIT, text_w, 0, modal_dialog.text);\n      y += eff_font_height;\n    } else {\n      y += font.drawSizedWrapped(modal_font_style, x, y, Z.MODAL, text_w, 0, eff_font_height,\n        modal_dialog.text);\n    }\n    y += vpad;\n  }\n\n  let tick_key;\n  if (modal_dialog.tick) {\n    let avail_width = eff_modal_width - pad * 2;\n    if (fullscreen_mode) {\n      avail_width -= (pad + eff_button_width) * keys.length;\n    }\n    let param = {\n      x, y,\n      modal_width: eff_modal_width,\n      avail_width,\n      font_height: eff_font_height,\n      fullscreen_mode,\n    };\n    tick_key = modal_dialog.tick(param);\n    y = param.y;\n  }\n\n  x = x0 + eff_modal_width - (pad + eff_button_width) * keys.length;\n  let did_button = -1;\n  for (let ii = 0; ii < keys.length; ++ii) {\n    let key = keys[ii];\n    let eff_button_keys = button_keys[key.toLowerCase()];\n    let pressed = 0;\n    if (eff_button_keys) {\n      for (let jj = 0; jj < eff_button_keys.key.length; ++jj) {\n        pressed += glov_input.keyDownEdge(eff_button_keys.key[jj]);\n        if (eff_button_keys.key[jj] === tick_key) {\n          pressed++;\n        }\n      }\n      for (let jj = 0; jj < eff_button_keys.pad.length; ++jj) {\n        pressed += glov_input.padButtonDownEdge(eff_button_keys.pad[jj]);\n      }\n    }\n    if (click_anywhere && ii === 0 && glov_input.click()) {\n      ++pressed;\n    }\n    if (pressed) {\n      did_button = ii;\n    }\n    if (buttonText({\n      x: x,\n      y,\n      z: Z.MODAL,\n      w: eff_button_width,\n      h: eff_button_height,\n      text: key\n    })) {\n      did_button = ii;\n    }\n    x += pad + eff_button_width;\n  }\n  // Also check low-priority keys\n  if (did_button === -1) {\n    for (let ii = 0; ii < keys.length; ++ii) {\n      let key = keys[ii];\n      let eff_button_keys = button_keys[key.toLowerCase()];\n      if (eff_button_keys && eff_button_keys.low_key) {\n        for (let jj = 0; jj < eff_button_keys.low_key.length; ++jj) {\n          if (glov_input.keyDownEdge(eff_button_keys.low_key[jj]) || eff_button_keys.low_key[jj] === tick_key) {\n            did_button = ii;\n          }\n        }\n      }\n    }\n  }\n  if (did_button !== -1) {\n    let key = keys[did_button];\n    playUISound('button_click');\n    modal_dialog = null;\n    if (buttons[key]) {\n      buttons[key]();\n    }\n  }\n  y += eff_button_height;\n  y += vpad + pad;\n  panel({\n    x: x0,\n    y: y0,\n    z: Z.MODAL - 1,\n    w: eff_modal_width,\n    h: (fullscreen_mode ? camera2d.y1() : y) - y0,\n    pixel_scale: panel_pixel_scale * general_scale,\n  });\n\n  glov_input.eatAllInput();\n  modal_stealing_focus = true;\n  if (fullscreen_mode) {\n    camera2d.pop();\n  }\n}\n\nexport function modalTextEntry(param) {\n  let eb = glov_edit_box.create({\n    allow_modal: true,\n    initial_focus: true,\n    spellcheck: false,\n    initial_select: true,\n    text: param.edit_text,\n    max_len: param.max_len,\n    esc_clears: false,\n  });\n  let buttons = {};\n  for (let key in param.buttons) {\n    let val = param.buttons[key];\n    if (typeof val === 'function') {\n      val = (function (old_fn) {\n        return function () {\n          old_fn(eb.getText());\n        };\n      }(val));\n    }\n    buttons[key] = val;\n  }\n  param.buttons = buttons;\n  param.text = `${param.text || ''}`;\n  let old_tick = param.tick;\n  param.tick = function (params) {\n    let eb_ret = eb.run({\n      x: params.x,\n      y: params.y,\n      w: params.avail_width || param.edit_w,\n      font_height: params.font_height,\n    });\n    if (!params.fullscreen_mode) {\n      params.y += params.font_height + modal_pad;\n    }\n    let ret;\n    if (eb_ret === eb.SUBMIT) {\n      ret = KEYS.O; // Do OK, Yes\n    } else if (eb_ret === eb.CANCEL) {\n      ret = KEYS.ESC; // Do Cancel, No\n    }\n    if (old_tick) {\n      ret = old_tick(params) || ret;\n    }\n    return ret;\n  };\n  modalDialog(param);\n}\n\n\nexport function createEditBox(param) {\n  return glov_edit_box.create(param);\n}\n\nconst color_slider_handle = vec4(1,1,1,1);\nconst color_slider_handle_grab = vec4(0.5,0.5,0.5,1);\nconst color_slider_handle_over = vec4(0.75,0.75,0.75,1);\nexport let slider_dragging = false; // for caller polling\n// Returns new value\nexport function slider(value, param) {\n  // required params\n  assert(typeof param.x === 'number');\n  assert(typeof param.y === 'number');\n  assert(param.min < param.max); // also must be numbers\n  // optional params\n  param.z = param.z || Z.UI;\n  param.w = param.w || button_width;\n  param.h = param.h || button_height;\n  let disabled = param.disabled || false;\n\n  slider_dragging = false;\n\n  drawHBox(param, sprites.slider, param.color);\n\n  let xoffs = round(sprites.slider.uidata.wh[0] * param.h / 2);\n  let draggable_width = param.w - xoffs * 2;\n\n  // Draw notches - would also need to quantize the values below\n  // if (!slider->no_notches) {\n  //   float space_for_notches = width - xoffs * 4;\n  //   int num_notches = max - 1;\n  //   float notch_w = tile_scale * glov_ui_slider_notch->GetTileWidth();\n  //   float notch_h = tile_scale * glov_ui_slider_notch->GetTileHeight();\n  //   float max_notches = space_for_notches / (notch_w + 2);\n  //   int notch_inc = 1;\n  //   if (num_notches > max_notches)\n  //     notch_inc = ceil(num_notches / floor(max_notches));\n\n  //   for (int ii = 1; ii*notch_inc <= num_notches; ii++) {\n  //     float notch_x_mid = x + xoffs + draggable_width * ii * notch_inc / (float)max;\n  //     if (notch_x_mid - notch_w/2 < x + xoffs * 2)\n  //       continue;\n  //     if (notch_x_mid + notch_w/2 > x + width - xoffs * 2)\n  //       continue;\n  //     glov_ui_slider_notch->DrawStretchedColor(notch_x_mid - notch_w / 2, y + yoffs,\n  //       z + 0.25, notch_w, notch_h, 0, color);\n  //   }\n  // }\n\n  // Handle\n  let drag = !disabled && glov_input.drag(param);\n  let grabbed = Boolean(drag);\n  let click = glov_input.click(param);\n  if (click) {\n    grabbed = false;\n    // update pos\n    value = (click.pos[0] - (param.x + xoffs)) / draggable_width;\n    value = param.min + (param.max - param.min) * clamp(value, 0, 1);\n    playUISound('button_click');\n  } else if (grabbed) {\n    // update pos\n    value = (drag.cur_pos[0] - (param.x + xoffs)) / draggable_width;\n    value = param.min + (param.max - param.min) * clamp(value, 0, 1);\n    // Eat all mouseovers while dragging\n    glov_input.mouseOver();\n    slider_dragging = true;\n  }\n  let rollover = !disabled && glov_input.mouseOver(param);\n  let handle_center_pos = param.x + xoffs + draggable_width * (value - param.min) / (param.max - param.min);\n  let handle_h = param.h;\n  let handle_w = sprites.slider_handle.uidata.wh[0] * handle_h;\n  let handle_x = handle_center_pos - handle_w / 2;\n  let handle_y = param.y + param.h / 2 - handle_h / 2;\n  let handle_color = color_slider_handle;\n  if (grabbed) {\n    handle_color = color_slider_handle_grab;\n  } else if (rollover) {\n    handle_color = color_slider_handle_over;\n  }\n\n  sprites.slider_handle.draw({\n    x: handle_x,\n    y: handle_y,\n    z: param.z + 0.1,\n    w: handle_w,\n    h: handle_h,\n    color: handle_color,\n    frame: 0,\n  });\n\n  return value;\n}\n\nlet pp_bad_frames = 0;\n\nexport function tickUI(dt) {\n  last_frame_button_mouseover = frame_button_mouseover;\n  frame_button_mouseover = false;\n  focused_last_frame = focused_this_frame;\n  focused_this_frame = false;\n  focused_key_not = null;\n  modal_stealing_focus = false;\n  touch_changed_focus = false;\n  per_frame_dom_alloc[glov_engine.global_frame_index % per_frame_dom_alloc.length] = 0;\n\n  last_frame_edit_boxes = exports.this_frame_edit_boxes;\n  exports.this_frame_edit_boxes = [];\n  linkTick();\n\n  dom_elems_issued = 0;\n\n  let pp_this_frame = false;\n  if (modal_dialog || menu_up) {\n    let params = menu_fade_params;\n    if (!menu_up) {\n      // Modals get defaults\n      params = menu_fade_params_default;\n    }\n    menu_up_time += dt;\n    // Effects during modal dialogs\n    let factor = min(menu_up_time / 500, 1);\n    if (glov_engine.postprocessing && !glov_engine.defines.NOPP) {\n      glov_sprites.queuefn(params.z - 2, doBlurEffect.bind(null, factor, params));\n      glov_sprites.queuefn(params.z - 1, doDesaturateEffect.bind(null, factor, params));\n      pp_this_frame = true;\n    } else {\n      // Or, just darken\n      sprites.white.draw({\n        x: camera2d.x0Real(),\n        y: camera2d.y0Real(),\n        z: params.z - 2,\n        color: params.fallback_darken,\n        w: camera2d.wReal(),\n        h: camera2d.hReal(),\n      });\n    }\n  } else {\n    menu_up_time = 0;\n  }\n  menu_up = false;\n\n  if (!glov_engine.is_loading && glov_engine.getFrameDtActual() > 50 && pp_this_frame) {\n    pp_bad_frames = (pp_bad_frames || 0) + 1;\n    if (pp_bad_frames >= 3) { // 3 in a row, disable superfluous postprocessing\n      glov_engine.postprocessingAllow(false);\n    }\n  } else if (pp_bad_frames) {\n    pp_bad_frames = 0;\n  }\n\n\n  if (modal_dialog) {\n    modalDialogRun();\n  }\n}\n\nexport function endFrame() {\n  if (glov_input.click({\n    x: -Infinity, y: -Infinity,\n    w: Infinity, h: Infinity,\n  })) {\n    focusSteal('canvas');\n  }\n\n  for (let ii = 0; ii < last_frame_edit_boxes.length; ++ii) {\n    let edit_box = last_frame_edit_boxes[ii];\n    let idx = exports.this_frame_edit_boxes.indexOf(edit_box);\n    if (idx === -1) {\n      edit_box.unrun();\n    }\n  }\n\n  while (dom_elems_issued < dom_elems.length) {\n    let elem = dom_elems.pop();\n    dynamic_text_elem.removeChild(elem);\n  }\n}\n\nexport function menuUp(param) {\n  merge(menu_fade_params, menu_fade_params_default);\n  if (param) {\n    merge(menu_fade_params, param);\n  }\n  menu_up = true;\n  modal_stealing_focus = true;\n  glov_input.eatAllInput();\n}\n\nfunction copyTextToClipboard(text) {\n  let textArea = document.createElement('textarea');\n  textArea.style.position = 'fixed';\n  textArea.style.top = 0;\n  textArea.style.left = 0;\n  textArea.style.width = '2em';\n  textArea.style.height = '2em';\n  textArea.style.border = 'none';\n  textArea.style.outline = 'none';\n  textArea.style.boxShadow = 'none';\n  textArea.style.background = 'transparent';\n  textArea.value = text;\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  let ret = false;\n  try {\n    ret = document.execCommand('copy');\n  } catch (err) {\n    // do nothing\n  }\n\n  document.body.removeChild(textArea);\n  return ret;\n}\n\nexport function provideUserString(title, thing, str) {\n  let copy_success = copyTextToClipboard(str);\n  modalTextEntry({\n    edit_w: 400,\n    edit_text: str,\n    title,\n    text: copy_success ? `${thing} copied to clipboard!` : 'Copy to clipboard FAILED, please copy from below\\n',\n    buttons: {\n      OK: null,\n    },\n  });\n}\n\nexport function drawRect(x0, y0, x1, y1, z, color) {\n  let mx = min(x0, x1);\n  let my = min(y0, y1);\n  let Mx = max(x0, x1);\n  let My = max(y0, y1);\n  sprites.white.draw({\n    x: mx,\n    y: my,\n    z,\n    color,\n    w: Mx - mx,\n    h: My - my,\n  });\n}\n\nfunction spreadTechParams(spread) {\n  // spread=0 -> 1\n  // spread=0.5 -> 2\n  // spread=0.75 -> 4\n  // spread=1 -> large enough to AA\n  spread = min(max(spread, 0), 0.99);\n\n  let tech_params = {\n    param0: vec4(0,0,0,0),\n  };\n\n  tech_params.param0[0] = 1 / (1 - spread);\n  tech_params.param0[1] = -0.5 * tech_params.param0[0] + 0.5;\n  return tech_params;\n}\n\nfunction drawCircleInternal(sprite, x, y, z, r, spread, tu1, tv1, tu2, tv2, color) {\n  let x0 = x - r * 2 + r * 4 * tu1;\n  let x1 = x - r * 2 + r * 4 * tu2;\n  let y0 = y - r * 2 + r * 4 * tv1;\n  let y1 = y - r * 2 + r * 4 * tv2;\n  glov_sprites.queueraw(sprite.texs,\n    x0, y0, z, x1 - x0, y1 - y0,\n    tu1, tv1, tu2, tv2,\n    color, glov_font.font_shaders.font_aa, spreadTechParams(spread));\n}\n\nexport function drawCircle(x, y, z, r, spread, color) {\n  if (!sprites.circle) {\n    const CIRCLE_SIZE = 32;\n    let data = new Uint8Array(CIRCLE_SIZE*CIRCLE_SIZE);\n    let midp = (CIRCLE_SIZE - 1) / 2;\n    for (let i = 0; i < CIRCLE_SIZE; i++) {\n      for (let j = 0; j < CIRCLE_SIZE; j++) {\n        let d = sqrt((i - midp)*(i - midp) + (j - midp)*(j - midp)) / midp;\n        let v = clamp(1 - d, 0, 1);\n        data[i + j*CIRCLE_SIZE] = v * 255;\n      }\n    }\n    sprites.circle = glov_sprites.create({\n      url: 'circle',\n      width: CIRCLE_SIZE, height: CIRCLE_SIZE,\n      format: textures.format.R8,\n      data,\n      filter_min: gl.LINEAR,\n      filter_max: gl.LINEAR,\n      wrap_s: gl.CLAMP_TO_EDGE,\n      wrap_t: gl.CLAMP_TO_EDGE,\n      origin: vec2(0.5, 0.5),\n    });\n  }\n  drawCircleInternal(sprites.circle, x, y, z, r, spread, 0, 0, 1, 1, color);\n}\n\nexport function drawHollowCircle(x, y, z, r, spread, color) {\n  if (!sprites.hollow_circle) {\n    const CIRCLE_SIZE = 128;\n    const LINE_W = 2;\n    let data = new Uint8Array(CIRCLE_SIZE*CIRCLE_SIZE);\n    let midp = (CIRCLE_SIZE - 1) / 2;\n    for (let i = 0; i < CIRCLE_SIZE; i++) {\n      for (let j = 0; j < CIRCLE_SIZE; j++) {\n        let d = sqrt((i - midp)*(i - midp) + (j - midp)*(j - midp)) / midp;\n        let v = clamp(1 - d, 0, 1);\n        if (v > 0.5) {\n          v = 1 - v;\n        }\n        v += (LINE_W / CIRCLE_SIZE);\n        data[i + j*CIRCLE_SIZE] = v * 255;\n      }\n    }\n    sprites.hollow_circle = glov_sprites.create({\n      url: 'hollow_circle',\n      width: CIRCLE_SIZE, height: CIRCLE_SIZE,\n      format: textures.format.R8,\n      data,\n      filter_min: gl.LINEAR,\n      filter_max: gl.LINEAR,\n      wrap_s: gl.CLAMP_TO_EDGE,\n      wrap_t: gl.CLAMP_TO_EDGE,\n      origin: vec2(0.5, 0.5),\n    });\n  }\n  drawCircleInternal(sprites.hollow_circle, x, y, z, r, spread, 0, 0, 1, 1, color);\n}\n\nexport function drawLine(x0, y0, x1, y1, z, w, spread, color) {\n  if (!sprites.line) {\n    const LINE_SIZE=32;\n    let data = new Uint8Array(LINE_SIZE*LINE_SIZE);\n    let midp = (LINE_SIZE - 1) / 2;\n    for (let i = 0; i < LINE_SIZE; i++) {\n      for (let j = 0; j < LINE_SIZE; j++) {\n        let d = abs((i - midp) / midp);\n        let v = clamp(1 - d, 0, 1);\n        data[i + j*LINE_SIZE] = v * 255;\n      }\n    }\n    sprites.line = glov_sprites.create({\n      url: 'line',\n      width: LINE_SIZE, height: LINE_SIZE,\n      format: textures.format.R8,\n      data,\n      filter_min: gl.LINEAR,\n      filter_max: gl.LINEAR,\n      wrap_s: gl.CLAMP_TO_EDGE,\n      wrap_t: gl.CLAMP_TO_EDGE,\n      origin: vec2(0.5, 0.5),\n    });\n  }\n\n  let dx = x1 - x0;\n  let dy = y1 - y0;\n  let length = Math.sqrt(dx*dx + dy*dy);\n  dx /= length;\n  dy /= length;\n  let tangx = -dy * w;\n  let tangy = dx * w;\n\n  glov_sprites.queueraw4(sprites.line.texs,\n    x0 + tangx, y0 + tangy,\n    x1 + tangx, y1 + tangy,\n    x1 - tangx, y1 - tangy,\n    x0 - tangx, y0 - tangy,\n    z,\n    0, 0, 1, 1,\n    color, glov_font.font_shaders.font_aa, spreadTechParams(spread));\n}\n\nexport function drawCone(x0, y0, x1, y1, z, w0, w1, spread, color) {\n  if (!sprites.cone) {\n    const CONE_SIZE = 32;\n    let data = new Uint8Array(CONE_SIZE*CONE_SIZE);\n    let midp = (CONE_SIZE - 1) / 2;\n    for (let i = 0; i < CONE_SIZE; i++) {\n      for (let j = 0; j < CONE_SIZE; j++) {\n        let dx = 0;\n        let dy = 0;\n        let d = 0;\n        if (i > midp) {\n          dx = (i - midp) / midp;\n          dy = abs(j - midp) / midp;\n          let dCircle = sqrt(dx*dx + dy*dy);\n          d = dx * dCircle;\n        }\n        let v = clamp(1 - d, 0, 1);\n        data[i + j*CONE_SIZE] = v * 255;\n      }\n    }\n    sprites.cone = glov_sprites.create({\n      url: 'cone',\n      width: CONE_SIZE, height: CONE_SIZE,\n      format: textures.format.R8,\n      data,\n      filter_min: gl.LINEAR,\n      filter_max: gl.LINEAR,\n      wrap_s: gl.CLAMP_TO_EDGE,\n      wrap_t: gl.CLAMP_TO_EDGE,\n      origin: vec2(0.5, 0.5),\n    });\n  }\n  let dx = x1 - x0;\n  let dy = y1 - y0;\n  let length = Math.sqrt(dx*dx + dy*dy);\n  dx /= length;\n  dy /= length;\n  let tangx = -dy;\n  let tangy = dx;\n  glov_sprites.queueraw4(sprites.cone.texs,\n    x0 - tangx*w0, y0 - tangy*w0,\n    x0 + tangx*w0, y0 + tangy*w0,\n    x1 + tangx*w1, y1 + tangy*w1,\n    x1 - tangx*w1, y1 - tangy*w1,\n    z,\n    0, 0, 1, 1,\n    color, glov_font.font_shaders.font_aa, spreadTechParams(spread));\n}\n\nexport function scaleSizes(scale) {\n  button_height = round(32 * scale);\n  font_height = round(24 * scale);\n  button_width = round(200 * scale);\n  button_img_size = button_height;\n  modal_button_width = round(button_width / 2);\n  modal_width = round(600 * scale);\n  modal_y0 = round(200 * scale);\n  modal_title_scale = 1.2;\n  modal_pad = round(16 * scale);\n  tooltip_width = round(400 * scale);\n  tooltip_pad = round(8 * scale);\n  panel_pixel_scale = button_height / 13; // button_height / panel pixel resolution\n  tooltip_panel_pixel_scale = panel_pixel_scale;\n}\n\nexport function setModalSizes(_modal_button_width, width, y0, title_scale, pad) {\n  modal_button_width = _modal_button_width || round(button_width / 2);\n  modal_width = width || 600;\n  modal_y0 = y0 || 200;\n  modal_title_scale = title_scale || 1.2;\n  modal_pad = pad || modal_pad;\n}\n\nexport function setFontHeight(_font_height) {\n  font_height = _font_height;\n}\n\nexport function setTooltipWidth(_tooltip_width, _tooltip_panel_pixel_scale) {\n  tooltip_width = _tooltip_width;\n  tooltip_panel_pixel_scale = _tooltip_panel_pixel_scale;\n  tooltip_pad = modal_pad / 2 * _tooltip_panel_pixel_scale;\n}\n\nscaleSizes(1);\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n/*\n  API usage:\n  engine.defines = urlhash.register({\n    key: 'D',\n    type: SET,\n  });\n  urlhash.register({\n    key: 'pos',\n    // type: TYPE_STRING,\n    change: (newvalue) => {},\n    title: (value) => 'string',\n    def: '1,2',\n    hides: { otherfield: true },\n    push: true, // do a pushState instead of replaceState when this changes\n    hide_values: { foo: true }, // do not add to URL if values is in the provided set\n  });\n  urlhash.set('pos', '3,4');\n  urlhash.get('pos')\n\n  urlhash.route('w/:w')     // use URLs like foo.com/w/1   instead of foo.com/?w=1\n  urlhash.route('w/:w/:wg')  // use URLs like foo.com/w/1/2 instead of foo.com/?w=1&wg=2\n\n  // Called whenever the URL state is pushed, even if to exactly the same URL (e.g. on link click)\n  urlhash.onChange(cb)\n*/\n\nconst assert = require('assert');\nconst { callEach } = require('../../common/util.js');\n\nconst HISTORY_UPDATE_TIME = 1000;\n\nexport let TYPE_SET = 'set';\nexport let TYPE_STRING = 'string';\n\nlet params = {};\n\nlet title_suffix = '';\n\nlet page_base = (document.location.href || '').match(/^[^#?]+/)[0];\nif (!page_base.endsWith('/')) { // e.g. http://foo.bar/index.html\n  page_base += '?';\n}\n//Removes index.html et all\nlet url_base = page_base.replace(/[^/]*$/,'');\nlet on_change = [];\n\nexport function getURLBase() {\n  return url_base;\n}\n\nexport function getURLPageBase() {\n  return page_base;\n}\n\nlet api_path;\n// Path base like http://foo.bar/api/ (with trailing slash\nexport function setAPIPath(path) {\n  api_path = path;\n}\nexport function getAPIPath() {\n  return api_path || `${getURLBase()}api/`;\n}\n\nexport function onChange(cb) {\n  on_change.push(cb);\n}\n\nfunction cmpNumKeys(a, b) {\n  let d = b.keys.length - a.keys.length;\n  if (d) {\n    return d;\n  }\n  // otherwise alphabetical for stability\n  for (let ii = 0; ii < a.keys.length; ++ii) {\n    if (a.keys[ii] < b.keys[ii]) {\n      return -1;\n    } else if (a.keys[ii] > b.keys[ii]) {\n      return 1;\n    }\n  }\n  assert(false); // two routes with identical keys\n  return 0;\n}\n\nconst route_param_regex = /:(\\w+)/g;\nlet routes = [];\n\nfunction queryString() {\n  let href = String(document.location);\n  return href.slice(page_base.length);\n}\n\nconst regex_value = /[^\\w]\\w+=([^&]+)/;\nfunction getValue(query_string, opts) {\n  if (opts.routes) {\n    for (let ii = 0; ii < opts.routes.length; ++ii) {\n      let r = opts.routes[ii];\n      let m = query_string.match(r.regex);\n      if (m) {\n        let idx = r.keys.indexOf(opts.key);\n        return m[1 + idx];\n      }\n    }\n  }\n  let m = query_string.match(opts.regex) || [];\n  if (opts.type === TYPE_SET) {\n    let r = {};\n    for (let ii = 0; ii < m.length; ++ii) {\n      let m2 = m[ii].match(regex_value);\n      assert(m2);\n      r[m2[1]] = 1;\n    }\n    return r;\n  } else {\n    return m[1] || opts.def;\n  }\n}\n\nlet last_history_str = null; // always re-set it on the first update\n\nfunction goInternal(query_string) { // with the '?'\n  // Update all values, except those hidden by what is currently in the query string\n  let hidden = {};\n  for (let key in params) {\n    let opts = params[key];\n    if (opts.hides) {\n      if (getValue(query_string, opts)) {\n        for (let otherkey in opts.hides) {\n          hidden[otherkey] = 1;\n        }\n      }\n    }\n  }\n\n  let dirty = {};\n  for (let key in params) {\n    if (hidden[key]) {\n      continue;\n    }\n    let opts = params[key];\n    let new_value = getValue(query_string, opts);\n    if (opts.type === TYPE_SET) {\n      for (let v in new_value) {\n        if (!opts.value[v]) {\n          opts.value[v] = 1;\n          dirty[key] = true;\n        }\n      }\n      for (let v in opts.value) {\n        if (!new_value[v]) {\n          delete opts.value[v];\n          dirty[key] = true;\n        }\n      }\n    } else {\n      if (new_value !== opts.value) {\n        dirty[key] = true;\n        opts.value = new_value;\n      }\n    }\n  }\n\n  // Call all change callbacks\n  for (let key in dirty) {\n    let opts = params[key];\n    if (opts.change) {\n      opts.change(opts.value);\n    }\n  }\n  callEach(on_change);\n}\n\nlet eff_title;\nfunction toString() {\n  eff_title = '';\n  let values = [];\n  let hidden = {};\n  for (let key in params) {\n    let opts = params[key];\n    if (opts.hides && opts.value) {\n      for (let otherkey in opts.hides) {\n        hidden[otherkey] = 1;\n      }\n    }\n  }\n  let root_value = '';\n  outer: // eslint-disable-line no-labels\n  for (let ii = 0; ii < routes.length; ++ii) {\n    let r = routes[ii];\n    let route_title = '';\n    for (let jj = 0; jj < r.keys.length; ++jj) {\n      let key = r.keys[jj];\n      if (hidden[key]) {\n        continue outer; // eslint-disable-line no-labels\n      }\n      let opts = params[key];\n      if (opts.hide_values[opts.value]) {\n        continue outer; // eslint-disable-line no-labels\n      }\n      // has a value, is not hidden, continue\n      if (!route_title && opts.title) {\n        route_title = opts.title(opts.value);\n      }\n    }\n    // route is good!\n    root_value = r.route_string.replace(route_param_regex, function (ignored, key) {\n      hidden[key] = true;\n      return String(params[key].value);\n    });\n    if (!eff_title && route_title) {\n      eff_title = route_title;\n    }\n    break;\n  }\n  for (let key in params) {\n    if (hidden[key]) {\n      continue;\n    }\n    let opts = params[key];\n    if (opts.type === TYPE_SET) {\n      for (let v in opts.value) {\n        values.push(`${key}=${v}`);\n      }\n    } else {\n      if (!opts.hide_values[opts.value]) {\n        values.push(`${key}=${opts.value}`);\n        if (!eff_title && opts.title) {\n          eff_title = opts.title(opts.value);\n        }\n      }\n    }\n  }\n  if (title_suffix) {\n    if (eff_title) {\n      eff_title = `${eff_title} | ${title_suffix}`;\n    } else {\n      eff_title = title_suffix;\n    }\n  }\n  return `${root_value}${values.length ? '?' : ''}${values.join('&')}`;\n}\n\nexport function refreshTitle() {\n  toString();\n  if (eff_title && eff_title !== document.title) {\n    document.title = eff_title;\n  }\n}\n\nfunction periodicRefreshTitle() {\n  refreshTitle();\n  setTimeout(periodicRefreshTitle, 1000);\n}\n\nfunction onPopState() {\n  let query_string = queryString();\n  last_history_str = query_string;\n  goInternal(query_string);\n  refreshTitle();\n}\n\nlet on_url_change;\nexport function onURLChange(cb) {\n  on_url_change = cb;\n}\n\nlet last_history_set_time = 0;\nlet scheduled = false;\nlet need_push_state = false;\nfunction updateHistory(new_need_push_state) {\n  let new_str = toString();\n  if (last_history_str === new_str) {\n    return;\n  }\n  need_push_state = need_push_state || new_need_push_state;\n  last_history_str = new_str;\n  if (scheduled) {\n    // already queued up\n    return;\n  }\n  let delay = HISTORY_UPDATE_TIME;\n  if (Date.now() - last_history_set_time > HISTORY_UPDATE_TIME) {\n    // Been awhile, apply \"instantly\" (but still wait until next tick to ensure\n    //   any other immediate changes are registered)\n    delay = 1;\n  }\n  scheduled = true;\n  setTimeout(function () {\n    scheduled = false;\n    last_history_set_time = Date.now();\n    let url = `${page_base}${last_history_str}`;\n    if (url.endsWith('?')) {\n      url = url.slice(0, -1);\n    }\n    if (need_push_state) {\n      need_push_state = false;\n      window.history.pushState(undefined, eff_title, url);\n    } else {\n      window.history.replaceState(undefined, eff_title, url);\n    }\n    if (eff_title) {\n      document.title = eff_title;\n    }\n    if (on_url_change) {\n      on_url_change();\n    }\n    //window.history.replaceState(undefined, eff_title, `#${last_history_str}`);\n  }, delay);\n}\n\n// Optional startup\nexport function startup(param) {\n  assert(!title_suffix);\n  title_suffix = param.title_suffix;\n\n  // Refresh the current URL, it might be in the non-route format\n  updateHistory(false);\n\n  if (title_suffix) {\n    refreshTitle();\n    setTimeout(periodicRefreshTitle, 1000);\n  }\n}\n\nexport function route(route_string) {\n  let keys = [];\n  // foo/:key/:bar => foo/([^/&?]+)/([^/&?]+)\n  let base = route_string.replace(route_param_regex, function (ignored, match) {\n    keys.push(match);\n    return '([^/&?]+)';\n  });\n  let regex = new RegExp(`^${base}(?:$|\\\\?)`);\n  let new_route = {\n    route_string,\n    regex,\n    keys,\n  };\n  for (let ii = 0; ii < keys.length; ++ii) {\n    let opts = params[keys[ii]];\n    // Must have already registered these keys\n    assert(opts);\n    opts.routes = opts.routes || [];\n    opts.routes.push(new_route);\n    // Update initial value\n    opts.value = getValue(queryString(), opts);\n  }\n  routes.push(new_route);\n  routes.sort(cmpNumKeys);\n}\n\nexport function register(opts) {\n  assert(opts.key);\n  assert(!params[opts.key]);\n  opts.type = opts.type || TYPE_STRING;\n  let regex_search = `(?:[^\\\\w])${opts.key}=([^&]+)`;\n  let regex_type = '';\n  if (opts.type === TYPE_SET) {\n    regex_type = 'g';\n  } else {\n    opts.def = opts.def || '';\n    opts.hide_values = opts.hide_values || {};\n    opts.hide_values[opts.def] = true;\n  }\n  opts.regex = new RegExp(regex_search, regex_type);\n  params[opts.key] = opts;\n  // Get initial value\n  opts.value = getValue(queryString(), opts);\n  let ret = opts.value;\n  if (opts.type === TYPE_SET && typeof Proxy === 'function') {\n    // Auto-apply changes to URL if someone modifies the proxy\n    ret = new Proxy(opts.value, {\n      set: function (target, prop, value) {\n        if (value) {\n          target[prop] = 1;\n        } else {\n          delete target[prop];\n        }\n        updateHistory();\n        return true;\n      }\n    });\n  }\n\n  if (!window.onpopstate) {\n    window.onpopstate = onPopState;\n  }\n\n  return ret;\n}\n\nexport function set(key, value, value2) {\n  let opts = params[key];\n  assert(opts);\n  if (opts.type === TYPE_SET) {\n    if (Boolean(opts.value[value]) !== Boolean(value2)) {\n      opts.value[value] = value2 ? 1 : 0;\n      updateHistory(opts.push);\n    }\n  } else {\n    if (opts.value !== value) {\n      opts.value = value;\n      updateHistory(opts.push);\n    }\n  }\n}\n\nexport function get(key) {\n  let opts = params[key];\n  assert(opts);\n  return opts.value;\n}\n\nexport function go(query_string) { // with the '?'\n  goInternal(query_string);\n  updateHistory(true);\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-bitwise:off */\n\n// Vector math functions required by the rest of the engine taken piecemeal from\n// gl-matrix and related, as well as some generic math utilities\nexports.mat3 = require('gl-mat3/create');\nexports.mat4 = require('gl-mat4/create');\n\nconst { abs, max, min, floor, round, sqrt } = Math;\n\nexport function vec1(v) {\n  return new Float32Array([v]);\n}\n\nexport function vec2(a, b) {\n  let r = new Float32Array(2);\n  if (a || b) {\n    r[0] = a;\n    r[1] = b;\n  }\n  return r;\n}\n\nexport function vec3(a, b, c) {\n  let r = new Float32Array(3);\n  if (a || b || c) {\n    r[0] = a;\n    r[1] = b;\n    r[2] = c;\n  }\n  return r;\n}\n\nexport function vec4(a, b, c, d) {\n  let r = new Float32Array(4);\n  if (a || b || c || d) {\n    r[0] = a;\n    r[1] = b;\n    r[2] = c;\n    r[3] = d;\n  }\n  return r;\n}\n\nexport const unit_vec = vec4(1,1,1,1);\nexport const half_vec = vec4(0.5,0.5,0.5,0.5);\nexport const zero_vec = vec4();\nexport const identity_mat3 = exports.mat3();\nexport const identity_mat4 = exports.mat4();\nexport const xaxis = vec4(1,0,0,0);\nexport const yaxis = vec4(0,1,0,0);\nexport const zaxis = vec4(0,0,1,0);\n\nexport function v2abs(out, a) {\n  out[0] = abs(a[0]);\n  out[1] = abs(a[1]);\n  return out;\n}\n\nexport function v2add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\nexport function v2addScale(out, a, b, s) {\n  out[0] = a[0] + b[0] * s;\n  out[1] = a[1] + b[1] * s;\n  return out;\n}\n\nexport function v2copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\nexport function v2distSq(a, b) {\n  return (a[0] - b[0]) * (a[0] - b[0]) +\n    (a[1] - b[1]) * (a[1] - b[1]);\n}\n\nexport function v2div(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\nexport function v2floor(out, a) {\n  out[0] = floor(a[0]);\n  out[1] = floor(a[1]);\n  return out;\n}\n\nexport function v2lengthSq(a) {\n  return a[0]*a[0] + a[1]*a[1];\n}\n\nexport function v2lerp(out, t, a, b) {\n  let it = 1 - t;\n  out[0] = it * a[0] + t * b[0];\n  out[1] = it * a[1] + t * b[1];\n  return out;\n}\n\nexport function v2mul(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\nexport function v2normalize(out, a) {\n  let len = a[0]*a[0] + a[1]*a[1];\n  if (len > 0) {\n    len = 1 / sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\nexport function v2same(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\nexport function v2scale(out, a, s) {\n  out[0] = a[0] * s;\n  out[1] = a[1] * s;\n  return out;\n}\n\nexport function v2set(out, a, b) {\n  out[0] = a;\n  out[1] = b;\n  return out;\n}\n\nexport function v2sub(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\nexport function v3add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\nexport function v3iAdd(a, b) {\n  a[0] += b[0];\n  a[1] += b[1];\n  a[2] += b[2];\n  return a;\n}\n\nexport function v3addScale(out, a, b, s) {\n  out[0] = a[0] + b[0] * s;\n  out[1] = a[1] + b[1] * s;\n  out[2] = a[2] + b[2] * s;\n  return out;\n}\n\nexport function v3copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\nexport function v3cross(out, a, b) {\n  let a0 = a[0];\n  let a1 = a[1];\n  let a2 = a[2];\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  out[0] = ((a1 * b2) - (a2 * b1));\n  out[1] = ((a2 * b0) - (a0 * b2));\n  out[2] = ((a0 * b1) - (a1 * b0));\n  return out;\n}\n\n// determinant of the matrix made by (columns?) [a, b, c];\nexport function v3determinant(a, b, c) {\n  // let a00 = a[0];\n  // let a01 = a[1];\n  // let a02 = a[2];\n  // let a10 = b[0];\n  // let a11 = b[1];\n  // let a12 = b[2];\n  // let a20 = c[0];\n  // let a21 = c[2];\n  // let a22 = c[2];\n  let a00 = a[0];\n  let a01 = b[0];\n  let a02 = c[0];\n  let a10 = a[1];\n  let a11 = b[1];\n  let a12 = c[1];\n  let a20 = a[2];\n  let a21 = b[2];\n  let a22 = c[2];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\nexport function v3dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function v3distSq(a, b) {\n  return (a[0] - b[0]) * (a[0] - b[0]) +\n    (a[1] - b[1]) * (a[1] - b[1]) +\n    (a[2] - b[2]) * (a[2] - b[2]);\n}\n\nexport function v3div(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\nexport function v3iFloor(a) {\n  a[0] = floor(a[0]);\n  a[1] = floor(a[1]);\n  a[2] = floor(a[2]);\n  return a;\n}\n\nexport function v3floor(out, a) {\n  out[0] = floor(a[0]);\n  out[1] = floor(a[1]);\n  out[2] = floor(a[2]);\n  return out;\n}\n\nexport function v3lengthSq(a) {\n  return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];\n}\n\nexport function v3lerp(out, t, a, b) {\n  let it = 1 - t;\n  out[0] = it * a[0] + t * b[0];\n  out[1] = it * a[1] + t * b[1];\n  out[2] = it * a[2] + t * b[2];\n  return out;\n}\n\nexport function v3iMax(a, b) {\n  a[0] = max(a[0], b[0]);\n  a[1] = max(a[1], b[1]);\n  a[2] = max(a[2], b[2]);\n  return a;\n}\n\nexport function v3iMin(a, b) {\n  a[0] = min(a[0], b[0]);\n  a[1] = min(a[1], b[1]);\n  a[2] = min(a[2], b[2]);\n  return a;\n}\n\nexport function v3mul(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\nexport function v3mulMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  out[0] = x * m[0] + y * m[4] + z * m[8];\n  out[1] = x * m[1] + y * m[5] + z * m[9];\n  out[2] = x * m[2] + y * m[6] + z * m[10];\n  return out;\n}\n\nexport function v3normalize(out, a) {\n  let len = a[0]*a[0] + a[1]*a[1] + a[2]*a[2];\n  if (len > 0) {\n    len = 1 / sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\nexport function v3iNormalize(a) {\n  let len = a[0]*a[0] + a[1]*a[1] + a[2]*a[2];\n  if (len > 0) {\n    len = 1 / sqrt(len);\n    a[0] *= len;\n    a[1] *= len;\n    a[2] *= len;\n  }\n  return a;\n}\n\n// Treats `a` as vec3 input with w assumed to be 1\n// out[0]/[1] have had perspective divide and converted to normalized 0-1 range\n// out[2] is distance\nexport function v3perspectiveProject(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  let invw = 0.5 / (w || 0.00001);\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) * invw + 0.5;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) * -invw + 0.5;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\n  return out;\n}\n\nexport function v3round(out, a) {\n  out[0] = round(a[0]);\n  out[1] = round(a[1]);\n  out[2] = round(a[2]);\n  return out;\n}\n\nexport function v3same(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\nexport function v3scale(out, a, s) {\n  out[0] = a[0] * s;\n  out[1] = a[1] * s;\n  out[2] = a[2] * s;\n  return out;\n}\n\nexport function v3set(out, a, b, c) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  return out;\n}\n\nexport function v3sub(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\nexport function v3iSub(a, b) {\n  a[0] -= b[0];\n  a[1] -= b[1];\n  a[2] -= b[2];\n  return a;\n}\n\nexport function v3zero(out) {\n  out[0] = out[1] = out[2] = 0;\n  return out;\n}\n\nexport function v4add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\nexport function v4clone(a) {\n  return a.slice(0);\n}\n\nexport function v4copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\nexport function v4lerp(out, t, a, b) {\n  let it = 1 - t;\n  out[0] = it * a[0] + t * b[0];\n  out[1] = it * a[1] + t * b[1];\n  out[2] = it * a[2] + t * b[2];\n  out[3] = it * a[3] + t * b[3];\n  return out;\n}\n\nexport function v4mul(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\nexport function v4mulAdd(out, a, b, c) {\n  out[0] = a[0] * b[0] + c[0];\n  out[1] = a[1] * b[1] + c[1];\n  out[2] = a[2] * b[2] + c[2];\n  out[3] = a[3] * b[3] + c[3];\n  return out;\n}\n\nexport function v4same(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\nexport function v4scale(out, a, s) {\n  out[0] = a[0] * s;\n  out[1] = a[1] * s;\n  out[2] = a[2] * s;\n  out[3] = a[3] * s;\n  return out;\n}\n\nexport function v4set(out, a, b, c, d) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  return out;\n}\n\nexport function v4zero(out) {\n  out[0] = out[1] = out[2] = out[3] = 0;\n  return out;\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst { floor } = Math;\n\nlet offs = 0;\nfunction now() {\n  return Date.now() + offs;\n}\nmodule.exports = exports = now;\nexports.now = now;\nexports.sync = function (server_time) {\n  offs = server_time - Date.now();\n};\nexports.seconds = function () {\n  // Seconds since Jan 1st, 2020\n  return floor(now() / 1000) - 1577836800;\n};\n","const assert = require('assert');\nconst { filewatchOn, filewatchTriggerChange } = require('./filewatch.js');\nconst urlhash = require('./urlhash.js');\n\nlet fs = window.glov_webfs = window.glov_webfs || {};\nlet decoded = {};\nlet used = {};\n// export function webFSReady() {\n//   // TODO: async ready state?\n// }\n\nfunction decode(data) {\n  let len = data[0];\n  let str = data[1];\n  let u8 = new Uint8Array(len);\n  let idxo = 0;\n  let idxi = 0;\n  while (idxo < len) {\n    let byte = str.charCodeAt(idxi++);\n    if (byte === 126) {\n      byte = 0;\n    } else if (byte === 27) {\n      byte = str.charCodeAt(idxi++);\n    }\n    u8[idxo++] = byte;\n  }\n  assert.equal(idxi, str.length);\n  assert.equal(idxo, len);\n  return u8;\n}\n\nexport function webFSGetFile(filename, encoding) {\n  let ret = decoded[filename];\n  if (ret) {\n    return ret;\n  }\n  used[filename] = true;\n  let data = fs[filename];\n  assert(data, `Error loading file: ${filename}`);\n  if (encoding === 'text') {\n    ret = data[1];\n  } else {\n    ret = decode(data);\n  }\n  decoded[filename] = ret;\n  return ret;\n}\n\nexport function webFSExists(filename) {\n  return Boolean(fs[filename]);\n}\n\n// Don't report on files we know are loaded dynamically, and are small\nconst report_ignore_regex = /\\.(fp|vp)$/;\nexport function webFSReportUnused() {\n  let tot_size = 0;\n  for (let filename in fs) {\n    if (!used[filename] && !filename.match(report_ignore_regex)) {\n      console.warn(`WebFS file bundled but unreferenced: ${filename}`);\n      tot_size += fs[filename][0];\n    }\n  }\n  if (tot_size) {\n    console.warn(`WebFS wasting ${tot_size} bytes`);\n  }\n}\n\nfunction webFSReload() {\n  window.glov_webfs = {};\n  let scriptTag = document.createElement('script');\n  scriptTag.src = `${urlhash.getURLBase()}fsdata.js?rl=${Date.now()}`;\n  scriptTag.onload = function () {\n    if (window.glov_webfs) {\n      let old_fs = fs;\n      fs = window.glov_webfs;\n      decoded = {};\n      used = {};\n      for (let key in fs) {\n        let old_value = old_fs[key];\n        let new_value = fs[key];\n        for (let ii = 0; ii < new_value.length; ++ii) {\n          if (!old_value || new_value[ii] !== old_value[ii]) {\n            filewatchTriggerChange(key);\n            break;\n          }\n        }\n      }\n    }\n  };\n  document.getElementsByTagName('head')[0].appendChild(scriptTag);\n}\n\nfilewatchOn('fsdata.js', webFSReload);\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* global WebSocket, XMLHttpRequest */\n\nconst ack = require('../../common/ack.js');\nconst { ackInitReceiver } = ack;\nconst assert = require('assert');\nconst { min } = Math;\nconst urlhash = require('./urlhash.js');\nconst walltime = require('./walltime.js');\nconst wscommon = require('../../common/wscommon.js');\nconst { wsHandleMessage } = wscommon;\n\n// let net_time = 0;\n// export function getNetTime() {\n//   let r = net_time;\n//   net_time = 0;\n//   return r;\n// }\n\nexport function WSClient(path) {\n  this.id = null;\n  this.handlers = {};\n  this.socket = null;\n  this.connected = false;\n  this.disconnected = false;\n  this.retry_scheduled = false;\n  this.retry_count = 0;\n  this.disconnect_time = Date.now();\n  this.last_receive_time = Date.now();\n  this.last_send_time = Date.now();\n  this.auto_path = !path;\n  ackInitReceiver(this);\n\n  if (this.auto_path) {\n\n    path = document.location.toString().match(/^[^#?]+/)[0]; // remove search and anchor\n\n\n    if (path.slice(-1) !== '/') {\n      // /file.html or /path/file.html or /path\n      let idx = path.lastIndexOf('/');\n      if (idx !== -1) {\n        let filename = path.slice(idx+1);\n        if (filename.indexOf('.') !== -1) {\n          path = path.slice(0, idx+1);\n        } else {\n          path += '/';\n        }\n      } else {\n        path += '/';\n      }\n    }\n    path = path.replace(/^http/, 'ws');\n    this.path = `${path}ws`;\n\n  } else {\n    this.path = path;\n  }\n\n  if (path.match(/:\\d+\\//)) {\n    // has port, don't try anything fancy\n    this.path2 = this.path;\n  } else if (path.match(/^ws:/)) {\n    // no port, try wss:// if this fails\n    // Should fix Comcast injection issue\n    this.path2 = this.path.replace(/^ws:/, 'wss:');\n  } else {\n    // Using wss:// some browsers will not allow connecting to ws://, so don't even try\n    this.path2 = this.path;\n  }\n\n  this.connect(false);\n\n  this.onMsg('cack', this.onConnectAck.bind(this));\n  this.onMsg('app_ver', this.onAppVer.bind(this));\n  this.onMsg('error', this.onError.bind(this));\n}\n\nWSClient.prototype.timeSinceDisconnect = function () {\n  return Date.now() - this.disconnect_time;\n};\n\nWSClient.prototype.onAppVer = function (ver) {\n  if (ver !== BUILD_TIMESTAMP) {\n    if (this.on_app_ver_mismatch) {\n      this.on_app_ver_mismatch();\n    } else {\n      if (this.auto_path) {\n        console.error(`App version mismatch (server: ${ver}, client: ${BUILD_TIMESTAMP}), reloading`);\n        if (window.reloadSafe) {\n          window.reloadSafe();\n        } else {\n          document.location.reload();\n        }\n      } else {\n        console.warn(`App version mismatch (server: ${ver}, client: ${BUILD_TIMESTAMP}), ignoring`);\n      }\n    }\n  }\n};\n\nWSClient.prototype.onConnectAck = function (data, resp_func) {\n  let client = this;\n  walltime.sync(data.time);\n  client.connected = true;\n  client.disconnected = false;\n  client.id = data.id;\n  client.secret = data.secret;\n  if (data.app_ver) {\n    client.onAppVer(data.app_ver);\n  }\n  // Fire user-level connect handler as well\n  assert(client.handlers.connect);\n  client.handlers.connect(client, {\n    client_id: client.id,\n  });\n  resp_func();\n};\n\n\nWSClient.prototype.wsPak = function (msg) {\n  return wscommon.wsPak(msg, null, this);\n};\n\nWSClient.prototype.send = function (msg, data, resp_func) {\n  wscommon.sendMessage.call(this, msg, data, resp_func);\n};\n\nWSClient.prototype.onError = function (e) {\n  console.error(e);\n  throw e;\n};\n\n// cb(client, data, resp_func)\nWSClient.prototype.onMsg = function (msg, cb) {\n  assert.ok(!this.handlers[msg]);\n  this.handlers[msg] = function wrappedCallback(client, data, resp_func) {\n    // Client interface does not need a client passed to it!\n    return cb(data, resp_func);\n  };\n};\n\nWSClient.prototype.checkForNewAppVersion = function () {\n  if (this.app_ver_check_in_progress) {\n    return;\n  }\n  this.app_ver_check_in_progress = true;\n  let xhr = new XMLHttpRequest();\n  xhr.open('GET', `${urlhash.getURLBase()}app.ver.json`, true);\n  // xhr.responseType = 'json'; // causes un-catchable, un-reported errors\n  xhr.onload = () => {\n    this.app_ver_check_in_progress = false;\n    let text;\n    try {\n      text = xhr.responseText;\n      let obj = JSON.parse(text);\n      if (obj && obj.ver) {\n        this.onAppVer(obj.ver);\n      }\n    } catch (e) {\n      console.error('Received invalid response when checking app version:', text || '<empty response>');\n      // Probably internal server error or such as the server is restart, try again momentarily\n      // This is not triggered on connection errors, only if we got a (non-parseable) response from the server\n      if (!this.delayed_recheck) {\n        this.delayed_recheck = true;\n        setTimeout(() => {\n          this.delayed_recheck = false;\n          this.checkForNewAppVersion();\n        }, 1000);\n      }\n    }\n  };\n  xhr.onerror = () => {\n    this.app_ver_check_in_progress = false;\n  };\n  xhr.send(null);\n};\n\nWSClient.prototype.retryConnection = function () {\n  let client = this;\n  assert(!client.socket);\n  assert(!client.retry_scheduled);\n  client.retry_scheduled = true;\n  ++client.retry_count;\n  this.checkForNewAppVersion();\n  setTimeout(function () {\n    assert(client.retry_scheduled);\n    assert(!client.socket);\n    client.retry_scheduled = false;\n    client.connect(true);\n  }, min(client.retry_count * client.retry_count * 100, 15000));\n};\n\nWSClient.prototype.connect = function (for_reconnect) {\n  let client = this;\n\n  let path = `${(client.retry_count % 2) ? client.path2 : client.path}?pver=${wscommon.PROTOCOL_VERSION}${\n    for_reconnect && client.id && client.secret ? `&reconnect=${client.id}&secret=${client.secret}` : ''\n  }`;\n  let socket = new WebSocket(path);\n  socket.binaryType = 'arraybuffer';\n  client.socket = socket;\n\n  // Protect callbacks from ever firing if we've already disconnected this socket\n  //   from the WSClient\n  function guard(fn) {\n    return function (...args) {\n      if (client.socket !== socket) {\n        return;\n      }\n      fn(...args);\n    };\n  }\n\n  function abort(skip_close) {\n    client.socket = null;\n    if (client.connected) {\n      client.disconnect_time = Date.now();\n      client.disconnected = true;\n    }\n    client.connected = false;\n    if (!skip_close) {\n      try {\n        socket.close();\n      } catch (e) {\n        // ignore\n      }\n    }\n    ack.failAll(client);\n  }\n\n  function retry(skip_close) {\n    abort(skip_close);\n    client.retryConnection();\n  }\n\n  // Local state, for this one connection\n  let connected = false;\n  client.socket.addEventListener('error', guard(function (err) {\n    if (!connected) {\n      console.log('WebSocket error during initial connection, retrying...', err);\n      retry();\n    } else {\n      console.error('WebSocket error', err);\n      // Disconnect and reconnect here, is this a terminal error? Probably not, we'll get a 'close' event if it is?\n      // We some error occasionally on iOS, not sure what error, but it auto-reconnects fine, so let's\n      // not do a throw\n      // client.onError(err);\n    }\n  }));\n\n  client.socket.addEventListener('message', guard(function (message) {\n    // net_time -= Date.now();\n    assert(message.data instanceof ArrayBuffer);\n    wsHandleMessage(client, new Uint8Array(message.data));\n    // net_time += Date.now();\n  }));\n\n  client.socket.addEventListener('open', guard(function () {\n    console.log('WebSocket open');\n    connected = true;\n    // reset retry count so next retry is fast if we get disconnected\n    client.retry_count = 0;\n  }));\n\n  client.socket.addEventListener('close', guard(function () {\n    console.log('WebSocket close, retrying connection...');\n    retry(true);\n  }));\n\n  let doPing = guard(function () {\n    if (Date.now() - client.last_send_time > wscommon.PING_TIME && client.connected && client.socket.readyState === 1) {\n      client.send('ping');\n    }\n    setTimeout(doPing, wscommon.PING_TIME);\n  });\n  setTimeout(doPing, wscommon.PING_TIME);\n\n  // For debugging reconnect handling\n  // setTimeout(function () {\n  //   if (connected) {\n  //     socket.close();\n  //   }\n  // }, 5000);\n};\n","module.exports={font_size:8,imageW:128,imageH:128,spread:2,noFilter:1,channels:1,char_infos:[{c:32,x0:61,y0:63,xpad:4,w:0,h:0},{c:33,x0:92,y0:2,yoffs:1,xpad:1,w:1,h:5},{c:34,x0:16,y0:63,yoffs:1,xpad:1,w:3,h:2},{c:35,x0:98,y0:2,yoffs:1,xpad:1,w:5,h:5},{c:36,x0:38,y0:2,yoffs:1,xpad:1,w:4,h:6},{c:37,x0:108,y0:2,yoffs:1,xpad:1,w:5,h:5},{c:38,x0:118,y0:2,yoffs:1,xpad:1,w:5,h:5},{c:39,x0:24,y0:63,yoffs:1,xpad:1,w:1,h:2},{c:40,x0:2,y0:14,yoffs:1,xpad:1,w:2,h:5},{c:41,x0:9,y0:14,yoffs:1,xpad:1,w:2,h:5},{c:42,x0:109,y0:54,yoffs:1,xpad:1,w:3,h:3},{c:43,x0:117,y0:54,yoffs:2,xpad:1,w:3,h:3},{c:44,x0:30,y0:63,yoffs:5,xpad:1,w:2,h:2},{c:45,x0:67,y0:63,yoffs:3,xpad:1,w:3,h:1},{c:46,x0:75,y0:63,yoffs:5,xpad:1,w:1,h:1},{c:47,x0:16,y0:14,yoffs:1,xpad:1,w:5,h:5},{c:48,x0:26,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:49,x0:35,y0:14,yoffs:1,xpad:1,w:2,h:5},{c:50,x0:42,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:51,x0:51,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:52,x0:60,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:53,x0:69,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:54,x0:78,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:55,x0:87,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:56,x0:96,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:57,x0:105,y0:14,yoffs:1,xpad:1,w:4,h:5},{c:58,x0:2,y0:63,yoffs:2,xpad:1,w:1,h:3},{c:59,x0:115,y0:44,yoffs:2,xpad:1,w:1,h:4},{c:60,x0:114,y0:14,yoffs:1,xpad:1,w:3,h:5},{c:61,x0:8,y0:63,yoffs:2,xpad:1,w:3,h:3},{c:62,x0:122,y0:14,yoffs:1,xpad:1,w:3,h:5},{c:63,x0:2,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:64,x0:11,y0:24,yoffs:1,xpad:1,w:5,h:5},{c:65,x0:21,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:66,x0:30,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:67,x0:39,y0:24,yoffs:1,xpad:1,w:3,h:5},{c:68,x0:47,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:69,x0:56,y0:24,yoffs:1,xpad:1,w:3,h:5},{c:70,x0:64,y0:24,yoffs:1,xpad:1,w:3,h:5},{c:71,x0:72,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:72,x0:81,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:73,x0:90,y0:24,yoffs:1,xpad:1,w:3,h:5},{c:74,x0:98,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:75,x0:107,y0:24,yoffs:1,xpad:1,w:4,h:5},{c:76,x0:116,y0:24,yoffs:1,xpad:1,w:3,h:5},{c:77,x0:2,y0:34,yoffs:1,xpad:1,w:5,h:5},{c:78,x0:12,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:79,x0:21,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:80,x0:30,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:81,x0:47,y0:2,yoffs:1,xpad:1,w:4,h:6},{c:82,x0:39,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:83,x0:48,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:84,x0:57,y0:34,yoffs:1,xpad:1,w:3,h:5},{c:85,x0:65,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:86,x0:74,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:87,x0:83,y0:34,yoffs:1,xpad:1,w:5,h:5},{c:88,x0:93,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:89,x0:102,y0:34,yoffs:1,xpad:1,w:4,h:5},{c:90,x0:111,y0:34,yoffs:1,xpad:1,w:3,h:5},{c:91,x0:119,y0:34,yoffs:1,xpad:1,w:2,h:5},{c:92,x0:2,y0:44,yoffs:1,xpad:1,w:5,h:5},{c:93,x0:12,y0:44,yoffs:1,xpad:1,w:2,h:5},{c:94,x0:37,y0:63,yoffs:1,xpad:1,w:3,h:2},{c:95,x0:81,y0:63,yoffs:5,xpad:1,w:4,h:1},{c:96,x0:45,y0:63,yoffs:1,xpad:1,w:2,h:2},{c:97,x0:121,y0:44,yoffs:2,xpad:1,w:4,h:4},{c:98,x0:19,y0:44,yoffs:1,xpad:1,w:4,h:5},{c:99,x0:2,y0:54,yoffs:2,xpad:1,w:3,h:4},{c:100,x0:28,y0:44,yoffs:1,xpad:1,w:4,h:5},{c:101,x0:10,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:102,x0:37,y0:44,yoffs:1,xpad:1,w:3,h:5},{c:103,x0:56,y0:2,yoffs:2,xpad:1,w:4,h:6},{c:104,x0:45,y0:44,yoffs:1,xpad:1,w:4,h:5},{c:105,x0:54,y0:44,yoffs:1,xpad:1,w:1,h:5},{c:106,x0:2,y0:2,yoffs:1,xpad:1,w:2,h:7},{c:107,x0:60,y0:44,yoffs:1,xpad:1,w:4,h:5},{c:108,x0:69,y0:44,yoffs:1,xpad:1,w:1,h:5},{c:109,x0:19,y0:54,yoffs:2,xpad:1,w:5,h:4},{c:110,x0:29,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:111,x0:38,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:112,x0:65,y0:2,yoffs:2,xpad:1,w:4,h:6},{c:113,x0:74,y0:2,yoffs:2,xpad:1,w:4,h:6},{c:114,x0:47,y0:54,yoffs:2,xpad:1,w:3,h:4},{c:115,x0:55,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:116,x0:75,y0:44,yoffs:1,xpad:1,w:3,h:5},{c:117,x0:64,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:118,x0:73,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:119,x0:82,y0:54,yoffs:2,xpad:1,w:5,h:4},{c:120,x0:92,y0:54,yoffs:2,xpad:1,w:3,h:4},{c:121,x0:83,y0:2,yoffs:2,xpad:1,w:4,h:6},{c:122,x0:100,y0:54,yoffs:2,xpad:1,w:4,h:4},{c:123,x0:83,y0:44,yoffs:1,xpad:1,w:3,h:5},{c:124,x0:91,y0:44,yoffs:1,xpad:1,w:1,h:5},{c:125,x0:97,y0:44,yoffs:1,xpad:1,w:3,h:5},{c:126,x0:52,y0:63,yoffs:1,xpad:1,w:4,h:2},{c:160,x0:90,y0:63,xpad:3,w:1,h:1},{c:65533,x0:105,y0:44,yoffs:2,xpad:1,w:5,h:5},{c:128263,x0:9,y0:2,yoffs:1,xpad:1,w:10,h:7},{c:128264,x0:24,y0:2,yoffs:1,xpad:1,w:9,h:7}]}","module.exports={font_size:16,imageW:1024,imageH:64,spread:2,noFilter:1,channels:1,char_infos:[{c:32,x0:172,y0:21,xpad:8,w:0,h:0},{c:33,x0:137,y0:2,yoffs:3,xpad:2,w:2,h:10},{c:34,x0:81,y0:21,yoffs:3,xpad:2,w:6,h:4},{c:35,x0:144,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:36,x0:59,y0:2,yoffs:3,xpad:2,w:8,h:12},{c:37,x0:159,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:38,x0:174,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:39,x0:92,y0:21,yoffs:3,xpad:2,w:2,h:4},{c:40,x0:189,y0:2,yoffs:3,xpad:2,w:4,h:10},{c:41,x0:198,y0:2,yoffs:3,xpad:2,w:4,h:10},{c:42,x0:41,y0:21,yoffs:3,xpad:2,w:6,h:6},{c:43,x0:52,y0:21,yoffs:5,xpad:2,w:6,h:6},{c:44,x0:99,y0:21,yoffs:11,xpad:2,w:4,h:4},{c:45,x0:141,y0:21,yoffs:7,xpad:2,w:6,h:2},{c:46,x0:152,y0:21,yoffs:11,xpad:2,w:2,h:2},{c:47,x0:207,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:48,x0:222,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:49,x0:235,y0:2,yoffs:3,xpad:2,w:4,h:10},{c:50,x0:244,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:51,x0:257,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:52,x0:270,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:53,x0:283,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:54,x0:296,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:55,x0:309,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:56,x0:322,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:57,x0:335,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:58,x0:63,y0:21,yoffs:5,xpad:2,w:2,h:6},{c:59,x0:877,y0:2,yoffs:5,xpad:2,w:2,h:8},{c:60,x0:348,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:61,x0:70,y0:21,yoffs:5,xpad:2,w:6,h:6},{c:62,x0:359,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:63,x0:370,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:64,x0:383,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:65,x0:398,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:66,x0:411,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:67,x0:424,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:68,x0:435,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:69,x0:448,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:70,x0:459,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:71,x0:470,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:72,x0:483,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:73,x0:496,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:74,x0:507,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:75,x0:520,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:76,x0:533,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:77,x0:544,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:78,x0:559,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:79,x0:572,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:80,x0:585,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:81,x0:72,y0:2,yoffs:3,xpad:2,w:8,h:12},{c:82,x0:598,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:83,x0:611,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:84,x0:624,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:85,x0:635,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:86,x0:648,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:87,x0:661,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:88,x0:676,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:89,x0:689,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:90,x0:702,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:91,x0:713,y0:2,yoffs:3,xpad:2,w:4,h:10},{c:92,x0:722,y0:2,yoffs:3,xpad:2,w:10,h:10},{c:93,x0:737,y0:2,yoffs:3,xpad:2,w:4,h:10},{c:94,x0:108,y0:21,yoffs:3,xpad:2,w:6,h:4},{c:95,x0:159,y0:21,yoffs:11,xpad:2,w:8,h:2},{c:96,x0:119,y0:21,yoffs:3,xpad:2,w:4,h:4},{c:97,x0:884,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:98,x0:746,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:99,x0:897,y0:2,yoffs:5,xpad:2,w:6,h:8},{c:100,x0:759,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:101,x0:908,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:102,x0:772,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:103,x0:85,y0:2,yoffs:5,xpad:2,w:8,h:12},{c:104,x0:783,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:105,x0:796,y0:2,yoffs:3,xpad:2,w:2,h:10},{c:106,x0:2,y0:2,yoffs:3,xpad:2,w:4,h:14},{c:107,x0:803,y0:2,yoffs:3,xpad:2,w:8,h:10},{c:108,x0:816,y0:2,yoffs:3,xpad:2,w:2,h:10},{c:109,x0:921,y0:2,yoffs:5,xpad:2,w:10,h:8},{c:110,x0:936,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:111,x0:949,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:112,x0:98,y0:2,yoffs:5,xpad:2,w:8,h:12},{c:113,x0:111,y0:2,yoffs:5,xpad:2,w:8,h:12},{c:114,x0:962,y0:2,yoffs:5,xpad:2,w:6,h:8},{c:115,x0:973,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:116,x0:823,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:117,x0:986,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:118,x0:999,y0:2,yoffs:5,xpad:2,w:8,h:8},{c:119,x0:2,y0:21,yoffs:5,xpad:2,w:10,h:8},{c:120,x0:17,y0:21,yoffs:5,xpad:2,w:6,h:8},{c:121,x0:124,y0:2,yoffs:5,xpad:2,w:8,h:12},{c:122,x0:28,y0:21,yoffs:5,xpad:2,w:8,h:8},{c:123,x0:834,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:124,x0:845,y0:2,yoffs:3,xpad:2,w:2,h:10},{c:125,x0:852,y0:2,yoffs:3,xpad:2,w:6,h:10},{c:126,x0:128,y0:21,yoffs:3,xpad:2,w:8,h:4},{c:160,x0:178,y0:21,xpad:7,w:1,h:1},{c:65533,x0:863,y0:2,yoffs:3,xpad:1,w:9,h:10},{c:128263,x0:11,y0:2,yoffs:1,xpad:1,w:19,h:14},{c:128264,x0:35,y0:2,yoffs:1,xpad:1,w:19,h:14}]}","module.exports={font_size:32,imageW:1024,imageH:512,spread:8,channels:1,char_infos:[{c:13,x0:307,y0:381,w:1,h:1},{c:32,x0:325,y0:381,xpad:6.10156,w:1,h:1},{c:33,x0:436,y0:230,yoffs:4,xpad:1.13281,w:6,h:22},{c:34,x0:879,y0:347,yoffs:4,w:10,h:8},{c:35,x0:673,y0:309,yoffs:10,w:16,h:17},{c:36,x0:215,y0:8,yoffs:1,xpad:1.32031,w:15,h:29},{c:37,x0:933,y0:148,yoffs:4,xpad:0.773438,w:26,h:23},{c:38,x0:976,y0:148,yoffs:4,xpad:0.570313,w:20,h:23},{c:39,x0:906,y0:347,yoffs:4,w:5,h:8},{c:40,x0:8,y0:190,yoffs:5,w:8,h:23},{c:41,x0:33,y0:190,yoffs:5,xpad:0.890625,w:7,h:23},{c:42,x0:645,y0:347,yoffs:2,w:11,h:11},{c:43,x0:706,y0:309,yoffs:9,xpad:0.414063,w:15,h:17},{c:44,x0:928,y0:347,yoffs:22,w:5,h:8},{c:45,x0:252,y0:381,yoffs:16,w:9,h:3},{c:46,x0:156,y0:381,yoffs:22,w:5,h:4},{c:47,x0:57,y0:190,yoffs:4,w:13,h:23},{c:48,x0:459,y0:230,yoffs:5,xpad:0.671875,w:17,h:22},{c:49,x0:402,y0:270,yoffs:5,xpad:5.67188,w:12,h:21},{c:50,x0:431,y0:270,yoffs:5,xpad:1.67188,w:16,h:21},{c:51,x0:493,y0:230,yoffs:5,xpad:1.67188,w:16,h:22},{c:52,x0:464,y0:270,yoffs:5,xpad:0.671875,w:17,h:21},{c:53,x0:526,y0:230,yoffs:5,xpad:1.67188,w:16,h:22},{c:54,x0:559,y0:230,yoffs:5,xpad:0.671875,w:17,h:22},{c:55,x0:498,y0:270,yoffs:5,xpad:1.67188,w:16,h:21},{c:56,x0:593,y0:230,yoffs:5,xpad:0.671875,w:17,h:22},{c:57,x0:627,y0:230,yoffs:5,xpad:0.671875,w:17,h:22},{c:58,x0:401,y0:347,yoffs:12,w:5,h:14},{c:59,x0:651,y0:309,yoffs:12,w:5,h:18},{c:60,x0:867,y0:103,yoffs:4,w:12,h:25},{c:61,x0:847,y0:347,yoffs:14,w:15,h:9},{c:62,x0:896,y0:103,yoffs:4,w:12,h:25},{c:63,x0:661,y0:230,yoffs:4,xpad:0.195313,w:12,h:22},{c:64,x0:87,y0:190,yoffs:7,xpad:1.21094,w:23,h:23},{c:65,x0:531,y0:270,yoffs:5,w:19,h:21},{c:66,x0:567,y0:270,yoffs:5,xpad:0.882813,w:18,h:21},{c:67,x0:690,y0:230,yoffs:5,xpad:0.945313,w:17,h:22},{c:68,x0:602,y0:270,yoffs:5,xpad:1.01563,w:20,h:21},{c:69,x0:639,y0:270,yoffs:5,xpad:0.617188,w:16,h:21},{c:70,x0:672,y0:270,yoffs:5,w:15,h:21},{c:71,x0:724,y0:230,yoffs:5,xpad:1.75,w:18,h:22},{c:72,x0:704,y0:270,yoffs:5,xpad:2.53906,w:18,h:21},{c:73,x0:739,y0:270,yoffs:5,xpad:2.54688,w:6,h:21},{c:74,x0:759,y0:230,yoffs:5,xpad:2.75781,w:6,h:22},{c:75,x0:762,y0:270,yoffs:5,w:19,h:21},{c:76,x0:798,y0:270,yoffs:5,w:16,h:21},{c:77,x0:831,y0:270,yoffs:5,xpad:2.27344,w:21,h:21},{c:78,x0:869,y0:270,yoffs:5,xpad:2.74219,w:19,h:21},{c:79,x0:127,y0:190,yoffs:4,xpad:1.22656,w:21,h:23},{c:80,x0:905,y0:270,yoffs:5,xpad:0.828125,w:17,h:21},{c:81,x0:165,y0:190,yoffs:4,xpad:1.22656,w:21,h:23},{c:82,x0:939,y0:270,yoffs:5,w:19,h:21},{c:83,x0:203,y0:190,yoffs:4,xpad:1.32031,w:15,h:23},{c:84,x0:975,y0:270,yoffs:5,w:17,h:21},{c:85,x0:782,y0:230,yoffs:5,xpad:2.04688,w:19,h:22},{c:86,x0:8,y0:309,yoffs:5,w:19,h:21},{c:87,x0:44,y0:309,yoffs:5,w:30,h:21},{c:88,x0:818,y0:230,yoffs:5,w:20,h:22},{c:89,x0:91,y0:309,yoffs:5,w:18,h:21},{c:90,x0:126,y0:309,yoffs:5,xpad:0.226563,w:17,h:21},{c:91,x0:925,y0:103,yoffs:4,w:9,h:25},{c:92,x0:235,y0:190,yoffs:4,w:13,h:23},{c:93,x0:951,y0:103,yoffs:4,xpad:1.70313,w:7,h:25},{c:94,x0:950,y0:347,yoffs:14,xpad:0.1875,w:13,h:8},{c:95,x0:278,y0:381,yoffs:23,xpad:0.4375,w:12,h:3},{c:96,x0:57,y0:381,yoffs:3,w:6,h:6},{c:97,x0:738,y0:309,yoffs:10,xpad:1.29688,w:14,h:17},{c:98,x0:265,y0:190,yoffs:4,xpad:0.890625,w:16,h:23},{c:99,x0:769,y0:309,yoffs:10,xpad:0.273438,w:14,h:17},{c:100,x0:298,y0:190,yoffs:4,xpad:2.07031,w:15,h:23},{c:101,x0:800,y0:309,yoffs:10,xpad:1.04688,w:15,h:17},{c:102,x0:855,y0:230,yoffs:4,w:10,h:22},{c:103,x0:330,y0:190,yoffs:10,xpad:2.07031,w:15,h:23},{c:104,x0:882,y0:230,yoffs:4,xpad:1.10156,w:16,h:22},{c:105,x0:160,y0:309,yoffs:5,xpad:1.34375,w:6,h:21},{c:106,x0:78,y0:57,yoffs:5,xpad:1.07031,w:7,h:28},{c:107,x0:915,y0:230,yoffs:4,xpad:0.171875,w:15,h:22},{c:108,x0:947,y0:230,yoffs:4,xpad:1.46875,w:6,h:22},{c:109,x0:50,y0:347,yoffs:10,xpad:1.14063,w:25,h:16},{c:110,x0:92,y0:347,yoffs:10,xpad:2.03906,w:15,h:16},{c:111,x0:832,y0:309,yoffs:10,xpad:0.828125,w:16,h:17},{c:112,x0:362,y0:190,yoffs:10,xpad:0.890625,w:16,h:23},{c:113,x0:395,y0:190,yoffs:10,xpad:2.07031,w:15,h:23},{c:114,x0:184,y0:347,yoffs:11,xpad:0.203125,w:10,h:15},{c:115,x0:865,y0:309,yoffs:10,xpad:0.28125,w:13,h:17},{c:116,x0:587,y0:309,yoffs:7,xpad:0.234375,w:10,h:20},{c:117,x0:124,y0:347,yoffs:11,xpad:1.64844,w:15,h:16},{c:118,x0:211,y0:347,yoffs:11,w:15,h:15},{c:119,x0:243,y0:347,yoffs:11,w:23,h:15},{c:120,x0:283,y0:347,yoffs:11,w:16,h:15},{c:121,x0:970,y0:230,yoffs:11,w:15,h:22},{c:122,x0:316,y0:347,yoffs:11,xpad:0.851563,w:13,h:15},{c:123,x0:1002,y0:230,yoffs:6,w:9,h:22},{c:124,x0:8,y0:8,w:7,h:32},{c:125,x0:8,y0:270,yoffs:6,xpad:0.460938,w:8,h:22},{c:126,x0:127,y0:381,yoffs:16,xpad:0.3125,w:12,h:5},{c:144,x0:980,y0:347,yoffs:-5,w:14,h:8},{c:160,x0:343,y0:381,xpad:6.10156,w:1,h:1},{c:161,x0:33,y0:270,yoffs:4,xpad:1.13281,w:6,h:22},{c:162,x0:427,y0:190,yoffs:7,xpad:0.273438,w:14,h:23},{c:163,x0:183,y0:309,yoffs:5,xpad:0.304688,w:14,h:21},{c:164,x0:614,y0:309,yoffs:9,xpad:0.328125,w:20,h:20},{c:165,x0:214,y0:309,yoffs:5,w:18,h:21},{c:166,x0:458,y0:190,yoffs:4,xpad:2.10156,w:6,h:23},{c:167,x0:102,y0:57,yoffs:2,xpad:1.25,w:17,h:28},{c:168,x0:178,y0:381,yoffs:4,xpad:0.453125,w:9,h:4},{c:169,x0:481,y0:190,yoffs:4,xpad:0.625,w:25,h:23},{c:170,x0:551,y0:347,yoffs:4,xpad:0.296875,w:10,h:12},{c:171,x0:673,y0:347,yoffs:13,xpad:0.140625,w:11,h:11},{c:172,x0:729,y0:347,yoffs:13,xpad:0.382813,w:15,h:10},{c:173,x0:361,y0:381,xpad:2.94531,w:1,h:1},{c:174,x0:249,y0:309,yoffs:1,xpad:0.3125,w:22,h:21},{c:175,x0:204,y0:381,yoffs:4,w:9,h:4},{c:176,x0:32,y0:381,yoffs:4,w:8,h:7},{c:177,x0:895,y0:309,yoffs:9,w:14,h:17},{c:178,x0:423,y0:347,yoffs:2,xpad:0.890625,w:11,h:14},{c:179,x0:156,y0:347,yoffs:2,xpad:1.52344,w:11,h:16},{c:180,x0:80,y0:381,yoffs:3,w:6,h:6},{c:181,x0:56,y0:270,yoffs:11,xpad:1.85938,w:15,h:22},{c:182,x0:288,y0:309,yoffs:5,xpad:0.5,w:26,h:21},{c:183,x0:230,y0:381,yoffs:16,w:5,h:4},{c:184,x0:8,y0:381,yoffs:25,xpad:0.0703125,w:7,h:8},{c:185,x0:451,y0:347,yoffs:2,xpad:0.6875,w:10,h:14},{c:186,x0:578,y0:347,yoffs:4,xpad:0.625,w:11,h:12},{c:187,x0:701,y0:347,yoffs:13,xpad:0.140625,w:11,h:11},{c:188,x0:247,y0:8,yoffs:2,xpad:0.0546875,w:25,h:29},{c:189,x0:136,y0:57,yoffs:2,xpad:1.22656,w:25,h:28},{c:190,x0:289,y0:8,yoffs:2,xpad:0.109375,w:26,h:29},{c:191,x0:88,y0:270,yoffs:6,xpad:0.09375,w:13,h:22},{c:192,x0:178,y0:57,yoffs:-2,w:19,h:28},{c:193,x0:214,y0:57,yoffs:-2,w:19,h:28},{c:194,x0:250,y0:57,yoffs:-2,w:19,h:28},{c:195,x0:648,y0:103,w:19,h:26},{c:196,x0:252,y0:103,yoffs:-1,w:19,h:27},{c:197,x0:286,y0:57,yoffs:-2,w:19,h:28},{c:198,x0:331,y0:309,yoffs:5,xpad:0.28125,w:27,h:21},{c:199,x0:322,y0:57,yoffs:5,xpad:0.945313,w:17,h:28},{c:200,x0:356,y0:57,yoffs:-2,xpad:0.617188,w:16,h:28},{c:201,x0:389,y0:57,yoffs:-2,xpad:0.617188,w:16,h:28},{c:202,x0:422,y0:57,yoffs:-2,xpad:0.617188,w:16,h:28},{c:203,x0:288,y0:103,yoffs:-1,xpad:0.617188,w:16,h:27},{c:204,x0:455,y0:57,yoffs:-2,xpad:1.54688,w:7,h:28},{c:205,x0:479,y0:57,yoffs:-2,xpad:0.546875,w:8,h:28},{c:206,x0:504,y0:57,yoffs:-2,w:11,h:28},{c:207,x0:321,y0:103,yoffs:-1,w:9,h:27},{c:208,x0:375,y0:309,yoffs:5,xpad:1.22656,w:20,h:21},{c:209,x0:684,y0:103,xpad:2.74219,w:19,h:26},{c:210,x0:332,y0:8,yoffs:-2,xpad:1.22656,w:21,h:29},{c:211,x0:370,y0:8,yoffs:-2,xpad:1.22656,w:21,h:29},{c:212,x0:408,y0:8,yoffs:-2,xpad:1.22656,w:21,h:29},{c:213,x0:347,y0:103,xpad:1.22656,w:21,h:27},{c:214,x0:532,y0:57,yoffs:-1,xpad:1.22656,w:21,h:28},{c:215,x0:346,y0:347,yoffs:11,xpad:0.359375,w:15,h:15},{c:216,x0:523,y0:190,yoffs:4,xpad:1.22656,w:21,h:23},{c:217,x0:446,y0:8,yoffs:-2,xpad:2.04688,w:19,h:29},{c:218,x0:482,y0:8,yoffs:-2,xpad:2.04688,w:19,h:29},{c:219,x0:518,y0:8,yoffs:-2,xpad:2.04688,w:19,h:29},{c:220,x0:570,y0:57,yoffs:-1,xpad:2.04688,w:19,h:28},{c:221,x0:606,y0:57,yoffs:-2,w:18,h:28},{c:222,x0:412,y0:309,yoffs:5,xpad:1.00781,w:17,h:21},{c:223,x0:446,y0:309,yoffs:5,xpad:1.30469,w:17,h:21},{c:224,x0:69,y0:148,yoffs:3,xpad:1.29688,w:14,h:24},{c:225,x0:100,y0:148,yoffs:3,xpad:1.29688,w:14,h:24},{c:226,x0:131,y0:148,yoffs:3,xpad:1.29688,w:14,h:24},{c:227,x0:561,y0:190,yoffs:4,xpad:1.29688,w:14,h:23},{c:228,x0:592,y0:190,yoffs:4,xpad:1.29688,w:14,h:23},{c:229,x0:975,y0:103,yoffs:2,xpad:1.29688,w:14,h:25},{c:230,x0:926,y0:309,yoffs:10,xpad:0.960938,w:24,h:17},{c:231,x0:623,y0:190,yoffs:10,xpad:0.273438,w:14,h:23},{c:232,x0:162,y0:148,yoffs:3,xpad:1.04688,w:15,h:24},{c:233,x0:194,y0:148,yoffs:3,xpad:1.04688,w:15,h:24},{c:234,x0:226,y0:148,yoffs:3,xpad:1.04688,w:15,h:24},{c:235,x0:654,y0:190,yoffs:4,xpad:1.04688,w:15,h:23},{c:236,x0:686,y0:190,yoffs:3,xpad:1.34375,w:6,h:23},{c:237,x0:709,y0:190,yoffs:3,w:8,h:23},{c:238,x0:734,y0:190,yoffs:3,w:11,h:23},{c:239,x0:118,y0:270,yoffs:4,w:9,h:22},{c:240,x0:762,y0:190,yoffs:4,xpad:1.53125,w:15,h:23},{c:241,x0:144,y0:270,yoffs:4,xpad:2.03906,w:15,h:22},{c:242,x0:258,y0:148,yoffs:3,xpad:0.828125,w:16,h:24},{c:243,x0:291,y0:148,yoffs:3,xpad:0.828125,w:16,h:24},{c:244,x0:324,y0:148,yoffs:3,xpad:0.828125,w:16,h:24},{c:245,x0:794,y0:190,yoffs:4,xpad:0.828125,w:16,h:23},{c:246,x0:827,y0:190,yoffs:4,xpad:0.828125,w:16,h:23},{c:247,x0:478,y0:347,yoffs:11,xpad:0.453125,w:14,h:14},{c:248,x0:967,y0:309,yoffs:10,xpad:0.828125,w:16,h:17},{c:249,x0:357,y0:148,yoffs:3,xpad:1.64844,w:15,h:24},{c:250,x0:389,y0:148,yoffs:3,xpad:1.64844,w:15,h:24},{c:251,x0:421,y0:148,yoffs:3,xpad:1.64844,w:15,h:24},{c:252,x0:860,y0:190,yoffs:4,xpad:1.64844,w:15,h:23},{c:253,x0:64,y0:8,yoffs:3,w:15,h:30},{c:254,x0:554,y0:8,yoffs:4,xpad:0.890625,w:16,h:29},{c:255,x0:587,y0:8,yoffs:4,w:15,h:29},{c:256,x0:720,y0:103,w:19,h:26},{c:257,x0:892,y0:190,yoffs:4,xpad:1.29688,w:14,h:23},{c:258,x0:385,y0:103,yoffs:-1,w:19,h:27},{c:259,x0:453,y0:148,yoffs:3,xpad:1.29688,w:14,h:24},{c:260,x0:641,y0:57,yoffs:5,w:21,h:28},{c:261,x0:923,y0:190,yoffs:10,w:16,h:23},{c:262,x0:619,y0:8,yoffs:-2,xpad:0.945313,w:17,h:29},{c:263,x0:484,y0:148,yoffs:3,xpad:0.273438,w:14,h:24},{c:268,x0:653,y0:8,yoffs:-2,xpad:0.945313,w:17,h:29},{c:269,x0:515,y0:148,yoffs:3,xpad:0.273438,w:14,h:24},{c:270,x0:679,y0:57,yoffs:-2,xpad:1.01563,w:20,h:28},{c:271,x0:956,y0:190,yoffs:4,w:22,h:23},{c:272,x0:480,y0:309,yoffs:5,xpad:1.22656,w:20,h:21},{c:273,x0:995,y0:190,yoffs:4,xpad:0.0703125,w:17,h:23},{c:274,x0:756,y0:103,xpad:0.617188,w:16,h:26},{c:275,x0:8,y0:230,yoffs:4,xpad:1.04688,w:15,h:23},{c:278,x0:421,y0:103,yoffs:-1,xpad:0.617188,w:16,h:27},{c:279,x0:40,y0:230,yoffs:4,xpad:1.04688,w:15,h:23},{c:280,x0:716,y0:57,yoffs:5,xpad:0.617188,w:16,h:28},{c:281,x0:72,y0:230,yoffs:10,xpad:1.04688,w:15,h:23},{c:282,x0:749,y0:57,yoffs:-2,xpad:0.617188,w:16,h:28},{c:283,x0:546,y0:148,yoffs:3,xpad:1.04688,w:15,h:24},{c:286,x0:782,y0:57,yoffs:-1,xpad:1.75,w:18,h:28},{c:287,x0:96,y0:8,yoffs:3,xpad:2.07031,w:15,h:30},{c:290,x0:817,y0:57,yoffs:5,xpad:1.75,w:18,h:28},{c:291,x0:32,y0:8,yoffs:2,xpad:2.07031,w:15,h:31},{c:298,x0:789,y0:103,w:9,h:26},{c:299,x0:176,y0:270,yoffs:4,w:9,h:22},{c:302,x0:852,y0:57,yoffs:5,xpad:0.546875,w:8,h:28},{c:303,x0:877,y0:57,yoffs:5,w:8,h:28},{c:304,x0:454,y0:103,yoffs:-1,xpad:1.54688,w:7,h:27},{c:305,x0:378,y0:347,yoffs:11,xpad:1.34375,w:6,h:15},{c:310,x0:687,y0:8,yoffs:5,w:19,h:29},{c:311,x0:128,y0:8,yoffs:4,xpad:0.171875,w:15,h:30},{c:313,x0:902,y0:57,yoffs:-2,w:16,h:28},{c:314,x0:815,y0:103,w:8,h:26},{c:315,x0:723,y0:8,yoffs:5,w:16,h:29},{c:316,x0:160,y0:8,yoffs:4,xpad:1.46875,w:6,h:30},{c:317,x0:202,y0:270,yoffs:4,w:16,h:22},{c:318,x0:235,y0:270,yoffs:4,w:12,h:22},{c:321,x0:517,y0:309,yoffs:5,xpad:0.046875,w:16,h:21},{c:322,x0:264,y0:270,yoffs:4,w:11,h:22},{c:323,x0:935,y0:57,yoffs:-2,xpad:2.74219,w:19,h:28},{c:324,x0:104,y0:230,yoffs:3,xpad:2.03906,w:15,h:23},{c:325,x0:756,y0:8,yoffs:5,xpad:2.74219,w:19,h:29},{c:326,x0:578,y0:148,yoffs:10,xpad:2.03906,w:15,h:24},{c:327,x0:971,y0:57,yoffs:-2,xpad:2.74219,w:19,h:28},{c:328,x0:136,y0:230,yoffs:3,xpad:2.03906,w:15,h:23},{c:332,x0:478,y0:103,xpad:1.22656,w:21,h:27},{c:333,x0:168,y0:230,yoffs:4,xpad:0.828125,w:16,h:23},{c:336,x0:792,y0:8,yoffs:-2,xpad:1.22656,w:21,h:29},{c:337,x0:610,y0:148,yoffs:3,xpad:0.828125,w:16,h:24},{c:338,x0:292,y0:270,yoffs:5,xpad:0.390625,w:29,h:22},{c:339,x0:8,y0:347,yoffs:10,xpad:0.65625,w:25,h:17},{c:340,x0:8,y0:103,yoffs:-2,w:19,h:28},{c:341,x0:201,y0:230,yoffs:3,xpad:0.203125,w:10,h:23},{c:342,x0:830,y0:8,yoffs:5,w:19,h:29},{c:343,x0:228,y0:230,yoffs:11,xpad:0.203125,w:10,h:23},{c:344,x0:44,y0:103,yoffs:-2,w:19,h:28},{c:345,x0:255,y0:230,yoffs:3,xpad:0.203125,w:10,h:23},{c:346,x0:866,y0:8,yoffs:-2,xpad:1.32031,w:15,h:29},{c:347,x0:643,y0:148,yoffs:3,xpad:0.28125,w:13,h:24},{c:350,x0:898,y0:8,yoffs:4,xpad:1.32031,w:15,h:29},{c:351,x0:282,y0:230,yoffs:10,xpad:0.28125,w:13,h:23},{c:352,x0:930,y0:8,yoffs:-2,xpad:1.32031,w:15,h:29},{c:353,x0:673,y0:148,yoffs:3,xpad:0.28125,w:13,h:24},{c:354,x0:80,y0:103,yoffs:5,w:17,h:28},{c:355,x0:840,y0:103,yoffs:7,xpad:0.234375,w:10,h:26},{c:356,x0:114,y0:103,yoffs:-2,w:17,h:28},{c:357,x0:312,y0:230,yoffs:4,w:15,h:23},{c:362,x0:516,y0:103,xpad:2.04688,w:19,h:27},{c:363,x0:344,y0:230,yoffs:4,xpad:1.64844,w:15,h:23},{c:366,x0:962,y0:8,yoffs:-2,xpad:2.04688,w:19,h:29},{c:367,x0:8,y0:148,yoffs:2,xpad:1.64844,w:15,h:25},{c:368,x0:8,y0:57,yoffs:-2,xpad:2.04688,w:19,h:29},{c:369,x0:703,y0:148,yoffs:3,xpad:1.64844,w:15,h:24},{c:370,x0:148,y0:103,yoffs:5,xpad:2.04688,w:19,h:28},{c:371,x0:338,y0:270,yoffs:11,w:17,h:22},{c:376,x0:552,y0:103,yoffs:-1,w:18,h:27},{c:377,x0:184,y0:103,yoffs:-2,xpad:0.226563,w:17,h:28},{c:378,x0:376,y0:230,yoffs:3,xpad:0.851563,w:13,h:23},{c:379,x0:587,y0:103,yoffs:-1,xpad:0.226563,w:17,h:27},{c:380,x0:372,y0:270,yoffs:4,xpad:0.851563,w:13,h:22},{c:381,x0:218,y0:103,yoffs:-2,xpad:0.226563,w:17,h:28},{c:382,x0:406,y0:230,yoffs:3,xpad:0.851563,w:13,h:23},{c:402,x0:40,y0:148,yoffs:4,w:12,h:25},{c:536,x0:183,y0:8,yoffs:4,xpad:1.32031,w:15,h:30},{c:537,x0:735,y0:148,yoffs:10,xpad:0.28125,w:13,h:24},{c:538,x0:44,y0:57,yoffs:5,w:17,h:29},{c:539,x0:621,y0:103,yoffs:7,xpad:0.234375,w:10,h:27},{c:8226,x0:103,y0:381,yoffs:13,xpad:0.28125,w:7,h:6},{c:8482,x0:606,y0:347,yoffs:5,xpad:0.882813,w:22,h:12},{c:8592,x0:761,y0:347,yoffs:11,xpad:0.882813,w:26,h:10},{c:8593,x0:765,y0:148,yoffs:4,xpad:7.88281,w:19,h:24},{c:8594,x0:804,y0:347,yoffs:11,xpad:0.882813,w:26,h:10},{c:8595,x0:801,y0:148,yoffs:4,xpad:7.88281,w:19,h:24},{c:8734,x0:509,y0:347,yoffs:11,xpad:0.6875,w:25,h:14},{c:9742,x0:837,y0:148,yoffs:4,w:31,h:24},{c:9743,x0:885,y0:148,yoffs:4,w:31,h:24},{c:65533,x0:550,y0:309,yoffs:5,w:20,h:21}]}","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n/*eslint global-require:off, no-labels:off*/\nconst glov_local_storage = require('./glov/local_storage.js');\nglov_local_storage.storage_prefix = 'macrogen'; // Before requiring anything else that might load from this\n\nconst assert = require('assert');\nconst { calculateBiomesTest } = require('./biome_test.js');\nconst camera2d = require('./glov/camera2d.js');\nconst continent_gen = require('./continent_gen.js');\nconst { continentDeserialize, continentSerialize } = require('./continent_serialize.js');\nconst { continentSerializeTest } = require('./continent_serialize_test.js');\nconst {\n  continentGen,\n  // D_OPEN,\n  D_BORDER,\n  // D_SEA,\n  D_SEA2,\n  D_INLAND_SEA,\n  D_COASTLINE,\n  D_LAKE,\n} = continent_gen;\nconst engine = require('./glov/engine.js');\nconst input = require('./glov/input.js');\nconst { linkText } = require('./glov/link.js');\nconst { min, floor, round, sqrt } = Math;\nconst net = require('./glov/net.js');\nconst { C_WATER, C_PLAINS, C_MOUNTAINS } = require('./proc_gen_constants.js');\nconst shaders = require('./glov/shaders.js');\nconst sprites = require('./glov/sprites.js');\nconst textures = require('./glov/textures.js');\nconst ui = require('./glov/ui.js');\nconst { clamp, clone } = require('../common/util.js');\nconst {\n  vec2, v2mul, v2sub,\n  vec3, v3lerp, v3scale, v3set,\n  vec4,\n} = require('./glov/vmath.js');\n\nwindow.Z = window.Z || {};\nZ.BACKGROUND = 1;\nZ.SPRITES = 10;\nZ.PARTICLES = 20;\nZ.UI_TEST = 200;\n\n// let app = exports;\n// Virtual viewport for our game logic\nexport const game_width = 480;\nexport const game_height = 240;\n\nconst MAP_WATER_C0 = vec3(0, 0.08, 0.6);\nconst MAP_WATER_C1 = vec3(0.012, 0.39, 1);\nconst MAP_W2 = 0.5;\nconst MAP_WEIGHTS = [MAP_W2, -MAP_W2, -1, -MAP_W2, MAP_W2, 1];\nconst SNOW_ELEVATION = 900 * 4;\n\nexport function main() {\n  if (engine.DEBUG) {\n    // Enable auto-reload, etc\n    net.init({ engine });\n  }\n\n  if (!engine.startup({\n    antialias: true,\n    game_width,\n    game_height,\n    pixely: 'on',\n    viewport_postprocess: false,\n    do_borders: false,\n  })) {\n    return;\n  }\n\n  assert(window.worldsModAPI);\n  let mapi = window.worldsModAPI({\n    // For testing against local build:\n    // hosts: {\n    //   debug3000: 'http://localhost:3000/'\n    // },\n  });\n\n  let shader_hex = shaders.create('shaders/hex.fp');\n\n  // Perfect sizes for pixely modes\n  ui.scaleSizes(13 / 32);\n  ui.setFontHeight(8);\n  let style_labels = ui.font.style({\n    outline_width: 4.0,\n    outline_color: 0x000000ff,\n  });\n\n  let style_link = ui.font.style(null, {\n    color: 0x5040FFff,\n    outline_width: 4.0,\n    outline_color: 0x00000020,\n  });\n  let style_link_hover = ui.font.style(null, {\n    color: 0x0000FFff,\n    outline_width: 4.0,\n    outline_color: 0x00000020,\n  });\n\n  const createSprite = sprites.create;\n\n  let modes = {\n    view: 6,\n    edit: 0,\n  };\n\n  let debug_tex1;\n  let debug_tex2;\n  let debug_sprite;\n  let opts = clone(continent_gen.default_opts);\n  let hex_tex_size = opts.hex_tex_size;\n  let tex_total_size = hex_tex_size * hex_tex_size;\n  opts.output.debug = true;\n\n  let hex_param = vec4(hex_tex_size, 0, 0, 0);\n  shaders.addGlobal('hex_param', hex_param);\n\n  let tex_data1 = new Uint8Array(tex_total_size * 4);\n  let tex_data_color = new Uint8Array(tex_total_size * 4);\n\n  let test_export = false;\n\n  let color = vec4(0,0,0,1);\n  function updateDebugTexture(cdata) {\n    let start = Date.now();\n    let view_mode = modes.view;\n    let {\n      land, fill, tslope, rslope, river, elev, water_level,\n      rstrahler, humidity, classif, time,\n    } = cdata;\n    let width = hex_tex_size;\n    let height = width;\n\n    function seaColor(pos) {\n      return elev[pos] / (water_level[pos] || opts.output.sea_range);\n    }\n\n    function setColorBuffer(buf, scale, do_ocean) {\n      for (let ii = 0; ii < tex_total_size; ++ii) {\n        if (land[ii]) {\n          let v = clamp(buf[ii] * scale, 0, 255);\n          tex_data_color[ii * 4] = v;\n          tex_data_color[ii * 4 + 1] = v;\n          tex_data_color[ii * 4 + 2] = v;\n        } else {\n          tex_data_color[ii * 4] = 0;\n          tex_data_color[ii * 4 + 1] = 0;\n          tex_data_color[ii * 4 + 2] = seaColor(ii) * 255;\n        }\n        tex_data_color[ii * 4 + 3] = 255;\n      }\n    }\n\n    if (view_mode === 0) {\n      for (let ii = 0; ii < tex_total_size; ++ii) {\n        let landv = land[ii] ? 1 : 0;\n        v3set(color, landv, landv, landv);\n        let f = fill[ii];\n        if (f > 0) {\n          if (f === D_COASTLINE) {\n            v3set(color, 0.8, 0.7, 0.3);\n          } else if (f === D_INLAND_SEA) {\n            color[1] = 0.25;\n            color[2] = 1.0;\n          } else if (f === D_BORDER) {\n            color[0] = 1.0;\n            color[2] = 0.5;\n          } else if (f <= D_SEA2) {\n            color[2] = 1;\n          } else if (f === D_LAKE) {\n            color[0] = color[1] = 0.25;\n            color[2] = 1;\n          }\n        }\n        for (let jj = 0; jj < 4; ++jj) {\n          tex_data_color[ii * 4 + jj] = clamp(color[jj] * 255, 0, 255);\n        }\n      }\n    } else if (view_mode === 1) {\n      let tslope_min = typeof opts.tslope.min === 'object' ? opts.tslope.min.add + opts.tslope.min.mul :opts.tslope.min;\n      let tslope_range = typeof opts.tslope.range === 'object' ?\n        opts.tslope.range.add + opts.tslope.range.mul :\n        opts.tslope.range;\n      let tslope_mul = 255 / (tslope_min + tslope_range);\n      setColorBuffer(tslope, tslope_mul);\n    } else if (view_mode === 2) {\n      setColorBuffer(rslope, 255 / opts.rslope.steps);\n    } else if (view_mode === 3) {\n      for (let ii = 0; ii < tex_total_size; ++ii) {\n        if (land[ii]) {\n          let v = opts.river.show_elev ?\n            (elev[ii] - opts.output.sea_range) / opts.output.land_range :\n            0;\n          v3set(color, v, v, v);\n        } else {\n          v3set(color, 0, 0, seaColor(ii));\n        }\n        for (let jj = 0; jj < 4; ++jj) {\n          tex_data_color[ii * 4 + jj] = clamp(color[jj] * 255, 0, 255);\n        }\n      }\n    } else if (view_mode === 4) {\n      setColorBuffer(humidity, 1);\n    } else if (view_mode === 5) {\n      calculateBiomesTest(width, cdata, tex_data_color);\n      if (opts.classif.show_rivers) {\n        view_mode = 3;\n      }\n    } else if (view_mode === 6) {\n      let total_range = opts.output.land_range;\n      let slope_mul = 8 / total_range;\n      let show_relief = opts.classif.show_relief;\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          let pos = y * width + x;\n          let c = classif[pos];\n          let v = 1;\n          let elev2 = elev[pos];\n          if (show_relief) {\n            let is_land = land[pos];\n            let right_slope = 0;\n            if (y && y !== height - 1 && x && x !== width - 1) {\n              let neighbors = continent_gen.neighbors_bit[x & 1];\n              for (let ii = 0; ii < 6; ++ii) {\n                let npos = pos + neighbors[ii];\n                let nelev = elev[npos];\n                let w = MAP_WEIGHTS[ii];\n                if (land[npos] !== is_land) {\n                  w *= 0.25;\n                }\n                let delta = (elev2 - nelev) * w;\n                right_slope += delta;\n              }\n            }\n            v = clamp(0.5 + right_slope * slope_mul, 0.1, 1);\n          }\n          if (c === C_WATER) {\n            v3lerp(color, seaColor(pos), MAP_WATER_C0, MAP_WATER_C1);\n            v = 0.85 + v * 0.15;\n          } else if (elev2 - opts.output.sea_range > SNOW_ELEVATION) {\n            v3set(color, 1, 1, 1);\n          } else if (c === C_MOUNTAINS) {\n            v3set(color, 0.7, 0.7, 0.7);\n          } else if (c === C_PLAINS) {\n            v3set(color, 0.4, 1, 0);\n          } else { // c === C_HILLS\n            v3set(color, 0.78, 0.8, 0);\n          }\n          v3scale(color, color, v);\n          for (let jj = 0; jj < 4; ++jj) {\n            tex_data_color[pos * 4 + jj] = clamp(color[jj] * 255, 0, 255);\n          }\n        }\n      }\n\n      if (opts.classif.show_rivers) {\n        view_mode = 3;\n      }\n    }\n\n    // interleave data\n    for (let ii = 0; ii < tex_total_size; ++ii) {\n      tex_data1[ii*4] = river[ii];\n      tex_data1[ii*4+1] = rstrahler[ii];\n      tex_data1[ii*4+2] = 0;\n      tex_data1[ii*4+3] = 0;\n    }\n\n    if (!debug_tex1) {\n      debug_tex1 = textures.load({\n        name: 'proc_gen_debug1',\n        format: textures.format.RGBA8,\n        width,\n        height,\n        data: tex_data1,\n        filter_min: gl.NEAREST,\n        filter_mag: gl.NEAREST,\n        wrap_s: gl.CLAMP_TO_EDGE,\n        wrap_t: gl.CLAMP_TO_EDGE,\n      });\n      debug_tex2 = textures.load({\n        name: 'proc_gen_debug3',\n        format: textures.format.RGBA8,\n        width,\n        height,\n        data: tex_data_color,\n        filter_min: gl.NEAREST,\n        filter_mag: gl.NEAREST,\n        wrap_s: gl.CLAMP_TO_EDGE,\n        wrap_t: gl.CLAMP_TO_EDGE,\n      });\n    } else {\n      debug_tex1.updateData(width, height, tex_data1);\n      debug_tex2.updateData(width, height, tex_data_color);\n    }\n    if (!debug_sprite) {\n      debug_sprite = createSprite({\n        texs: [debug_tex1, debug_tex2],\n      });\n    }\n    console.log(`Debug texture update in ${(Date.now() - start + time)}ms`);\n    hex_param[1] = view_mode;\n  }\n\n  let serialize_size;\n  function doExport(cdata) {\n    if (0) {\n      continentSerializeTest(cdata);\n    } else if (0) {\n      // Send to server\n      let start = Date.now();\n      let ser = continentSerialize(cdata);\n      console.log(`Serialized in ${Date.now() - start}ms`);\n      start = Date.now();\n      serialize_size = ser.length;\n      /*let deser =*/ continentDeserialize(ser);\n      console.log(`Deserialized in ${Date.now() - start}ms`);\n      let pak = net.client.wsPak('export');\n      pak.writeBuffer(ser);\n      pak.send();\n    } else {\n      // Send to WorldsFRVR via Mod API\n      // Expects the raw (unserialized) data in the form:\n      //   {\n      //     sea_level: 8192,\n      //     max_elevation: 24576,\n      //     elev: new Uint16Array(256*256),\n      //     humidity: new Uint8Array(256*256),\n      //     river: new Uint8Array(256*256),\n      //     water_level: new Uint16Array(256*256),\n      //     classif: new Uint8Array(256*256),\n      //   };\n      mapi.continentDataSet(cdata);\n    }\n  }\n\n  let need_regen = true;\n  let debug_uvs = vec4(0,hex_tex_size + 1,hex_tex_size + 1,0);\n  let cdata;\n  function test(dt) {\n    camera2d.setAspectFixed2(game_width, game_height);\n\n    if (need_regen) {\n      need_regen = false;\n      opts.early_out = modes.view < 3 ? 'river' : null;\n      cdata = continentGen(opts);\n      updateDebugTexture(cdata);\n    }\n\n    {\n      const HEX_ASPECT = 1.5 / sqrt(3);\n      let w = min(camera2d.w(), camera2d.h());\n      let x = camera2d.x1() - w * HEX_ASPECT;\n      let y = camera2d.y0();\n      hex_param[2] = 0.5 / (w * camera2d.yScale() / hex_tex_size);\n      hex_param[3] = 1 / hex_param[2];\n      debug_sprite.draw({\n        x, y, w, h: w,\n        z: Z.UI - 10,\n        uvs: debug_uvs,\n        shader: shader_hex,\n      });\n      let mouse_pos = input.mousePos();\n      if (mouse_pos[0] > x && mouse_pos[0] < x + w &&\n        mouse_pos[1] > y && mouse_pos[1] < y + w\n      ) {\n        // convert to texcoords\n        mouse_pos[0] = (mouse_pos[0] - x) / w * (hex_tex_size + 1);\n        mouse_pos[1] = (1 - (mouse_pos[1] - y) / w) * (hex_tex_size + 1);\n\n        // same in hex.fp\n        const HEX_HEIGHT = 1.0;\n        const VIEW_OFFS = vec2(0.5, 0.0);\n        const HEX_EDGE = HEX_HEIGHT / sqrt(3.0);\n        const HEX_EXTRA_WIDTH = 0.5 * HEX_EDGE; // cos(60/180*PI) * HEX_EDGE\n        const HEX_WIDTH = HEX_EDGE + HEX_EXTRA_WIDTH; // 1.5 * HEX_EDGE\n        const HEX_NON_EXTRA = HEX_EDGE / HEX_WIDTH; // 2/3rds\n        const HEX_HEIGHT_2 = HEX_HEIGHT / 2.0; // sin(60/180*PI) (0.85) * HEX_EDGE\n        const HEX_SLOPE = HEX_HEIGHT_2 / HEX_EXTRA_WIDTH;\n\n        let fpos = v2sub(vec2(), mouse_pos, VIEW_OFFS);\n        v2mul(fpos, fpos, vec2(1/HEX_WIDTH, 1/ HEX_HEIGHT));\n        let ix = floor(fpos[0]);\n        let odd = ix & 1;\n        if (odd) {\n          fpos[1] -= 0.5;\n        }\n        let fracx = fpos[0] - ix;\n        let iy = floor(fpos[1]);\n        if (fracx < HEX_NON_EXTRA) {\n          // in solid section\n        } else {\n          // in overlapping section\n          let run = ((fracx - HEX_NON_EXTRA) * HEX_WIDTH);\n          let fracy = fpos[1] - iy;\n          if (fracy > 0.5) {\n            // in top half\n            let slope = (1.0 - fracy) * HEX_HEIGHT / run;\n            if (slope < HEX_SLOPE) {\n              // in next over and up\n              ix++;\n              if (odd) {\n                iy++;\n              }\n            }\n          } else {\n            // in bottom half\n            let slope = (fracy * HEX_HEIGHT) / run;\n            if (slope < HEX_SLOPE) {\n              // in next over and down\n              ix++;\n              if (!odd) {\n                iy--;\n              }\n            }\n          }\n        }\n\n        if (ix >= 0 && ix < hex_tex_size && iy >= 0 && iy < hex_tex_size) {\n          let {\n            land, fill, tslope, rslope, river, elev, debug_priority,\n            coast_distance, ocean_distance, sea_level,\n            rstrahler, humidity,\n          } = cdata;\n          let z = Z.UI - 5;\n          ui.print(style_labels, x, y, z, `${ix},${iy}`);\n          y += ui.font_height;\n          let idx = (iy * hex_tex_size + ix);\n          ui.print(style_labels, x, y, z, `Land: ${land[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `Flags: ${fill[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `TSlope: ${tslope[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `RSlope: ${rslope[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `RElev: ${elev[idx] - sea_level}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `RProir: ${debug_priority[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `Strahler: ${rstrahler[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `Humidity: ${humidity[idx]}`);\n          y += ui.font_height;\n          ui.print(style_labels, x, y, z, `Coast Distance: ${coast_distance[idx]} / ${ocean_distance[idx]}`);\n          y += ui.font_height;\n          // ui.print(style_labels, x, y, z, `blur_temp1: ${blur_temp1[idx] - opts.output.sea_range}`);\n          // y += ui.font_height;\n          // ui.print(style_labels, x, y, z, `blur_temp2: ${blur_temp2[idx] - opts.output.sea_range}`);\n          // y += ui.font_height;\n          let rbits = river[idx];\n          ui.print(style_labels, x, y, z, `River: ${rbits&1?'Up':'  '} ${rbits&2?'UR':'  '} ` +\n            `${rbits&4?'LR':'  '} ${rbits&8?'Dn':'  '} ${rbits&16?'LL':'  '} ${rbits&32?'UL':'  '}`);\n          y += ui.font_height;\n        }\n      }\n    }\n\n    let x = ui.button_height;\n    let button_spacing = ui.button_height + 2;\n    let y = x;\n    // if (ui.buttonText({ x, y, text: 'Regen' })) {\n    //   need_regen = true;\n    // }\n    // y += button_spacing;\n\n    function sliderInternal(field, value, min_v, max_v, fixed) {\n      let old_value = value;\n      value = ui.slider(value, {\n        x, y,\n        min: min_v,\n        max: max_v,\n      });\n      if (!fixed) {\n        value = round(value);\n      } else if (fixed === 1) {\n        value = round(value * 10) / 10;\n      } else if (fixed === 2) {\n        value = round(value * 100) / 100;\n      }\n      ui.print(style_labels, x + ui.button_width + 4, y + 3, Z.UI, `${field}: ${value.toFixed(fixed)}`);\n      y += button_spacing;\n      if (old_value !== value) {\n        need_regen = true;\n      }\n      return value;\n    }\n\n    let x0 = x;\n    let subopts;\n    function slider(field, min_v, max_v, fixed, ex) {\n      x = x0;\n      let is_ex = false;\n      if (ex) {\n        is_ex = typeof subopts[field] === 'object';\n        if (ui.buttonText({ x, y, text: is_ex ? 'v' : '-',\n          w: ui.button_height })\n        ) {\n          is_ex = !is_ex;\n          if (is_ex) {\n            subopts[field] = {\n              min: subopts[field],\n              max: subopts[field],\n              freq: 1,\n            };\n          } else {\n            subopts[field] = subopts[field].max;\n          }\n          need_regen = true;\n        }\n        x += 16;\n      }\n      if (is_ex) {\n        ui.print(style_labels, x, y + 3, Z.UI, `${field}`);\n        y += button_spacing;\n        subopts[field].min = sliderInternal('min', subopts[field].min, min_v, max_v, fixed);\n        subopts[field].max = sliderInternal('max', subopts[field].max, min_v, max_v, fixed);\n        subopts[field].freq = sliderInternal('freq', subopts[field].freq, 0.1, 2, 1);\n      } else {\n        subopts[field] = sliderInternal(field, subopts[field], min_v, max_v, fixed);\n      }\n    }\n    function toggle(field) {\n      if (ui.buttonText({ x, y, text: `${field}: ${subopts[field] ? 'ON': 'off'}` })) {\n        subopts[field] = !subopts[field];\n        need_regen = true;\n      }\n      y += button_spacing;\n    }\n    subopts = opts;\n    slider('seed', 0, 100, 0);\n\n    function modeButton(subkey, name, id) {\n      let w = ui.button_width * 0.38;\n      let colors_selected = ui.makeColorSet(vec4(0,1,0,1));\n      let selected = modes[subkey] === id;\n      if (ui.buttonText({\n        x, y, w, text: `${name}`,\n        colors: selected ? colors_selected : null,\n      })) {\n        modes[subkey] = id;\n        if (subkey === 'view') {\n          need_regen = true;\n        }\n      }\n      x += w + 2;\n    }\n    ui.print(style_labels, x, y + 2, Z.UI, 'View:');\n    x += 25;\n    let aspect = engine.width / engine.height;\n    let num_rows = aspect > 1.9 ? 1 : 2;\n    modeButton('view', 'coast', 0);\n    modeButton('view', 'tslope', 1);\n    modeButton('view', 'rslope', 2);\n    modeButton('view', 'river', 3);\n    if (num_rows === 2) {\n      y += button_spacing;\n      x = x0 + 25;\n    }\n    modeButton('view', 'humid', 4);\n    modeButton('view', 'classif', 6);\n    modeButton('view', 'biomes', 5);\n    y += button_spacing;\n    x = x0;\n    ui.print(style_labels, x, y + 2, Z.UI, 'Edit:');\n    x += 25;\n    num_rows = aspect > 1.77 ? 2 : 3;\n    modeButton('edit', 'coast', 0);\n    modeButton('edit', 'tslope', 1);\n    modeButton('edit', 'rslope', 2);\n    modeButton('edit', 'river', 3);\n    if (num_rows === 3) {\n      y += button_spacing;\n      x = x0 + 25;\n    }\n    modeButton('edit', 'lakes', 8);\n    modeButton('edit', 'blur', 9);\n    if (num_rows === 2) {\n      y += button_spacing;\n      x = x0 + 25;\n    }\n    modeButton('edit', 'mtify', 7);\n    modeButton('edit', 'humid', 4);\n    if (num_rows === 3) {\n      y += button_spacing;\n      x = x0 + 25;\n    }\n    modeButton('edit', 'ocean', 5);\n    modeButton('edit', 'classif', 10);\n    modeButton('edit', 'output', 6);\n    y += button_spacing;\n    x = x0;\n\n    if (modes.edit === 0) {\n      subopts = opts.coast;\n      slider('cutoff', 0.15, 1.0, 2);\n      slider('frequency', 0.1, 10, 1, true);\n      //slider('amplitude', 0.01, 10, 2);\n      slider('persistence', 0.01, 2, 2, true);\n      slider('lacunarity', 1, 10.0, 2, true);\n      slider('octaves', 1, 10, 0);\n      slider('domain_warp', 0, 2, 0);\n      if (subopts.domain_warp) {\n        slider('warp_freq', 0.01, 3, 1);\n        slider('warp_amp', 0, 2, 2);\n      }\n      toggle('fill_seas');\n      toggle('channels');\n    } else if (modes.edit === 1) {\n      subopts = opts.tslope;\n      slider('frequency', 0.1, 10, 1, true);\n      //slider('amplitude', 0.01, 10, 2);\n      slider('min', 0, 10, 0, true);\n      slider('range', 0, 255, 0, true);\n      slider('persistence', 0.01, 2, 2, true);\n      slider('lacunarity', 1, 10.0, 2, true);\n      slider('octaves', 1, 10, 0);\n      slider('domain_warp', 0, 2, 0);\n      if (subopts.domain_warp) {\n        slider('warp_freq', 0.01, 3, 1);\n        slider('warp_amp', 0, 2, 2);\n      }\n    } else if (modes.edit === 2) {\n      subopts = opts.rslope;\n      slider('frequency', 0.1, 10, 1, true);\n      //slider('amplitude', 0.01, 10, 2);\n      slider('persistence', 0.01, 2, 2, true);\n      slider('lacunarity', 1, 10.0, 2, true);\n      slider('octaves', 1, 10, 0);\n      slider('domain_warp', 0, 2, 0);\n      if (subopts.domain_warp) {\n        slider('warp_freq', 0.01, 3, 1);\n        slider('warp_amp', 0, 2, 2);\n      }\n      slider('steps', 1, 64, 0);\n    } else if (modes.edit === 3) {\n      subopts = opts.river;\n      slider('weight_bend', 1, 10, 0);\n      slider('weight_afork', 1, 10, 0);\n      slider('weight_sfork', 1, 10, 0);\n      slider('max_tslope', 1, 200, 0);\n      slider('tuning_h', 1, 200, 0);\n      toggle('show_elev');\n      toggle('prune');\n      toggle('mtify_prune');\n      if (subopts.mtify_prune) {\n        slider('mtify_prune_grace', 0, 200, 0);\n      }\n    } else if (modes.edit === 4) {\n      subopts = opts.humidity;\n      slider('frequency', 0.1, 10, 1, true);\n      slider('persistence', 0.01, 2, 2, true);\n      slider('lacunarity', 1, 10.0, 2, true);\n      slider('octaves', 1, 10, 0);\n      slider('domain_warp', 0, 2, 0);\n      if (subopts.domain_warp) {\n        slider('warp_freq', 0.01, 3, 1);\n        slider('warp_amp', 0, 2, 2);\n      }\n      slider('rainshadow', 0, 1, 2, true);\n      toggle('show_relief');\n    } else if (modes.edit === 5) {\n      subopts = opts.ocean;\n      slider('frequency', 0.1, 10, 1, true);\n      slider('persistence', 0.01, 2, 2, true);\n      slider('lacunarity', 1, 10.0, 2, true);\n      slider('octaves', 1, 10, 0);\n      slider('domain_warp', 0, 2, 0);\n      if (subopts.domain_warp) {\n        slider('warp_freq', 0.01, 3, 1);\n        slider('warp_amp', 0, 2, 2);\n      }\n    } else if (modes.edit === 6) {\n      subopts = opts.output;\n      slider('sea_range_exp', 6, 15, 0);\n      slider('land_range_exp', 6, 15, 0);\n      subopts.sea_range = 1 << subopts.sea_range_exp;\n      subopts.land_range = 1 << subopts.land_range_exp;\n\n      if (mapi.connected()) {\n        ui.print(style_labels, x, y, Z.UI, `WorldsModAPI connected to ${mapi.connected()}`);\n        y += ui.font_height + 2;\n        if (ui.buttonText({ x, y, text: 'Export' }) || test_export) {\n          test_export = false;\n          opts.output.debug = false;\n          doExport(continentGen(opts));\n          opts.output.debug = true;\n        }\n        y += button_spacing;\n        if (serialize_size) {\n          ui.print(style_labels, x, y, Z.UI, 'Data exported! Create a New World to use this data.');\n          y += ui.font_height + 2;\n          ui.print(style_labels, x, y, Z.UI, `Size: ${serialize_size}`);\n          y += ui.font_height + 2;\n        }\n      } else {\n        ui.print(style_labels, x, y, Z.UI, 'To export, open Worlds FRVR');\n        y += ui.font_height + 2;\n        linkText({\n          style_link, style_link_hover,\n          x, y,\n          url: 'https://worlds.frvr.com/',\n        });\n      }\n    } else if (modes.edit === 7) {\n      subopts = opts.mountainify;\n      slider('peak_radius', 2, 50, 0);\n      slider('peak_percent', 0, 1, 2);\n      slider('peak_k', 1, 10, 0);\n      slider('blend_radius', 2, 50, 0);\n      slider('height_scale', 0, 8, 1);\n      slider('weight_local', 0, 1, 2);\n      slider('power_min', 1, 8, 1);\n      slider('power_max', 1, 8, 1);\n      slider('power_blend', 0.01, 1, 2);\n      slider('cdist_ramp', 0, 50, 0);\n    } else if (modes.edit === 8) {\n      subopts = opts.lakes;\n      slider('lake_search_radius', 2, 50, 0);\n      slider('lake_percent', 0, 1, 2);\n      slider('lake_k', 1, 10, 0);\n      slider('min_sep', 2, 50, 0);\n    } else if (modes.edit === 9) {\n      subopts = opts.blur;\n      slider('threshold', 1, 2000, 0);\n      slider('weight', 0, 1, 2);\n    } else if (modes.edit === 10) {\n      subopts = opts.classif;\n      slider('cut1', -1, 1, 3);\n      slider('cut2', 0, 1, 3);\n      slider('blur_w', 1, 10, 0);\n      slider('blur_scale', 0, 1000, 0);\n      toggle('show_rivers');\n      toggle('show_relief');\n    }\n  }\n\n  function testInit(dt) {\n    engine.setState(test);\n    test(dt);\n  }\n\n  engine.setState(testInit);\n}\n","const { sqrt } = Math;\n\nexport const SKEW_X = 1 / (sqrt(1 - 0.5*0.5)); // 1.1547\n\n// biome type classification categories from continent generation\nexport const C_WATER = 0;\nexport const C_PLAINS = 1;\nexport const C_HILLS = 2;\nexport const C_MOUNTAINS = 3;\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-bitwise:off */\n\nconst assert = require('assert');\nconst { isPacket } = require('./packet.js');\n\nexport function ackInitReceiver(receiver) {\n  receiver.last_pak_id = 0;\n  receiver.resp_cbs = {};\n  receiver.responses_waiting = 0;\n}\n\nconst ACKFLAG_IS_RESP = 1<<3;\nconst ACKFLAG_ERR = 1<<4;\nconst ACKFLAG_DATA_JSON = 1<<5;\n// `receiver` is really the sender, here, but will receive any response\nexport function ackWrapPakStart(pak, receiver, msg) {\n  let flags = 0;\n\n  pak.ack_data = {\n    receiver,\n  };\n\n  if (typeof msg === 'number') {\n    flags |= ACKFLAG_IS_RESP;\n    pak.writeInt(msg);\n  } else {\n    pak.writeAnsiString(msg);\n  }\n  let resp_pak_id = receiver ? ++receiver.last_pak_id : 0;\n  pak.ack_data.resp_pak_id = resp_pak_id;\n  pak.ack_data.resp_pak_id_offs = pak.getOffset();\n  pak.writeInt(resp_pak_id);\n\n  pak.ack_data.data_offs = pak.getOffset();\n  pak.ack_data.flags = flags;\n}\n\nexport function ackWrapPakPayload(pak, data) {\n  if (isPacket(data)) {\n    pak.appendRemaining(data);\n  } else {\n    pak.ack_data.flags |= ACKFLAG_DATA_JSON;\n    pak.writeJSON(data);\n  }\n}\n\nexport function ackWrapPakFinish(pak, err, resp_func) {\n  let flags = pak.ack_data.flags;\n  let offs = pak.getOffset();\n  if (err) {\n    // Nothing else must have been written\n    assert.equal(pak.ack_data.data_offs, offs);\n    flags |= ACKFLAG_ERR;\n    pak.writeString(String(err));\n    offs = pak.getOffset();\n  }\n  pak.makeReadable();\n  let resp_pak_id = 0;\n  if (resp_func && resp_func.expecting_response !== false) {\n    resp_pak_id = pak.ack_data.resp_pak_id;\n    assert(resp_pak_id);\n    assert(pak.ack_data.receiver);\n    pak.ack_data.receiver.resp_cbs[resp_pak_id] = resp_func;\n  } else {\n    pak.seek(pak.ack_data.resp_pak_id_offs);\n    pak.zeroInt();\n    pak.seek(offs);\n  }\n  pak.updateFlags(flags);\n  delete pak.ack_data;\n  return resp_pak_id;\n}\n\nexport function ackReadHeader(pak) {\n  let flags = pak.getFlags();\n  let msg = (flags & ACKFLAG_IS_RESP) ? pak.readInt() : pak.readAnsiString();\n  let pak_id = pak.readInt();\n  let err = (flags & ACKFLAG_ERR) ? pak.readString() : undefined;\n  let data;\n  if (flags & ACKFLAG_DATA_JSON) {\n    data = pak.readJSON();\n  } else {\n    data = pak;\n  }\n  return {\n    msg,\n    err,\n    data,\n    pak_id,\n  };\n}\n\nexport function failAll(receiver, err) {\n  err = err || 'ERR_DISCONNECTED';\n  let cbs = receiver.resp_cbs;\n  receiver.resp_cbs = {};\n  receiver.responses_waiting = 0;\n  for (let pak_id in cbs) {\n    cbs[pak_id](err);\n  }\n}\n\n// `source` is a string for debug/logging only\n// `receiver` needs initReceicver called on it, have .onError() in the prototype and optionally .log()\n// sendFunc(msg, err, data, resp_func)\n// handleFunc(msg, data, resp_func)\n// eslint-disable-next-line consistent-return\nexport function ackHandleMessage(receiver, source, net_data_or_pak, send_func, pak_func, handle_func) {\n  let net_data = isPacket(net_data_or_pak) ? ackReadHeader(net_data_or_pak) : net_data_or_pak;\n  let { err, data, msg, pak_id } = net_data;\n  let now = Date.now();\n  let expecting_response = Boolean(pak_id);\n  let timeout_id;\n  if (expecting_response) {\n    timeout_id = 'pending';\n  }\n  let sent_response = false;\n  let start_time = now;\n\n  function preSendResp() {\n    assert(!sent_response, 'Response function called twice');\n    sent_response = true;\n\n    if (expecting_response) {\n      if (timeout_id) {\n        if (timeout_id !== 'pending') {\n          clearTimeout(timeout_id);\n        }\n      } else {\n        (receiver.log ? receiver : console).log(`Response finally sent for ${msg\n        } after ${((Date.now() - start_time) / 1000).toFixed(1)}s`);\n      }\n      receiver.responses_waiting--;\n    }\n  }\n\n  function respFunc(err, resp_data, resp_func) {\n    preSendResp();\n    // the callback wants to send a response, and possibly get a response from that!\n    if (!expecting_response) {\n      // But, the other end is not expecting a response from this packet, black-hole it\n      if (resp_func) {\n        // We better not be expecting a response to our response!\n        receiver.onError(`Sending a response to a packet (${msg}) that did not expect` +\n          ' one, but we are expecting a response');\n        return;\n      }\n      // however, if there was an error, let's forward that along as an error message\n      if (err) {\n        send_func('error', null, err, null);\n      }\n      return;\n    }\n    send_func(pak_id, err, resp_data, resp_func);\n  }\n  respFunc.expecting_response = expecting_response;\n  respFunc.pak = function (ref_pak) {\n    assert(expecting_response);\n    let pak = pak_func(pak_id, ref_pak);\n    let orig_send = pak.send;\n    pak.send = function (err, resp_func) {\n      preSendResp();\n      orig_send.call(pak, err, resp_func);\n    };\n    return pak;\n  };\n\n  if (typeof msg === 'number') {\n    let cb = receiver.resp_cbs[msg];\n    if (!cb) {\n      return receiver.onError(`Received response to unknown packet with id ${msg} from ${source}`);\n    }\n    delete receiver.resp_cbs[msg];\n    cb(err, data, respFunc); // eslint-disable-line callback-return\n  } else {\n    if (!msg) {\n      return receiver.onError(`Received message with no .msg from ${source}`);\n    }\n    handle_func(msg, data, respFunc);\n  }\n  if (expecting_response) {\n    // Note, this may be -1 if respFunc has already been called\n    receiver.responses_waiting++;\n    if (!sent_response) {\n      // timeout warning for response\n      timeout_id = setTimeout(function () {\n        timeout_id = null;\n        (receiver.log ? receiver : console).log(`Response not sent for ${msg\n        } from ${source} after ${((Date.now() - start_time) / 1000).toFixed(1)}s`);\n      }, 15*1000);\n    }\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint no-bitwise:off */\n/* globals atob */\n\n// Encoding is fastest with non-native calls: http://jsperf.com/base64-encode\n// Decoding is fastest using window.btoa: http://jsperf.com/base64-decode\n\nconst { floor } = Math;\n\nconst chr_table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst PAD = '=';\n\n// dv is a DataView with a .u8 property\nfunction encode(dv, offset, length) {\n  let data = dv.u8;\n  let result = '';\n  let i;\n  let effi;\n  // Convert every three bytes to 4 ascii characters.\n  for (i = 0; i < (length - 2); i += 3) {\n    effi = offset + i;\n    result += chr_table[data[effi] >> 2];\n    result += chr_table[((data[effi] & 0x03) << 4) + (data[effi + 1] >> 4)];\n    result += chr_table[((data[effi + 1] & 0x0f) << 2) + (data[effi + 2] >> 6)];\n    result += chr_table[data[effi + 2] & 0x3f];\n  }\n\n  // Convert the remaining 1 or 2 bytes, pad out to 4 characters.\n  if (length % 3) {\n    i = length - (length % 3);\n    effi = offset + i;\n    result += chr_table[data[effi] >> 2];\n    if ((length % 3) === 2) {\n      result += chr_table[((data[effi] & 0x03) << 4) + (data[effi + 1] >> 4)];\n      result += chr_table[(data[effi + 1] & 0x0f) << 2];\n      result += PAD;\n    } else {\n      result += chr_table[(data[effi] & 0x03) << 4];\n      result += PAD + PAD;\n    }\n  }\n\n  return result;\n}\n\nfunction decodeNativeBrowser(data, allocator) {\n  let str = atob(data);\n  let len = str.length;\n  let dv = allocator(len);\n  let u8 = dv.u8;\n  for (let ii = 0; ii < len; ++ii) {\n    u8[ii] = str.charCodeAt(ii);\n  }\n  dv.decode_size = len;\n  return dv;\n}\n\nfunction encodeNativeNode(dv, offset, length) {\n  // Allocates a Buffer() object each time - could have our allocDataView do that if needed for perf\n  return Buffer.from(dv.buffer).toString('base64', offset, offset + length);\n}\n// Faster, but uses an internal function that might break:\n// function encodeNativeNode(dv, offset, length) {\n//   return Buffer.prototype.base64Slice.call(dv.u8, offset, offset + length);\n// }\n\nfunction decodeNativeNode(data, allocator) {\n  let buffer_len = (data.length >> 2) * 3 + floor((data.length % 4) / 1.5);\n  let dv = allocator(buffer_len);\n  let buffer = Buffer.from(dv.buffer);\n  dv.decode_size = buffer.write(data, 'base64');\n  return dv;\n}\n\nconst BROWSER = typeof window !== 'undefined';\n\n// string -> Uint8Array or Buffer\nexports.base64Decode = BROWSER ? decodeNativeBrowser : decodeNativeNode;\n// Uint8Array or Buffer -> string\nexports.base64Encode = BROWSER ? encode : encodeNativeNode;\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst { isInteger } = require('./util.js');\n\nfunction canonical(cmd) {\n  return cmd.toLowerCase().replace(/[_.]/g, '');\n}\n\nexport const TYPE_INT = 0;\nexport const TYPE_FLOAT = 1;\nexport const TYPE_STRING = 2;\nconst TYPE_NAME = ['INTEGER', 'NUMBER', 'STRING'];\n\nexport function defaultHandler(err, resp) {\n  if (err) {\n    console.error(err, resp);\n  } else {\n    console.info(resp);\n  }\n}\n\nfunction checkAccess(access, list) {\n  if (list) {\n    for (let ii = 0; ii < list.length; ++ii) {\n      if (!access || !access[list[ii]]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction CmdParse(params) {\n  this.cmds = {};\n  this.cmds_for_complete = this.cmds;\n  this.was_not_found = false;\n  this.storage = params && params.storage; // expects .setJSON(), .getJSON()\n  this.default_handler = defaultHandler;\n  this.register({\n    cmd: 'cmd_list',\n    func: this.cmdList.bind(this),\n    access_show: ['hidden'],\n  });\n}\nCmdParse.prototype.cmdList = function (str, resp_func) {\n  if (!this.cmd_list) {\n    let list = this.cmd_list = {};\n    for (let cmd in this.cmds) {\n      let cmd_data = this.cmds[cmd];\n      let access = []; // combine for data compaction\n      if (cmd_data.access_show) {\n        access = access.concat(cmd_data.access_show);\n      }\n      if (cmd_data.access_run) {\n        access = access.concat(cmd_data.access_run);\n      }\n      if (access.indexOf('hidden') !== -1) {\n        continue;\n      }\n      let data = {\n        name: cmd_data.name,\n        help: cmd_data.help,\n      };\n      if (cmd_data.usage) {\n        data.usage = cmd_data.usage;\n      }\n      if (access.length) {\n        data.access_show = access;\n      }\n      list[cmd] = data;\n    }\n  }\n  resp_func(null, this.cmd_list);\n};\n\nCmdParse.prototype.setDefaultHandler = function (fn) {\n  assert(this.default_handler === defaultHandler); // Should only set this once\n  this.default_handler = fn;\n};\nCmdParse.prototype.handle = function (self, str, resp_func) {\n  resp_func = resp_func || this.default_handler;\n  this.was_not_found = false;\n  let m = str.match(/^([^\\s]+)(?:\\s+(.*))?$/);\n  if (!m) {\n    resp_func('Missing command');\n    return true;\n  }\n  let cmd = canonical(m[1]);\n  let cmd_data = this.cmds[cmd];\n  if (cmd_data && !checkAccess(self && self.access, cmd_data.access_run)) {\n    // this.was_not_found = true;\n    resp_func(`Access denied: \"${m[1]}\"`);\n    return false;\n  }\n  if (!cmd_data) {\n    this.was_not_found = true;\n    resp_func(`Unknown command: \"${m[1]}\"`);\n    return false;\n  }\n  cmd_data.fn.call(self, m[2] || '', resp_func);\n  return true;\n};\n\nCmdParse.prototype.register = function (param) {\n  assert.equal(typeof param, 'object');\n  let { cmd, func, help, usage, access_show, access_run } = param;\n  assert(cmd && func);\n  this.cmds[canonical(cmd)] = {\n    name: cmd,\n    fn: func,\n    help: help || '',\n    usage: usage || undefined,\n    access_show,\n    access_run,\n  };\n};\n\nCmdParse.prototype.registerValue = function (cmd, param) {\n  assert(TYPE_NAME[param.type] || !param.set);\n  assert(param.set || param.get);\n  let label = param.label || cmd;\n  let store = param.store && this.storage || false;\n  let store_key = `cmd_parse_${canonical(cmd)}`;\n  if (param.ver) {\n    store_key += `_${param.ver}`;\n  }\n  if (store) {\n    assert(param.set);\n    let init_value = this.storage.getJSON(store_key);\n    if (init_value !== undefined) {\n      param.set(init_value);\n    }\n  }\n  let fn = (str, resp_func) => {\n    function value() {\n      resp_func(null, `${label} = ${param.get()}`);\n    }\n    function usage() {\n      resp_func(`Usage: /${cmd} ${TYPE_NAME[param.type]}`);\n    }\n    if (!str) {\n      if (param.get) {\n        return value();\n      } else {\n        return usage();\n      }\n    }\n    if (!param.set) {\n      return resp_func(`Usage: /${cmd}`);\n    }\n    let n = Number(str);\n    if (param.range) {\n      if (n < param.range[0]) {\n        n = param.range[0];\n      } else if (n > param.range[1]) {\n        n = param.range[1];\n      }\n    }\n    let store_value = n;\n    if (param.type === TYPE_INT) {\n      if (!isInteger(n)) {\n        return usage();\n      }\n      param.set(n);\n    } else if (param.type === TYPE_FLOAT) {\n      if (!isFinite(n)) {\n        return usage();\n      }\n      param.set(n);\n    } else {\n      store_value = str;\n      param.set(str);\n    }\n    if (store) {\n      this.storage.setJSON(store_key, store_value);\n    }\n    if (param.get) {\n      return value();\n    } else {\n      return resp_func(null, `${label} udpated`);\n    }\n  };\n  this.register({\n    cmd,\n    func: fn,\n    help: param.help || ((param.get && param.set) ?\n      `Set or display \"${label}\" value` :\n      param.set ? `Set \"${label}\" value` : `Display \"${label}\" value`),\n    usage: param.usage || ((param.get ? `Display \"${label}\" value\\n  Usage: /${cmd}\\n` : '') +\n      (param.set ? `Set \"${label}\" value\\n  Usage: /${cmd} NewValue` : '')),\n    access_show: param.access_show,\n    access_run: param.access_run,\n  });\n};\n\nfunction cmpCmd(a, b) {\n  if (a.cname < b.cname) {\n    return -1;\n  }\n  return 1;\n}\n\n// for auto-complete\nCmdParse.prototype.addServerCommands = function (new_cmds) {\n  let cmds = this.cmds_for_complete;\n  if (this.cmds_for_complete === this.cmds) {\n    cmds = this.cmds_for_complete = {};\n    for (let cname in this.cmds) {\n      cmds[cname] = this.cmds[cname];\n    }\n  }\n  for (let cname in new_cmds) {\n    if (!cmds[cname]) {\n      cmds[cname] = new_cmds[cname];\n    }\n  }\n};\n\nCmdParse.prototype.autoComplete = function (str, access) {\n  let list = [];\n  str = str.split(' ');\n  let first_tok = canonical(str[0]);\n  for (let cname in this.cmds_for_complete) {\n    if (str.length === 1 && cname.slice(0, first_tok.length) === first_tok ||\n      str.length > 1 && cname === first_tok\n    ) {\n      let cmd_data = this.cmds_for_complete[cname];\n      if (checkAccess(access, cmd_data.access_show) && checkAccess(access, cmd_data.access_run)) {\n        list.push({\n          cname,\n          cmd: cmd_data.name,\n          help: cmd_data.help,\n          usage: cmd_data.usage,\n        });\n      }\n    }\n  }\n  list.sort(cmpCmd);\n  return list; // .slice(0, 20); Maybe?\n};\n\nCmdParse.prototype.canonical = canonical;\n\nCmdParse.prototype.TYPE_INT = TYPE_INT;\nCmdParse.prototype.TYPE_FLOAT = TYPE_FLOAT;\nCmdParse.prototype.TYPE_STRING = TYPE_STRING;\n\nexport function create(params) {\n  return new CmdParse(params);\n}\n","/**\n *\n *  MD5 (Message-Digest Algorithm)\n *  http://www.webtoolkit.info/\n *\n * Modified by railGun to handle node.js Buffer objects\n *\n **/\n\n/* eslint no-bitwise:off, new-cap:off*/\nconst assert = require('assert');\n\nfunction stringUtf8Encode(str) {\n  let c;\n  let n;\n  let utftext = [];\n  str = str.replace(/\\r\\n/g, '\\n');\n  for (n = 0; n < str.length; ++n) {\n    c = str.charCodeAt(n);\n    if (c < 128) {\n      utftext.push(String.fromCharCode(c));\n    } else if ((c > 127) && (c < 2048)) {\n      utftext.push(String.fromCharCode((c >> 6) | 192));\n      utftext.push(String.fromCharCode((c & 63) | 128));\n    } else {\n      utftext.push(String.fromCharCode((c >> 12) | 224));\n      utftext.push(String.fromCharCode(((c >> 6) & 63) | 128));\n      utftext.push(String.fromCharCode((c & 63) | 128));\n    }\n  }\n  return utftext.join('');\n}\n\n\nfunction rotateLeft(lValue, iShiftBits) {\n  return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n}\n\nfunction addUnsigned(lX,lY) {\n  let lX8 = (lX & 0x80000000);\n  let lY8 = (lY & 0x80000000);\n  let lX4 = (lX & 0x40000000);\n  let lY4 = (lY & 0x40000000);\n  let lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n  if (lX4 & lY4) {\n    return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n  }\n  if (lX4 | lY4) {\n    if (lResult & 0x40000000) {\n      return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n    } else {\n      return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n    }\n  } else {\n    return (lResult ^ lX8 ^ lY8);\n  }\n}\n\nfunction F(x,y,z) {\n  return (x & y) | ((~x) & z);\n}\nfunction G(x,y,z) {\n  return (x & z) | (y & (~z));\n}\nfunction H(x,y,z) {\n  return (x ^ y ^ z);\n}\nfunction I(x,y,z) {\n  return (y ^ (x | (~z)));\n}\n\nfunction FF(a,b,c,d,x,s,ac) {\n  a = addUnsigned(a, addUnsigned(addUnsigned(F(b, c, d), x), ac));\n  return addUnsigned(rotateLeft(a, s), b);\n}\n\nfunction GG(a,b,c,d,x,s,ac) {\n  a = addUnsigned(a, addUnsigned(addUnsigned(G(b, c, d), x), ac));\n  return addUnsigned(rotateLeft(a, s), b);\n}\n\nfunction HH(a,b,c,d,x,s,ac) {\n  a = addUnsigned(a, addUnsigned(addUnsigned(H(b, c, d), x), ac));\n  return addUnsigned(rotateLeft(a, s), b);\n}\n\nfunction II(a,b,c,d,x,s,ac) {\n  a = addUnsigned(a, addUnsigned(addUnsigned(I(b, c, d), x), ac));\n  return addUnsigned(rotateLeft(a, s), b);\n}\n\nfunction convertToWordArray(string) {\n  let lWordCount;\n  let lMessageLength = string.length;\n  let lNumberOfWords_temp1=lMessageLength + 8;\n  let lNumberOfWords_temp2=\n    (lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n  let lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n  let lWordArray=new Array(lNumberOfWords-1);\n  let lBytePosition = 0;\n  let lByteCount = 0;\n  while (lByteCount < lMessageLength) {\n    lWordCount = (lByteCount-(lByteCount % 4))/4;\n    lBytePosition = (lByteCount % 4)*8;\n    lWordArray[lWordCount] |= string.charCodeAt(lByteCount) << lBytePosition;\n    lByteCount++;\n  }\n  lWordCount = (lByteCount-(lByteCount % 4))/4;\n  lBytePosition = (lByteCount % 4)*8;\n  lWordArray[lWordCount] |= (0x80<<lBytePosition);\n  lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n  lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n  return lWordArray;\n}\n\n// function convertByteArraytoWordArray(arr) {\n//   let lWordCount;\n//   let lMessageLength = arr.length;\n//   let lNumberOfWords_temp1 = lMessageLength + 8;\n//   let lNumberOfWords_temp2 =\n//     (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\n//   let lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\n//   let lWordArray = new Array(lNumberOfWords - 1);\n//   let lBytePosition = 0;\n//   let lByteCount = 0;\n//   while (lByteCount < lMessageLength) {\n//     lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n//     lBytePosition = (lByteCount % 4) * 8;\n//     lWordArray[lWordCount] |= arr[lByteCount] << lBytePosition;\n//     lByteCount++;\n//   }\n//   lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n//   lBytePosition = (lByteCount % 4) * 8;\n//   lWordArray[lWordCount] |= 0x80 << lBytePosition;\n//   lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\n//   lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\n//   return lWordArray;\n// }\n\nfunction wordToHex(lValue) {\n  let wordToHexValue='';\n\n\n  let wordToHexValue_temp='';\n\n\n  let lByte;\n  let lCount;\n  for (lCount = 0; lCount<=3; lCount++) {\n    lByte = (lValue>>>(lCount*8)) & 255;\n    wordToHexValue_temp = `0${lByte.toString(16)}`;\n    wordToHexValue +=\n      wordToHexValue_temp.substr(wordToHexValue_temp.length-2,2);\n  }\n  return wordToHexValue;\n}\n\n// string can either be a string, node.js Buffer, array (of numbers < 256)\n// or a typed array\nmodule.exports = function md5(string) {\n  let AA;\n  let BB;\n  let CC;\n  let DD;\n  let a;\n  let b;\n  let c;\n  let d;\n  let k;\n  let S11=7;\n  let S12=12;\n  let S13=17;\n  let S14=22;\n  let S21=5;\n  let S22=9;\n  let S23=14;\n  let S24=20;\n  let S31=4;\n  let S32=11;\n  let S33=16;\n  let S34=23;\n  let S41=6;\n  let S42=10;\n  let S43=15;\n  let S44=21;\n\n  let x;\n  if (typeof string === 'string') {\n    string = stringUtf8Encode(string);\n    x = convertToWordArray(string);\n  } else {\n    assert(false); // disable due to not used\n    // node.js buffer or Array\n    // x = convertByteArraytoWordArray(string);\n  }\n\n  a = 0x67452301;\n  b = 0xEFCDAB89;\n  c = 0x98BADCFE;\n  d = 0x10325476;\n\n  for (k=0; k<x.length; k+=16) {\n    AA=a;\n    BB=b;\n    CC=c;\n    DD=d;\n    a=FF(a,b,c,d,x[k], S11,0xD76AA478);\n    d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n    c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n    b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n    a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n    d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n    c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n    b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n    a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n    d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n    c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n    b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n    a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n    d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n    c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n    b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n    a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n    d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n    c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n    b=GG(b,c,d,a,x[k], S24,0xE9B6C7AA);\n    a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n    d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n    c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n    b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n    a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n    d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n    c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n    b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n    a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n    d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n    c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n    b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n    a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n    d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n    c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n    b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n    a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n    d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n    c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n    b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n    a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n    d=HH(d,a,b,c,x[k], S32,0xEAA127FA);\n    c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n    b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n    a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n    d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n    c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n    b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n    a=II(a,b,c,d,x[k], S41,0xF4292244);\n    d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n    c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n    b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n    a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n    d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n    c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n    b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n    a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n    d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n    c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n    b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n    a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n    d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n    c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n    b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n    a=addUnsigned(a,AA);\n    b=addUnsigned(b,BB);\n    c=addUnsigned(c,CC);\n    d=addUnsigned(d,DD);\n  }\n\n  let temp = wordToHex(a)+wordToHex(b)+wordToHex(c)+wordToHex(d);\n  return temp.toLowerCase();\n};\n\n/* // Uncomment this and run \"node MD5.js file.ext\"\nvar FS = require('fs');\nvar data = FS.readFileSync(process.argv[2]);\nvar md5 = module.exports(data);\nconsole.log('MD5 = ' + md5);\n// */\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n// Some code derived from libGLOV (C++), also MIT Licensed\n\n/* eslint no-bitwise:off */\n\n// Upon read, throw an exception if there is any data read error (e.g. read off of end of packet)\n\n// TODO: Maybe: Have 2 offsets, one for writing (data_len?), one for reading (buf_offs?),\n//   then there should be many fewer ?pak.readable branches\n//   that return different values under different circumstances, and maybe fewer .makeReadable() calls needed.\n\n\n// 3 bits of flags reserved for internal use\nconst PACKET_DEBUG = exports.PACKET_DEBUG = 1<<0;\nconst PACKET_RESERVED1 = exports.PACKET_RESERVED1 = 1<<1;\nconst PACKET_RESERVED2 = exports.PACKET_RESERVED2 = 1<<2;\nconst FLAG_PACKET_INTERNAL = PACKET_DEBUG | PACKET_RESERVED1 | PACKET_RESERVED2;\n\n// Internal, runtime-only (not serialized) flags < 8 bits\nconst PACKET_UNOWNED_BUFFER = 1 << 8;\n\nexports.default_flags = 0;\n\nconst assert = require('assert');\nconst { max } = Math;\nconst { isInteger, log2 } = require('../common/util.js');\n// const { isInteger, log2 } = require('../../build.dev/common/util.js');\nconst { base64Encode, base64Decode } = require('../common/base64.js');\n\nconst FALSYS = [undefined, null, 0, false, '', NaN];\nconst PAK_BUF_DEFAULT_SIZE = 1024;\n\nconst UNDERRUN = 'PKTERR_UNDERRUN';\n\nconst POOL_PACKETS = 5000;\nconst POOL_TIMEOUT = 5000;\nconst POOL_BUF_BY_SIZE = [\n  0, // 2^0 : 1 - shouldn't be allocated ever?\n  10, // 2^1 : 2\n  10, // 2^2 : 4\n  20, // 2^3 : 8\n  20, // 2^4 : 16\n  20, // 2^5 : 32\n  20, // 2^6 : 64\n  20, // 2^7 : 128\n  20, // 2^8 : 256\n  20, // 2^9 : 512\n  5000, // 2^10 : 1024 - standard Packet size\n  20, // 2^11 : 2048\n  20, // 2^12 : 4096\n  20, // 2^13 : 8192\n  20, // 2^14 : 16384\n  20, // 2^15 : 32768\n  20, // 2^16 : 65536\n  10, // 2^17 : 131072\n  10, // 2^18 : 262144,\n];\n\nlet pak_pool = [];\nlet pak_debug_pool = [];\nlet buf_pool = POOL_BUF_BY_SIZE.map(() => []);\n\nfunction allocDataView(size) {\n  let pool_idx = log2(size);\n  assert(pool_idx);\n  if (pool_idx >= buf_pool.length) {\n    pool_idx = 0;\n  }\n  if (pool_idx) {\n    size = 1 << pool_idx;\n    if (buf_pool[pool_idx].length) {\n      // No reinit here, just a container\n      //console.log(`Buffer FROMPOOL:${size}/${pool_idx}`);\n      return buf_pool[pool_idx].pop();\n    }\n  } else {\n    // Enable this (and lower pool size) to track down big packets:\n    // console.log(`Allocating UNPOOLABLE buffer of size ${size} from ${new Error().stack}`);\n  }\n  //console.log(`Buffer ALLOC:${size}`);\n  let u8 = new Uint8Array(size);\n  let dv = new DataView(u8.buffer);\n  dv.u8 = u8;\n  if (pool_idx) {\n    dv.packet_pool_idx = pool_idx;\n  }\n  return dv;\n}\n\nfunction wrapU8AsDataView(u8) {\n  let dv = new DataView(u8.buffer, u8.byteOffset, u8.byteLength);\n  dv.u8 = u8;\n  return dv;\n}\n\nfunction utf8ByteLength(str) {\n  let len = str.length;\n  let ret = len;\n  for (let ii = 0; ii < len; ++ii) {\n    let c = str.charCodeAt(ii);\n    if (c > 0x7F) {\n      ++ret;\n      if (c > 0x07FF) {\n        ++ret;\n        if (c > 0xFFFF) {\n          ++ret;\n          if (c > 0x1FFFFF) {\n            ++ret;\n            if (c > 0x3FFFFFF) {\n              ++ret;\n            }\n          }\n        }\n      }\n    }\n  }\n  return ret;\n}\n\n// Assumes buffer will fit it\nfunction utf8WriteChar(buf, buf_offs, c) {\n  if (c <= 0x7F) {\n    buf.u8[buf_offs++] = c;\n  } else if (c <= 0x07FF) {\n    buf.u8[buf_offs++] = (c >> 6) | 0xC0;\n    buf.u8[buf_offs++] = (c & 0x3F) | 0x80;\n  } else if (c <= 0xFFFF) {\n    buf.u8[buf_offs++] = (c >> 12) | 0xE0;\n    buf.u8[buf_offs++] = ((c >> 6) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = (c & 0x3F) | 0x80;\n  } else if (c <= 0x1FFFFF) {\n    buf.u8[buf_offs++] = (c >> 18) | 0xF0;\n    buf.u8[buf_offs++] = ((c >> 12) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 6) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = (c & 0x3F) | 0x80;\n  } else if (c <= 0x3FFFFFF) {\n    buf.u8[buf_offs++] = (c >> 24) | 0xF8;\n    buf.u8[buf_offs++] = ((c >> 18) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 12) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 6) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = (c & 0x3F) | 0x80;\n  } else if (c <= 0x7FFFFFFF) {\n    buf.u8[buf_offs++] = (c >> 30) | 0xFC;\n    buf.u8[buf_offs++] = ((c >> 24) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 18) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 12) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = ((c >> 6) & 0x3F) | 0x80;\n    buf.u8[buf_offs++] = (c & 0x3F) | 0x80;\n  }\n  return buf_offs;\n}\n\nfunction poolBuf(dv) {\n  // if it's poolable (not part of another Buffer), pool it!\n  assert(dv);\n  assert(dv.u8);\n  let pool_idx = dv.packet_pool_idx;\n  if (pool_idx) {\n    let arr = buf_pool[pool_idx];\n    if (arr.length < POOL_BUF_BY_SIZE[pool_idx]) {\n      //console.log(`Buffer TOPOOL:${dv.byteLength}/${pool_idx}`);\n      arr.push(dv);\n    }\n  } else {\n    // console.log(`Buffer UNPOOLABLE:${dv.byteLength}`);\n  }\n}\n\nexport function packetBufPoolAlloc(size) {\n  return allocDataView(size);\n}\nexport function packetBufPoolFree(dv) {\n  poolBuf(dv);\n}\n\nfunction Packet(flags, init_size, pak_debug) {\n  this.reinit(flags, init_size, pak_debug);\n}\nPacket.prototype.reinit = function (flags, init_size, pak_debug) {\n  this.flags = flags || 0;\n  this.has_flags = false;\n  this.buf = null;\n  this.buf_len = 0;\n  this.buf_offs = 0;\n  this.bufs = null;\n  this.bsizes = null;\n  this.readable = false;\n  this.ref_count = 1;\n  this.pak_debug = pak_debug;\n  if (init_size) {\n    this.fit(init_size, true);\n    this.buf_len = init_size;\n  }\n};\nPacket.prototype.ref = function () {\n  ++this.ref_count;\n};\nPacket.prototype.pool = function () {\n  assert(this.ref_count);\n  if (--this.ref_count) {\n    return;\n  }\n  // Do not clear on pool(), callers (readInt()) may still momentarily reference .buf, etc\n  if (this.flags & PACKET_UNOWNED_BUFFER) {\n    // doing nothing with buffers, still pooling the packet\n  } else {\n    if (this.buf) {\n      poolBuf(this.buf);\n    }\n    if (this.bufs) {\n      for (let ii = 0; ii < this.bufs.length; ++ii) {\n        poolBuf(this.bufs[ii]);\n      }\n    }\n  }\n  if (pak_pool.length < POOL_PACKETS) {\n    pak_pool.push(this);\n  }\n  if (this.pak_debug) {\n    this.pak_debug.poolDebug();\n  }\n};\n\nPacket.prototype.totalSize = function () {\n  let ret = 0;\n  if (this.readable) {\n    return this.buf_len;\n  }\n  if (this.bsizes) {\n    for (let ii = 0; ii < this.bsizes.length; ++ii) {\n      ret += this.bsizes[ii];\n    }\n  }\n  ret += this.buf_offs;\n  return ret;\n};\n\nPacket.prototype.setReadable = function () {\n  assert(this.buf);\n  assert(!this.bufs);\n  assert(!this.readable);\n  this.readable = true;\n};\n\nPacket.prototype.makeReadable = function () {\n  assert(this.buf);\n  assert(!this.readable); // otherwise just reset offset? or do nothing?\n  let total = this.totalSize(); // before this.readable = true\n  this.readable = true;\n  if (!this.bufs) {\n    this.buf_len = total;\n    this.buf_offs = 0;\n    return;\n  }\n  let buf = allocDataView(total);\n  let u8 = buf.u8;\n  let offs = 0;\n  for (let ii = 0; ii < this.bufs.length; ++ii) {\n    let bsize = this.bsizes[ii];\n    let dv = this.bufs[ii];\n    if (offs + bsize > total) {\n      // unused portion would overrun\n      assert.equal(dv.byteOffset, 0);\n      u8.set(new Uint8Array(dv.buffer, 0, bsize), offs);\n    } else {\n      u8.set(dv.u8, offs);\n    }\n    offs += bsize;\n    poolBuf(dv);\n  }\n  assert.equal(this.buf.byteOffset, 0); // Would handle it, but should never happen here, these are our pooled buffers?\n  u8.set(new Uint8Array(this.buf.buffer, this.buf.byteOffset, this.buf_offs), offs);\n  poolBuf(this.buf);\n  assert.equal(offs + this.buf_offs, total);\n  this.bufs = this.bsizes = null;\n  this.buf = buf;\n  this.buf_offs = 0;\n  this.buf_len = total; // buffer is actually buf.buffer.byteLength, but we can't read past `total`\n};\n\nPacket.prototype.flush = function () {\n  let { buf, buf_offs } = this;\n  if (!this.bufs) {\n    this.bufs = [buf];\n    this.bsizes = [buf_offs];\n  } else {\n    this.bufs.push(buf);\n    this.bsizes.push(buf_offs);\n  }\n  this.buf = null;\n  this.buf_len = 0;\n  this.buf_offs = 0;\n};\nPacket.prototype.fit = function (extra_bytes, no_advance) {\n  let { buf, buf_len, buf_offs } = this;\n  let new_offs = buf_offs + extra_bytes;\n  if (new_offs <= buf_len) {\n    if (!no_advance) {\n      this.buf_offs = new_offs;\n    }\n    return buf_offs;\n  }\n  assert(!this.readable); // Shouldn't happen on concatenated buffers\n  if (buf) {\n    this.flush();\n  }\n  this.buf_len = buf_len = max(PAK_BUF_DEFAULT_SIZE, extra_bytes);\n  this.buf = allocDataView(buf_len);\n  this.buf_offs = no_advance ? 0 : extra_bytes;\n  return 0;\n};\nPacket.prototype.advance = function (bytes) {\n  let offs = this.buf_offs;\n  let new_offs = offs + bytes;\n  this.buf_offs = new_offs;\n  if (new_offs > this.buf_len) {\n    throw new Error(UNDERRUN);\n  }\n  if (new_offs === this.buf_len) {\n    this.pool();\n  }\n  return offs;\n};\nPacket.prototype.ended = function () {\n  return this.buf_offs === this.buf_len;\n};\n\n// low-level write/read functions\nPacket.prototype.writeU8 = function (v) {\n  assert(v >= 0 && v < 256);\n  let offs = this.fit(1);\n  this.buf.u8[offs] = v;\n};\nPacket.prototype.readU8 = function () {\n  return this.buf.u8[this.advance(1)];\n};\n// Packed int, first byte:\n// 0-247 byte\n// 248 positive 16-bit\n// 249 negative 16-bit\n// 250 positive 32-bit\n// 251 negative 32-bit\n// 252 positive 64-bit\n// 253 negative 64-bit\n// 254 unused\n// 255 negative byte\nPacket.prototype.writeInt = function (v) {\n  assert(isInteger(v));\n  let offs = this.fit(9, true); // 9 is max size of a packed int\n  let buf = this.buf;\n  let neg = (v < 0) ? 1 : 0;\n  if (neg) {\n    v = -v;\n  }\n  if (v < 248) { // || neg && v < 256 would also decode right\n    if (neg) {\n      buf.u8[offs++] = 255;\n    }\n    buf.u8[offs++] = v;\n  } else {\n    if (v < 65536) {\n      buf.u8[offs++] = 248 + neg;\n      buf.setUint16(offs, v, true);\n      offs += 2;\n    } else if (v < 4294967296) {\n      buf.u8[offs++] = 250 + neg;\n      buf.setUint32(offs, v, true);\n      offs += 4;\n    } else {\n      buf.u8[offs++] = 252 + neg;\n      let low_bits = v >>> 0;\n      buf.setUint32(offs, low_bits, true);\n      offs += 4;\n      buf.setUint32(offs, (v - low_bits) / 4294967296, true);\n      offs += 4;\n    }\n  }\n  this.buf_offs = offs;\n};\nPacket.prototype.zeroInt = function () {\n  // Overwrite an existing int with a zero, keeping the same packed size\n  let b1 = this.buf.u8[this.buf_offs];\n  if (b1 < 248) {\n    this.buf.u8[this.buf_offs++] = 0;\n    return;\n  }\n  // Otherwise, leave header bit\n  this.buf_offs++;\n  let zeroes = 1;\n  switch (b1) {\n    case 253:\n    case 252: // 8\n      zeroes += 4;\n    case 251:  // eslint-disable-line no-fallthrough\n    case 250: // 4\n      zeroes += 2;\n    case 249:  // eslint-disable-line no-fallthrough\n    case 248: // 2\n      zeroes++;\n    case 255:  // eslint-disable-line no-fallthrough\n      // 1\n      break;\n    default:\n      throw new Error('PKTERR_PACKED_INT');\n  }\n  while (zeroes) {\n    --zeroes;\n    this.buf.u8[this.buf_offs++] = 0;\n  }\n};\nPacket.prototype.readInt = function () {\n  let b1 = this.buf.u8[this.advance(1)];\n  if (b1 < 248) {\n    return b1;\n  }\n  let sign = 1;\n  switch (b1) {\n    case 249:\n      sign = -1;\n    case 248: // eslint-disable-line no-fallthrough\n      return sign * this.buf.getUint16(this.advance(2), true);\n    case 251:\n      sign = -1;\n    case 250: // eslint-disable-line no-fallthrough\n      return sign * this.buf.getUint32(this.advance(4), true);\n    case 253:\n      sign = -1;\n    case 252: { // eslint-disable-line no-fallthrough\n      let low_bits = this.buf.getUint32(this.advance(4), true);\n      let high_bits = this.buf.getUint32(this.advance(4), true);\n      return sign * (high_bits * 4294967296 + low_bits);\n    }\n    case 255:\n      return -this.buf.u8[this.advance(1)];\n    default:\n      throw new Error('PKTERR_PACKED_INT');\n  }\n};\nPacket.prototype.writeFloat = function (v) {\n  assert.equal(typeof v, 'number');\n  if (!v) {\n    this.buf.u8[this.fit(1)] = 0;\n    return;\n  }\n  let offs = this.fit(5, true);\n  this.buf.setFloat32(offs, v, true);\n  if (this.buf.u8[offs] <= 1) { // escape a 0 or 1 in the first byte\n    this.buf.u8[offs++] = 1;\n    this.buf.setFloat32(offs, v, true);\n  }\n  this.buf_offs = offs + 4;\n};\nPacket.prototype.readFloat = function () {\n  let offs = this.advance(1);\n  let b1 = this.buf.u8[offs];\n  if (!b1) {\n    return 0;\n  }\n  if (b1 === 1) {\n    return this.buf.getFloat32(this.advance(4), true);\n  }\n  this.advance(3);\n  return this.buf.getFloat32(offs, true);\n};\nPacket.prototype.writeU32 = function (v) {\n  assert.equal(typeof v, 'number');\n  this.buf.setUint32(this.fit(4), v, true);\n};\nPacket.prototype.readU32 = function () {\n  return this.buf.getUint32(this.advance(4), true);\n};\nPacket.prototype.writeString = function (v) {\n  assert.equal(typeof v, 'string'); // Could maybe do a toString() here if not\n  let byte_length = utf8ByteLength(v);\n  this.writeInt(byte_length); // Just 1 byte for small strings\n  if (!byte_length) {\n    return;\n  }\n  let offs = this.fit(byte_length);\n  let buf = this.buf;\n  for (let ii = 0; ii < v.length; ++ii) {\n    let c = v.charCodeAt(ii);\n    if (c <= 0x7F) {\n      buf.u8[offs++] = c;\n    } else {\n      offs = utf8WriteChar(buf, offs, c);\n    }\n  }\n};\n// Only called on multi-byte characters; Supplied the first byte for efficiency\nPacket.prototype.utf8ReadChar = function (c) {\n  let buf = this.buf;\n  if (c >= 0xC0 && c < 0xE0) {\n    return ((c & 0x1F) << 6) |\n      (buf.u8[this.buf_offs++] & 0x3F);\n  } else if (c >= 0xE0 && c < 0xF0) {\n    return ((c & 0x0F) << 12) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 6) |\n      (buf.u8[this.buf_offs++] & 0x3F);\n  } else if (c >= 0xF0 && c < 0xF8) {\n    return ((c & 0x0F) << 18) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 12) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 6) |\n      (buf.u8[this.buf_offs++] & 0x3F);\n  } else if (c >= 0xF8 && c < 0xFC) {\n    return ((c & 0x0F) << 24) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 18) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 12) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 6) |\n      (buf.u8[this.buf_offs++] & 0x3F);\n  } else { //if (c >= 0xFC) {\n    return ((c & 0x0F) << 30) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 24) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 18) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 12) |\n      ((buf.u8[this.buf_offs++] & 0x3F) << 6) |\n      (buf.u8[this.buf_offs++] & 0x3F);\n  }\n};\n\nlet string_assembly = [];\nPacket.prototype.readString = function () {\n  let byte_length = this.readInt();\n  if (!byte_length) {\n    return '';\n  }\n  if (this.buf_offs + byte_length > this.buf_len) {\n    throw new Error(UNDERRUN);\n  }\n\n  let { buf } = this;\n  let end_offset = this.buf_offs + byte_length;\n  let ret;\n  if (byte_length > 8192) {\n    ret = '';\n    while (this.buf_offs < end_offset) {\n      let c = buf.u8[this.buf_offs++];\n      if (c > 0x7F) {\n        c = this.utf8ReadChar(c);\n      }\n      ret += String.fromCharCode(c);\n    }\n  } else {\n    string_assembly.length = byte_length;\n    let ii = 0;\n    while (this.buf_offs < end_offset) {\n      let c = buf.u8[this.buf_offs++];\n      if (c > 0x7F) {\n        c = this.utf8ReadChar(c);\n      }\n      string_assembly[ii++] = c;\n    }\n    if (string_assembly.length !== ii) {\n      // truncate if multi-byte UTF8 produced single characters\n      string_assembly.length = ii;\n    }\n    ret = String.fromCharCode.apply(undefined, string_assembly);\n  }\n  if (this.buf_offs === this.buf_len) {\n    this.pool();\n  }\n  return ret;\n};\n// Much more efficient than writeString if the input is known to be ANSI-ish (all characters <= 255)\nPacket.prototype.writeAnsiString = function (v) {\n  assert.equal(typeof v, 'string'); // Could maybe do a toString() here if not\n  let byte_length = v.length;\n  this.writeInt(byte_length);\n  let offs = this.fit(byte_length);\n  let { buf } = this;\n  for (let ii = 0; ii < byte_length; ++ii) {\n    buf.u8[offs++] = v.charCodeAt(ii);\n  }\n};\nPacket.prototype.readAnsiString = function () {\n  let len = this.readInt();\n  let offs = this.advance(len);\n  let { buf } = this;\n  string_assembly.length = len;\n  for (let ii = 0; ii < len; ++ii) {\n    string_assembly[ii] = buf.u8[offs++];\n  }\n  return String.fromCharCode.apply(undefined, string_assembly);\n};\n\n// high-level write/read functions\nPacket.prototype.writeJSON = function (v) {\n  if (!v) {\n    let idx = FALSYS.indexOf(v);\n    assert(idx !== -1);\n    this.writeU8(idx + 1);\n    return;\n  }\n  this.writeU8(0);\n  this.writeString(JSON.stringify(v));\n};\nPacket.prototype.readJSON = function () {\n  let byte = this.readU8();\n  if (byte) {\n    if (byte - 1 >= FALSYS.length) {\n      throw new Error('PKTERR_JSON_HEADER');\n    }\n    return FALSYS[byte - 1];\n  }\n  let str = this.readString();\n  return JSON.parse(str);\n};\n// Uint8Array or Buffer object?\nPacket.prototype.writeBuffer = function (v) {\n  this.writeInt(v.length);\n  if (v.length) {\n    let offs = this.fit(v.length);\n    this.buf.u8.set(v, offs);\n  }\n};\nconst null_buf = new Uint8Array(0);\nPacket.prototype.readBuffer = function (do_copy) {\n  let len = this.readInt();\n  if (!len) {\n    return null_buf;\n  }\n  let offs = this.advance(len);\n  if (do_copy) {\n    return this.buf.u8.slice(offs, len);\n  } else {\n    let { buf } = this;\n    return new Uint8Array(buf.buffer, buf.byteOffset + offs, len);\n  }\n};\nPacket.prototype.writeBool = function (v) {\n  this.writeU8(v?1:0);\n};\nPacket.prototype.readBool = function () {\n  return Boolean(this.readU8());\n};\n\nPacket.prototype.append = function (pak) {\n  assert.equal(this.flags & FLAG_PACKET_INTERNAL, pak.flags & FLAG_PACKET_INTERNAL);\n  if (pak.bufs) {\n    for (let ii = 0; ii < pak.bufs.length; ++ii) {\n      let buf = pak.bufs[ii];\n      let bsize = pak.bsizes[ii];\n      let offs = this.fit(bsize);\n      if (bsize !== buf.byteLength) {\n        this.buf.u8.set(new Uint8Array(buf.buffer, buf.byteOffset, bsize), offs);\n      } else {\n        this.buf.u8.set(buf.u8, offs);\n      }\n    }\n  }\n  if (pak.buf) {\n    let buf = pak.buf;\n    let bsize = pak.readable ? pak.buf_len : pak.buf_offs;\n    let offs = this.fit(bsize);\n    if (bsize !== buf.byteLength) {\n      this.buf.u8.set(new Uint8Array(buf.buffer, buf.byteOffset, bsize), offs);\n    } else {\n      this.buf.u8.set(buf.u8, offs);\n    }\n  }\n};\n\nPacket.prototype.appendRemaining = function (pak) {\n  assert.equal(this.flags & FLAG_PACKET_INTERNAL, pak.flags & FLAG_PACKET_INTERNAL);\n  assert(pak.readable);\n  assert(!pak.bufs);\n  assert(pak.buf);\n  assert(pak.buf_offs <= pak.buf_len);\n  let bsize = pak.buf_len - pak.buf_offs;\n  if (bsize) {\n    let offs = this.fit(bsize);\n    this.buf.u8.set(new Uint8Array(pak.buf.buffer, pak.buf.byteOffset + pak.buf_offs, bsize), offs);\n  }\n  // everything consumed, pool it\n  pak.pool();\n};\n\nPacket.prototype.toJSON = function () {\n  let ret = {\n    f: this.flags,\n  };\n\n  if (this.bufs) {\n    ret.b = [];\n    for (let ii = 0; ii < this.bufs.length; ++ii) {\n      ret.b.push(base64Encode(this.bufs[ii], 0, this.bsizes[ii]));\n    }\n  }\n  if (this.buf) {\n    if (this.readable) {\n      ret.d = base64Encode(this.buf, 0, this.buf_len);\n    } else {\n      ret.d = base64Encode(this.buf, 0, this.buf_offs);\n    }\n  }\n  return ret;\n};\n\nPacket.prototype.setBuffer = function (buf, buf_len) {\n  assert(!this.buf);\n  assert(!this.bufs);\n  assert(this.flags & PACKET_UNOWNED_BUFFER); // Probably okay if not?\n  assert(buf instanceof Uint8Array);\n  this.buf = wrapU8AsDataView(buf);\n  this.buf_len = buf_len;\n  this.readable = true;\n};\n\nPacket.prototype.getBuffer = function () {\n  assert(this.buf);\n  assert(!this.bufs);\n  return this.buf.u8;\n};\n\nPacket.prototype.getBufferLen = function () {\n  assert(this.buf);\n  assert(!this.bufs);\n  return this.readable ? this.buf_len : this.buf_offs;\n};\n\nPacket.prototype.getOffset = function () {\n  if (this.readable) {\n    return this.buf_offs;\n  }\n  return this.totalSize();\n};\n\nPacket.prototype.seek = function (pos) {\n  assert(this.readable); // .makeReadable should be called so that it is a single buffer\n  assert(pos >= 0 && pos <= this.buf_len);\n  this.buf_offs = pos;\n};\n\nPacket.prototype.writeFlags = function () {\n  assert(!this.has_flags);\n  assert.equal(this.buf_offs, 0);\n  this.writeU8(this.flags);\n  this.has_flags = true;\n};\n\nPacket.prototype.updateFlags = function (flags) {\n  assert(this.has_flags);\n  assert(!(flags & FLAG_PACKET_INTERNAL));\n  this.flags = this.flags & FLAG_PACKET_INTERNAL | flags;\n  let buf = this.bufs ? this.bufs[0] : this.buf;\n  buf.u8[0] = this.flags;\n};\n\nPacket.prototype.readFlags = function () {\n  let read = this.readU8();\n  assert.equal(read, this.flags & 0xFF);\n  this.has_flags = true;\n  return this.flags;\n};\n\nPacket.prototype.getFlags = function () {\n  return this.flags;\n};\n\nPacket.prototype.getInternalFlags = function () {\n  return this.flags & FLAG_PACKET_INTERNAL;\n};\n\nfunction PacketDebug(flags, init_size) {\n  this.reinit(flags, init_size);\n}\nPacketDebug.prototype.reinit = function (flags, init_size) {\n  this.in_pool = false;\n  if (pak_pool.length) {\n    this.pak = pak_pool.pop();\n    this.pak.reinit(flags, init_size, this);\n  } else {\n    this.pak = new Packet(flags, init_size, this);\n  }\n  this.warned = false;\n  this.pool_timer = setTimeout(() => {\n    console.warn(`Packet not pooled after 5s: ${this.contents()}`);\n    this.warned = true;\n  }, POOL_TIMEOUT);\n};\nPacketDebug.prototype.poolDebug = function () {\n  if (this.warned) {\n    console.warn('Packet pooled after timeout');\n  } else {\n    clearTimeout(this.pool_timer);\n  }\n  assert(!this.in_pool);\n  this.in_pool = true; // Set this, as if pooled, even if discarded\n  if (pak_debug_pool.length < POOL_PACKETS) {\n    pak_debug_pool.push(this);\n  }\n};\nconst types = [null, 'U8', 'U32', 'Int', 'Float', 'String', 'AnsiString', 'JSON', 'Bool', 'Buffer'];\n// Functions (types) that read and write a debug byte\ntypes.forEach((type, idx) => {\n  if (!type) { // don't use debug ID 0\n    return;\n  }\n  let write = `write${type}`;\n  let read = `read${type}`;\n  let write_fn = Packet.prototype[write];\n  let read_fn = Packet.prototype[read];\n  PacketDebug.prototype[write] = function (v) {\n    this.pak.writeU8(idx);\n    write_fn.call(this.pak, v);\n  };\n  PacketDebug.prototype[read] = function (param) {\n    let found_idx = this.pak.readU8();\n    if (found_idx !== idx) {\n      assert(false, `PacketDebug error: Expected ${type}(${idx}), found ${types[found_idx]}(${found_idx})`);\n    }\n    return read_fn.call(this.pak, param);\n  };\n});\nPacketDebug.prototype.zeroInt = function () {\n  this.pak.writeU8(3); // types.indexof('Int')\n  this.pak.zeroInt();\n};\n// Functions that simply fall through\n[\n  'ended',\n  'getBuffer',\n  'getBufferLen',\n  'getFlags',\n  'getInternalFlags',\n  'getOffset',\n  'makeReadable',\n  'pool',\n  'readFlags', // *not* wrapped in debug headers\n  'ref',\n  'seek',\n  'setBuffer',\n  'setReadable',\n  'toJSON',\n  'totalSize',\n  'updateFlags',\n  'writeFlags', // *not* wrapped in debug headers\n].forEach((fname) => {\n  let fn = Packet.prototype[fname];\n  PacketDebug.prototype[fname] = function () {\n    return fn.apply(this.pak, arguments); // eslint-disable-line prefer-rest-params\n  };\n});\nPacketDebug.prototype.append = function (pak) {\n  assert(pak instanceof PacketDebug);\n  this.pak.append(pak.pak);\n};\nPacketDebug.prototype.appendRemaining = function (pak) {\n  assert(pak instanceof PacketDebug);\n  this.pak.appendRemaining(pak.pak);\n};\nfunction format(v) {\n  switch (typeof v) {\n    case 'object':\n      return JSON.stringify(v);\n    default:\n      return v;\n  }\n}\nPacketDebug.prototype.contents = function () {\n  let { pak } = this;\n  let cur_offs = pak.getOffset();\n  let read_len = cur_offs;\n  let ret = [`buf:${pak.buf_offs}/${pak.buf_len}`];\n  if (pak.bufs) {\n    // write packet, just combine and reset location when done\n    pak.makeReadable();\n    ret.push('bufs');\n  } else {\n    // read packet, or write packet that is a single buf\n    if (pak.readable) {\n      read_len = pak.buf_len;\n    }\n    assert(pak.buf);\n    pak.buf_offs = 0;\n  }\n  let saved_ref_count = pak.ref_count;\n  pak.ref(); // prevent auto pooling\n  try {\n    if (pak.has_flags) {\n      ret.push(`flags:${pak.readU8()}`);\n    }\n    while (pak.buf_offs < read_len) {\n      let type_idx = pak.readU8();\n      let type = types[type_idx];\n      if (!type) {\n        ret.push(`UnknownType:${type_idx}`);\n        break;\n      }\n      let val = pak[`read${type}`]();\n      ret.push(`${type}:${format(val)}`);\n    }\n  } catch (e) {\n    ret.push(`Error dumping packet contents: ${e}`);\n  }\n  pak.ref_count = saved_ref_count;\n  pak.buf_offs = cur_offs;\n  return ret.join(',');\n};\n\nfunction packetCreate(flags, init_size) {\n  if (flags === undefined) {\n    flags = exports.default_flags;\n  }\n  let pool = (flags & PACKET_DEBUG) ? pak_debug_pool : pak_pool;\n  if (pool.length) {\n    let pak = pool.pop();\n    pak.reinit(flags, init_size);\n    return pak;\n  }\n  if (flags & PACKET_DEBUG) {\n    return new PacketDebug(flags, init_size);\n  }\n  return new Packet(flags, init_size);\n}\nexports.packetCreate = packetCreate;\n\nfunction packetFromBuffer(buf, buf_len, need_copy) {\n  let flags = buf[0];\n  assert.equal(typeof flags, 'number'); // `buf` should be a Buffer or Uint8Array, not a DataView like other funcs here\n  if (need_copy) {\n    assert(buf_len);\n    assert(buf.buffer instanceof ArrayBuffer);\n    let pak = packetCreate(flags, buf_len);\n    if (buf.byteLength !== buf_len) {\n      buf = Buffer.from(buf.buffer, 0, buf_len);\n    }\n    pak.getBuffer().set(buf);\n    pak.setReadable();\n    return pak;\n  } else {\n    // reference unowned/unpoolable buffer\n    assert(buf instanceof Uint8Array);\n    let pak = packetCreate(flags | PACKET_UNOWNED_BUFFER);\n    pak.setBuffer(buf, buf_len || buf.byteLength);\n    return pak;\n  }\n}\nexports.packetFromBuffer = packetFromBuffer;\n\nfunction packetFromJSON(js_obj) {\n  let pak = packetCreate(js_obj.f);\n\n  let payload = pak.pak || pak;\n\n  function decode(str) {\n    return base64Decode(str, allocDataView);\n  }\n  if (js_obj.b) {\n    payload.bsizes = [];\n    payload.bufs = [];\n    for (let ii = 0; ii < js_obj.b.length; ++ii) {\n      let buf = decode(js_obj.b[ii]);\n      payload.bufs.push(buf);\n      payload.bsizes.push(buf.decode_size);\n      delete buf.decode_size;\n    }\n  }\n  if (js_obj.d) {\n    payload.buf = decode(js_obj.d);\n    payload.buf_len = payload.buf.decode_size;\n    delete payload.buf.decode_size;\n    payload.buf_offs = 0;\n  }\n\n  return pak;\n}\nexports.packetFromJSON = packetFromJSON;\n\nfunction isPacket(thing) {\n  return thing instanceof Packet || thing instanceof PacketDebug;\n}\nexports.isPacket = isPacket;\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint prefer-rest-params:off, no-underscore-dangle:off */\n\nconst assert = require('assert');\n\nfunction EventEmitter() {\n  this._listeners = {};\n}\n\nmodule.exports = EventEmitter;\nmodule.exports.EventEmitter = EventEmitter;\n\nfunction addListener(ee, type, fn, once) {\n  assert(typeof fn === 'function');\n  let arr = ee._listeners[type];\n  if (!arr) {\n    arr = ee._listeners[type] = [];\n  }\n  arr.push({\n    once,\n    fn,\n  });\n}\n\nEventEmitter.prototype.hasListener = function (type, fn) {\n  let arr = this._listeners[type];\n  if (!arr) {\n    return false;\n  }\n  for (let ii = 0; ii < arr.length; ++ii) {\n    if (arr[ii].fn === fn) {\n      return true;\n    }\n  }\n  return false;\n};\n\nEventEmitter.prototype.on = function (type, fn) {\n  addListener(this, type, fn, 0);\n  return this;\n};\n\nEventEmitter.prototype.once = function (type, fn) {\n  addListener(this, type, fn, 1);\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function (type, fn) {\n  let arr = this._listeners[type];\n  assert(arr);\n  for (let ii = 0; ii < arr.length; ++ii) {\n    if (arr[ii].fn === fn) {\n      arr.splice(ii, 1);\n      return this;\n    }\n  }\n  assert(false); // expected to find the listener!\n  return this;\n};\n\nfunction filterNotOnce(elem) {\n  return !elem.once;\n}\n\nEventEmitter.prototype.emit = function (type, ...args) {\n  let arr = this._listeners[type];\n  if (!arr) {\n    return false;\n  }\n\n  let any = false;\n  let any_once = false;\n  for (let ii = 0; ii < arr.length; ++ii) {\n    let elem = arr[ii];\n    any = true;\n    elem.fn(...args);\n    if (elem.once) {\n      any_once = true;\n    }\n  }\n  if (any_once) {\n    this._listeners[type] = arr.filter(filterNotOnce);\n  }\n\n  return any;\n};\n\n// Aliases\n// EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst assert = require('assert');\nconst { abs, floor, min, max, random, round, pow, sqrt } = Math;\n\nexport function nop() {\n  // empty\n}\n\nexport function empty(obj) {\n  for (let key in obj) {\n    return false;\n  }\n  return true;\n}\n\nexport function easeInOut(v, a) {\n  let va = pow(v, a);\n  return va / (va + pow(1 - v, a));\n}\n\nexport function easeIn(v, a) {\n  return 2 * easeInOut(0.5 * v, a);\n}\n\nexport function easeOut(v, a) {\n  return 2 * easeInOut(0.5 + 0.5 * v, a) - 1;\n}\n\nexport function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function merge(dest, src) {\n  for (let f in src) {\n    dest[f] = src[f];\n  }\n  return dest;\n}\n\nexport function has(obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field);\n}\n\nexport function defaults(dest, src) {\n  for (let f in src) {\n    if (!has(dest, f)) {\n      dest[f] = src[f];\n    }\n  }\n  return dest;\n}\n\nexport function defaultsDeep(dest, src) {\n  for (let f in src) {\n    if (!has(dest, f)) {\n      dest[f] = src[f];\n    } else if (typeof dest[f] === 'object') {\n      defaultsDeep(dest[f], src[f]);\n    }\n  }\n  return dest;\n}\n\nexport function cloneShallow(src) {\n  return merge({}, src);\n}\n\nexport function deepEqual(a, b) {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let ii = 0; ii < a.length; ++ii) {\n      if (!deepEqual(a[ii], b[ii])) {\n        return false;\n      }\n    }\n    return true;\n  } else if (typeof a === 'object') {\n    if (typeof b !== 'object') {\n      return false;\n    }\n    if (!a || !b) { // at least one is null\n      return !a && !b; // equal if both are null\n    }\n    for (let key in a) {\n      // b must have key, or both a[key] and b[key] are undefined\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    for (let key in b) {\n      // if b has key and it's defined, a must also be defined (and would have checked equality above)\n      if (b[key] !== undefined && a[key] === undefined) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a === b;\n}\n\nexport function clamp(v, mn, mx) {\n  return min(max(mn, v), mx);\n}\n\nexport function lerp(a, v0, v1) {\n  return (1 - a) * v0 + a * v1;\n}\n\nexport function mix(v0, v1, a) { // GLSL semantics\n  return (1 - a) * v0 + a * v1;\n}\n\nexport function sign(a) {\n  return a < 0 ? -1 : a > 0 ? 1 : 0;\n}\n\n// log2 rounded up to nearest integer\nexport function log2(val) {\n  for (let ii=1, jj=0; ; ii <<= 1, ++jj) { // eslint-disable-line no-bitwise\n    if (ii >= val) {\n      return jj;\n    }\n  }\n}\n\nexport function ridx(arr, idx) {\n  arr[idx] = arr[arr.length - 1];\n  arr.pop();\n}\n\nexport function round100(a) {\n  return round(a * 100) / 100;\n}\n\nexport function round1000(a) {\n  return round(a * 1000) / 1000;\n}\n\nexport function fract(a) {\n  return a - floor(a);\n}\n\nexport function nearSame(a, b, tol) {\n  return abs(b - a) <= tol;\n}\n\nexport function titleCase(str) {\n  return str.split(' ').map((word) => `${word[0].toUpperCase()}${word.slice(1)}`)\n    .join(' ');\n}\n\nconst EPSILON = 0.00001;\n\n// http://local.wasp.uwa.edu.au/~pbourke/geometry/sphereline/\nexport function lineCircleIntersect(p1, p2, pCircle, radius) {\n  let dp = [\n    p2[0] - p1[0],\n    p2[1] - p1[1]\n  ];\n  let a = dp[0] * dp[0] + dp[1] * dp[1];\n  let b = 2 * (dp[0] * (p1[0] - pCircle[0]) + dp[1] * (p1[1] - pCircle[1]));\n  let c = pCircle[0] * pCircle[0] + pCircle[1] * pCircle[1];\n  c += p1[0] * p1[0] + p1[1] * p1[1];\n  c -= 2 * (pCircle[0] * p1[0] + pCircle[1] * p1[1]);\n  c -= radius * radius;\n  let bb4ac = b * b - 4 * a * c;\n  if (abs(a) < EPSILON || bb4ac < 0) {\n    return false;\n  }\n\n  let mu1 = (-b + sqrt(bb4ac)) / (2 * a);\n  let mu2 = (-b - sqrt(bb4ac)) / (2 * a);\n  if (mu1 >= 0 && mu1 <= 1 || mu2 >= 0 && mu2 <= 1) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function inherits(ctor, superCtor) {\n  // From Node.js\n  assert(typeof superCtor === 'function');\n  // not needed? ctor.super_ = superCtor; // eslint-disable-line no-underscore-dangle\n  // second parameter also not actually needed, just defines new Foo().constructor === Foo?\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nexport function isPowerOfTwo(n) {\n  return ((n & (n - 1)) === 0); // eslint-disable-line no-bitwise\n}\n\nexport function nextHighestPowerOfTwo(x) {\n  --x;\n  for (let i = 1; i < 32; i <<= 1) { // eslint-disable-line no-bitwise\n    x |= x >> i; // eslint-disable-line no-bitwise\n  }\n  return x + 1;\n}\n\nexport function logdata(data) {\n  if (data === undefined) {\n    return '';\n  }\n  let r = JSON.stringify(data);\n  if (r.length < 120) {\n    return r;\n  }\n  return `${r.slice(0, 120-3)}...`;\n}\n\nexport function isInteger(v) {\n  return typeof v === 'number' && isFinite(v) && floor(v) === v;\n}\n\nexport function toNumber(v) {\n  return Number(v);\n}\n\nexport function randomNot(not_value, max_value) {\n  let new_value;\n  do {\n    new_value = floor(random() * max_value);\n  } while (new_value === not_value);\n  return new_value;\n}\n\nexport function toArray(array_like) {\n  return Array.prototype.slice.call(array_like);\n}\n\nexport function matchAll(str, re) {\n  let ret = [];\n  let m;\n  do {\n    m = re.exec(str);\n    if (m) {\n      ret.push(m[1]);\n    }\n  } while (m);\n  return ret;\n}\n\nexport function callEach(arr, pre_clear, ...args) {\n  if (arr && arr.length) {\n    for (let ii = 0; ii < arr.length; ++ii) {\n      arr[ii](...args);\n    }\n  }\n}\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\nconst ack = require('./ack.js');\nconst assert = require('assert');\nconst { ackHandleMessage, ackReadHeader, ackWrapPakStart, ackWrapPakPayload, ackWrapPakFinish } = ack;\nconst packet = require('./packet.js');\nconst { isPacket, packetCreate, packetFromBuffer } = packet;\n\nexport const CONNECTION_TIMEOUT = 60000;\nexport const PING_TIME = CONNECTION_TIMEOUT / 2;\nexports.PROTOCOL_VERSION = '1';\n\n// Rough estimate, if over, will prevent resizing the packet\nconst PAK_HEADER_SIZE = 1 + // flags\n  1+16 + // message id\n  1+9; // resp_pak_id\n\nexport function wsPakSendDest(client, pak) {\n  if (!client.connected || client.socket.readyState !== 1) {\n    // We only get to this particular location from wsserver.broadcast*, all\n    //   other paths will print the actual message and error earlier.\n    console.warn(`Attempting to send on a disconnected link (client_id:${client.id}), ignoring`);\n    pak.pool();\n    return;\n  }\n  let buf = pak.getBuffer(); // a Uint8Array\n  let buf_len = pak.getBufferLen();\n  if (buf_len !== buf.length) {\n    buf = new Uint8Array(buf.buffer, buf.byteOffset, buf_len);\n  }\n  if (client.ws_server) {\n    client.socket.send(buf, function () {\n      pak.pool();\n    });\n  } else {\n    client.socket.send(buf);\n    pak.pool();\n  }\n  client.last_send_time = Date.now();\n}\n\nfunction wsPakSendFinish(pak, err, resp_func) {\n  let { client, msg } = pak.ws_data;\n  delete pak.ws_data;\n  let ack_resp_pkt_id = ackWrapPakFinish(pak, err, resp_func);\n\n  if (!client.connected || client.socket.readyState !== 1) { // WebSocket.OPEN\n    if (msg === 'channel_msg') { // client -> server channel message, attach additional debugging info\n      pak.seek(0);\n      pak.readFlags();\n      let header = ackReadHeader(pak);\n      let is_packet = isPacket(header.data);\n      let channel_id;\n      let submsg;\n      if (is_packet) {\n        pak.ref(); // deal with auto-pool of an empty packet\n        channel_id = pak.readAnsiString();\n        submsg = pak.readAnsiString();\n        if (!pak.ended()) {\n          pak.pool();\n        }\n      } else {\n        channel_id = header.data.channel_id;\n        submsg = header.data.msg;\n      }\n      msg = `channel_msg:${channel_id}:${submsg}`;\n    }\n    (client.log ? client : console).log(`Attempting to send msg=${msg} on a disconnected link, ignoring`);\n    if (!client.log && client.onError && msg && typeof msg !== 'number') {\n      // On the client, if we try to send a new packet while disconnected, this is an application error\n      client.onError(`Attempting to send msg=${msg} on a disconnected link`);\n    }\n\n    if (ack_resp_pkt_id) {\n      // Callback will never be dispatched through ack.js, remove the callback here\n      delete client.resp_cbs[ack_resp_pkt_id];\n    }\n    pak.pool();\n    return;\n  }\n\n  assert.equal(Boolean(resp_func && resp_func.expecting_response !== false), Boolean(ack_resp_pkt_id));\n\n  wsPakSendDest(client, pak);\n}\n\nfunction wsPakSend(err, resp_func) {\n  let pak = this; //eslint-disable-line no-invalid-this\n  if (typeof err === 'function' && !resp_func) {\n    resp_func = err;\n    err = null;\n  }\n  wsPakSendFinish(pak, err, resp_func);\n}\n\nexport function wsPak(msg, ref_pak, client) {\n  assert(typeof msg === 'string' || typeof msg === 'number');\n\n  // Assume new packet needs to be comparable to old packet, in flags and size\n  let pak = packetCreate(ref_pak ? ref_pak.getInternalFlags() : packet.default_flags,\n    ref_pak ? ref_pak.totalSize() + PAK_HEADER_SIZE : 0);\n  pak.writeFlags();\n\n  ackWrapPakStart(pak, client, msg);\n\n  pak.ws_data = {\n    msg,\n    client,\n  };\n  pak.send = wsPakSend;\n  return pak;\n}\n\nfunction sendMessageInternal(client, msg, err, data, resp_func) {\n  let is_packet = isPacket(data);\n  let pak = wsPak(msg, is_packet ? data : null, client);\n\n  if (!err) {\n    ackWrapPakPayload(pak, data);\n  }\n\n  pak.send(err, resp_func);\n}\n\nexport function sendMessage(msg, data, resp_func) {\n  sendMessageInternal(this, msg, null, data, resp_func); // eslint-disable-line no-invalid-this\n}\n\nexport function wsHandleMessage(client, buf) {\n  let now = Date.now();\n  let source = client.id ? `client ${client.id}` : 'server';\n  if (!(buf instanceof Uint8Array)) {\n    (client.log ? client : console).log(`Received incorrect WebSocket data type from ${source} (${typeof buf})`);\n    return client.onError('Invalid data received');\n  }\n  let pak = packetFromBuffer(buf, buf.length, false);\n  pak.readFlags();\n  client.last_receive_time = now;\n\n  return ackHandleMessage(client, source, pak, function sendFunc(msg, err, data, resp_func) {\n    if (resp_func && !resp_func.expecting_response) {\n      resp_func = null;\n    }\n    sendMessageInternal(client, msg, err, data, resp_func);\n  }, function pakFunc(msg, ref_pak) {\n    return wsPak(msg, ref_pak, client);\n  }, function handleFunc(msg, data, resp_func) {\n    let handler = client.handlers[msg];\n    if (!handler) {\n      let error_msg = `No handler for message ${JSON.stringify(msg)} from ${source}`;\n      console.error(error_msg, data);\n      if (client.onError) {\n        return client.onError(error_msg);\n      }\n      return resp_func(error_msg);\n    }\n    return handler(client, data, resp_func);\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}